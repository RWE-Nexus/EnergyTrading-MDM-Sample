#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MDM.Loader.AdcSync
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AutoDealCapture")]
	public partial class BrokerRatesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBroker_Desk(Broker_Desk instance);
    partial void UpdateBroker_Desk(Broker_Desk instance);
    partial void DeleteBroker_Desk(Broker_Desk instance);
    partial void InsertBrokerMapValue(BrokerMapValue instance);
    partial void UpdateBrokerMapValue(BrokerMapValue instance);
    partial void DeleteBrokerMapValue(BrokerMapValue instance);
    partial void InsertlkupDesk(lkupDesk instance);
    partial void UpdatelkupDesk(lkupDesk instance);
    partial void DeletelkupDesk(lkupDesk instance);
    partial void InsertlkupCommodity(lkupCommodity instance);
    partial void UpdatelkupCommodity(lkupCommodity instance);
    partial void DeletelkupCommodity(lkupCommodity instance);
    partial void InsertLocationMapValue(LocationMapValue instance);
    partial void UpdateLocationMapValue(LocationMapValue instance);
    partial void DeleteLocationMapValue(LocationMapValue instance);
    partial void InsertlkupTradeType(lkupTradeType instance);
    partial void UpdatelkupTradeType(lkupTradeType instance);
    partial void DeletelkupTradeType(lkupTradeType instance);
    partial void InsertlkupInitAgg(lkupInitAgg instance);
    partial void UpdatelkupInitAgg(lkupInitAgg instance);
    partial void DeletelkupInitAgg(lkupInitAgg instance);
    partial void InsertlkupExtSource(lkupExtSource instance);
    partial void UpdatelkupExtSource(lkupExtSource instance);
    partial void DeletelkupExtSource(lkupExtSource instance);
    #endregion
		
		public BrokerRatesDataContext() : 
				base(global::MDM.Loader.Properties.Settings.Default.AutoDealCaptureConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BrokerRatesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BrokerRatesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BrokerRatesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BrokerRatesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Broker_Desk> Broker_Desks
		{
			get
			{
				return this.GetTable<Broker_Desk>();
			}
		}
		
		public System.Data.Linq.Table<BrokerMapValue> BrokerMapValues
		{
			get
			{
				return this.GetTable<BrokerMapValue>();
			}
		}
		
		public System.Data.Linq.Table<lkupDesk> lkupDesks
		{
			get
			{
				return this.GetTable<lkupDesk>();
			}
		}
		
		public System.Data.Linq.Table<lkupCommodity> lkupCommodities
		{
			get
			{
				return this.GetTable<lkupCommodity>();
			}
		}
		
		public System.Data.Linq.Table<LocationMapValue> LocationMapValues
		{
			get
			{
				return this.GetTable<LocationMapValue>();
			}
		}
		
		public System.Data.Linq.Table<lkupTradeType> lkupTradeTypes
		{
			get
			{
				return this.GetTable<lkupTradeType>();
			}
		}
		
		public System.Data.Linq.Table<lkupInitAgg> lkupInitAggs
		{
			get
			{
				return this.GetTable<lkupInitAgg>();
			}
		}
		
		public System.Data.Linq.Table<lkupExtSource> lkupExtSources
		{
			get
			{
				return this.GetTable<lkupExtSource>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Broker_Desk")]
	public partial class Broker_Desk : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BrokerDeskID;
		
		private decimal _DefBrokerCommission;
		
		private int _BrokerID;
		
		private int _DeskID;
		
		private System.Nullable<int> _CommodityID;
		
		private System.Nullable<int> _LocationMapValuesID;
		
		private System.Nullable<int> _TradeTypeID;
		
		private System.Nullable<int> _InitAggID;
		
		private EntityRef<BrokerMapValue> _BrokerMapValue;
		
		private EntityRef<lkupDesk> _lkupDesk;
		
		private EntityRef<lkupCommodity> _lkupCommodity;
		
		private EntityRef<LocationMapValue> _LocationMapValue;
		
		private EntityRef<lkupTradeType> _lkupTradeType;
		
		private EntityRef<lkupInitAgg> _lkupInitAgg;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBrokerDeskIDChanging(int value);
    partial void OnBrokerDeskIDChanged();
    partial void OnDefBrokerCommissionChanging(decimal value);
    partial void OnDefBrokerCommissionChanged();
    partial void OnBrokerIDChanging(int value);
    partial void OnBrokerIDChanged();
    partial void OnDeskIDChanging(int value);
    partial void OnDeskIDChanged();
    partial void OnCommodityIDChanging(System.Nullable<int> value);
    partial void OnCommodityIDChanged();
    partial void OnLocationMapValuesIDChanging(System.Nullable<int> value);
    partial void OnLocationMapValuesIDChanged();
    partial void OnTradeTypeIDChanging(System.Nullable<int> value);
    partial void OnTradeTypeIDChanged();
    partial void OnInitAggIDChanging(System.Nullable<int> value);
    partial void OnInitAggIDChanged();
    #endregion
		
		public Broker_Desk()
		{
			this._BrokerMapValue = default(EntityRef<BrokerMapValue>);
			this._lkupDesk = default(EntityRef<lkupDesk>);
			this._lkupCommodity = default(EntityRef<lkupCommodity>);
			this._LocationMapValue = default(EntityRef<LocationMapValue>);
			this._lkupTradeType = default(EntityRef<lkupTradeType>);
			this._lkupInitAgg = default(EntityRef<lkupInitAgg>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrokerDeskID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BrokerDeskID
		{
			get
			{
				return this._BrokerDeskID;
			}
			set
			{
				if ((this._BrokerDeskID != value))
				{
					this.OnBrokerDeskIDChanging(value);
					this.SendPropertyChanging();
					this._BrokerDeskID = value;
					this.SendPropertyChanged("BrokerDeskID");
					this.OnBrokerDeskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefBrokerCommission", DbType="Decimal(19,6) NOT NULL")]
		public decimal DefBrokerCommission
		{
			get
			{
				return this._DefBrokerCommission;
			}
			set
			{
				if ((this._DefBrokerCommission != value))
				{
					this.OnDefBrokerCommissionChanging(value);
					this.SendPropertyChanging();
					this._DefBrokerCommission = value;
					this.SendPropertyChanged("DefBrokerCommission");
					this.OnDefBrokerCommissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrokerID", DbType="Int NOT NULL")]
		public int BrokerID
		{
			get
			{
				return this._BrokerID;
			}
			set
			{
				if ((this._BrokerID != value))
				{
					if (this._BrokerMapValue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrokerIDChanging(value);
					this.SendPropertyChanging();
					this._BrokerID = value;
					this.SendPropertyChanged("BrokerID");
					this.OnBrokerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeskID", DbType="Int NOT NULL")]
		public int DeskID
		{
			get
			{
				return this._DeskID;
			}
			set
			{
				if ((this._DeskID != value))
				{
					if (this._lkupDesk.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeskIDChanging(value);
					this.SendPropertyChanging();
					this._DeskID = value;
					this.SendPropertyChanged("DeskID");
					this.OnDeskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommodityID", DbType="Int")]
		public System.Nullable<int> CommodityID
		{
			get
			{
				return this._CommodityID;
			}
			set
			{
				if ((this._CommodityID != value))
				{
					if (this._lkupCommodity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommodityIDChanging(value);
					this.SendPropertyChanging();
					this._CommodityID = value;
					this.SendPropertyChanged("CommodityID");
					this.OnCommodityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationMapValuesID", DbType="Int")]
		public System.Nullable<int> LocationMapValuesID
		{
			get
			{
				return this._LocationMapValuesID;
			}
			set
			{
				if ((this._LocationMapValuesID != value))
				{
					if (this._LocationMapValue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationMapValuesIDChanging(value);
					this.SendPropertyChanging();
					this._LocationMapValuesID = value;
					this.SendPropertyChanged("LocationMapValuesID");
					this.OnLocationMapValuesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradeTypeID", DbType="Int")]
		public System.Nullable<int> TradeTypeID
		{
			get
			{
				return this._TradeTypeID;
			}
			set
			{
				if ((this._TradeTypeID != value))
				{
					if (this._lkupTradeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTradeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TradeTypeID = value;
					this.SendPropertyChanged("TradeTypeID");
					this.OnTradeTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitAggID", DbType="Int")]
		public System.Nullable<int> InitAggID
		{
			get
			{
				return this._InitAggID;
			}
			set
			{
				if ((this._InitAggID != value))
				{
					if (this._lkupInitAgg.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInitAggIDChanging(value);
					this.SendPropertyChanging();
					this._InitAggID = value;
					this.SendPropertyChanged("InitAggID");
					this.OnInitAggIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrokerMapValue_Broker_Desk", Storage="_BrokerMapValue", ThisKey="BrokerID", OtherKey="ID", IsForeignKey=true)]
		public BrokerMapValue BrokerMapValue
		{
			get
			{
				return this._BrokerMapValue.Entity;
			}
			set
			{
				BrokerMapValue previousValue = this._BrokerMapValue.Entity;
				if (((previousValue != value) 
							|| (this._BrokerMapValue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BrokerMapValue.Entity = null;
						previousValue.Broker_Desks.Remove(this);
					}
					this._BrokerMapValue.Entity = value;
					if ((value != null))
					{
						value.Broker_Desks.Add(this);
						this._BrokerID = value.ID;
					}
					else
					{
						this._BrokerID = default(int);
					}
					this.SendPropertyChanged("BrokerMapValue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkupDesk_Broker_Desk", Storage="_lkupDesk", ThisKey="DeskID", OtherKey="DeskID", IsForeignKey=true)]
		public lkupDesk lkupDesk
		{
			get
			{
				return this._lkupDesk.Entity;
			}
			set
			{
				lkupDesk previousValue = this._lkupDesk.Entity;
				if (((previousValue != value) 
							|| (this._lkupDesk.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkupDesk.Entity = null;
						previousValue.Broker_Desks.Remove(this);
					}
					this._lkupDesk.Entity = value;
					if ((value != null))
					{
						value.Broker_Desks.Add(this);
						this._DeskID = value.DeskID;
					}
					else
					{
						this._DeskID = default(int);
					}
					this.SendPropertyChanged("lkupDesk");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkupCommodity_Broker_Desk", Storage="_lkupCommodity", ThisKey="CommodityID", OtherKey="CommodityID", IsForeignKey=true)]
		public lkupCommodity lkupCommodity
		{
			get
			{
				return this._lkupCommodity.Entity;
			}
			set
			{
				lkupCommodity previousValue = this._lkupCommodity.Entity;
				if (((previousValue != value) 
							|| (this._lkupCommodity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkupCommodity.Entity = null;
						previousValue.Broker_Desks.Remove(this);
					}
					this._lkupCommodity.Entity = value;
					if ((value != null))
					{
						value.Broker_Desks.Add(this);
						this._CommodityID = value.CommodityID;
					}
					else
					{
						this._CommodityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("lkupCommodity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocationMapValue_Broker_Desk", Storage="_LocationMapValue", ThisKey="LocationMapValuesID", OtherKey="ID", IsForeignKey=true)]
		public LocationMapValue LocationMapValue
		{
			get
			{
				return this._LocationMapValue.Entity;
			}
			set
			{
				LocationMapValue previousValue = this._LocationMapValue.Entity;
				if (((previousValue != value) 
							|| (this._LocationMapValue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LocationMapValue.Entity = null;
						previousValue.Broker_Desks.Remove(this);
					}
					this._LocationMapValue.Entity = value;
					if ((value != null))
					{
						value.Broker_Desks.Add(this);
						this._LocationMapValuesID = value.ID;
					}
					else
					{
						this._LocationMapValuesID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LocationMapValue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkupTradeType_Broker_Desk", Storage="_lkupTradeType", ThisKey="TradeTypeID", OtherKey="TradeTypeID", IsForeignKey=true)]
		public lkupTradeType lkupTradeType
		{
			get
			{
				return this._lkupTradeType.Entity;
			}
			set
			{
				lkupTradeType previousValue = this._lkupTradeType.Entity;
				if (((previousValue != value) 
							|| (this._lkupTradeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkupTradeType.Entity = null;
						previousValue.Broker_Desks.Remove(this);
					}
					this._lkupTradeType.Entity = value;
					if ((value != null))
					{
						value.Broker_Desks.Add(this);
						this._TradeTypeID = value.TradeTypeID;
					}
					else
					{
						this._TradeTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("lkupTradeType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkupInitAgg_Broker_Desk", Storage="_lkupInitAgg", ThisKey="InitAggID", OtherKey="InitAggID", IsForeignKey=true)]
		public lkupInitAgg lkupInitAgg
		{
			get
			{
				return this._lkupInitAgg.Entity;
			}
			set
			{
				lkupInitAgg previousValue = this._lkupInitAgg.Entity;
				if (((previousValue != value) 
							|| (this._lkupInitAgg.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkupInitAgg.Entity = null;
						previousValue.Broker_Desks.Remove(this);
					}
					this._lkupInitAgg.Entity = value;
					if ((value != null))
					{
						value.Broker_Desks.Add(this);
						this._InitAggID = value.InitAggID;
					}
					else
					{
						this._InitAggID = default(Nullable<int>);
					}
					this.SendPropertyChanged("lkupInitAgg");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BrokerMapValues")]
	public partial class BrokerMapValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ExtSourceID;
		
		private string _BrokerName;
		
		private EntitySet<Broker_Desk> _Broker_Desks;
		
		private EntityRef<lkupExtSource> _lkupExtSource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnExtSourceIDChanging(int value);
    partial void OnExtSourceIDChanged();
    partial void OnBrokerNameChanging(string value);
    partial void OnBrokerNameChanged();
    #endregion
		
		public BrokerMapValue()
		{
			this._Broker_Desks = new EntitySet<Broker_Desk>(new Action<Broker_Desk>(this.attach_Broker_Desks), new Action<Broker_Desk>(this.detach_Broker_Desks));
			this._lkupExtSource = default(EntityRef<lkupExtSource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtSourceID", DbType="Int NOT NULL")]
		public int ExtSourceID
		{
			get
			{
				return this._ExtSourceID;
			}
			set
			{
				if ((this._ExtSourceID != value))
				{
					if (this._lkupExtSource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExtSourceIDChanging(value);
					this.SendPropertyChanging();
					this._ExtSourceID = value;
					this.SendPropertyChanged("ExtSourceID");
					this.OnExtSourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrokerName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string BrokerName
		{
			get
			{
				return this._BrokerName;
			}
			set
			{
				if ((this._BrokerName != value))
				{
					this.OnBrokerNameChanging(value);
					this.SendPropertyChanging();
					this._BrokerName = value;
					this.SendPropertyChanged("BrokerName");
					this.OnBrokerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrokerMapValue_Broker_Desk", Storage="_Broker_Desks", ThisKey="ID", OtherKey="BrokerID")]
		public EntitySet<Broker_Desk> Broker_Desks
		{
			get
			{
				return this._Broker_Desks;
			}
			set
			{
				this._Broker_Desks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkupExtSource_BrokerMapValue", Storage="_lkupExtSource", ThisKey="ExtSourceID", OtherKey="ExtSourceID", IsForeignKey=true)]
		public lkupExtSource lkupExtSource
		{
			get
			{
				return this._lkupExtSource.Entity;
			}
			set
			{
				lkupExtSource previousValue = this._lkupExtSource.Entity;
				if (((previousValue != value) 
							|| (this._lkupExtSource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkupExtSource.Entity = null;
						previousValue.BrokerMapValues.Remove(this);
					}
					this._lkupExtSource.Entity = value;
					if ((value != null))
					{
						value.BrokerMapValues.Add(this);
						this._ExtSourceID = value.ExtSourceID;
					}
					else
					{
						this._ExtSourceID = default(int);
					}
					this.SendPropertyChanged("lkupExtSource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Broker_Desks(Broker_Desk entity)
		{
			this.SendPropertyChanging();
			entity.BrokerMapValue = this;
		}
		
		private void detach_Broker_Desks(Broker_Desk entity)
		{
			this.SendPropertyChanging();
			entity.BrokerMapValue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkupDesk")]
	public partial class lkupDesk : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DeskID;
		
		private string _DeskName;
		
		private System.Nullable<bool> _AllowSelectTrader;
		
		private EntitySet<Broker_Desk> _Broker_Desks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeskIDChanging(int value);
    partial void OnDeskIDChanged();
    partial void OnDeskNameChanging(string value);
    partial void OnDeskNameChanged();
    partial void OnAllowSelectTraderChanging(System.Nullable<bool> value);
    partial void OnAllowSelectTraderChanged();
    #endregion
		
		public lkupDesk()
		{
			this._Broker_Desks = new EntitySet<Broker_Desk>(new Action<Broker_Desk>(this.attach_Broker_Desks), new Action<Broker_Desk>(this.detach_Broker_Desks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeskID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DeskID
		{
			get
			{
				return this._DeskID;
			}
			set
			{
				if ((this._DeskID != value))
				{
					this.OnDeskIDChanging(value);
					this.SendPropertyChanging();
					this._DeskID = value;
					this.SendPropertyChanged("DeskID");
					this.OnDeskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeskName", DbType="VarChar(50)")]
		public string DeskName
		{
			get
			{
				return this._DeskName;
			}
			set
			{
				if ((this._DeskName != value))
				{
					this.OnDeskNameChanging(value);
					this.SendPropertyChanging();
					this._DeskName = value;
					this.SendPropertyChanged("DeskName");
					this.OnDeskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowSelectTrader", DbType="Bit")]
		public System.Nullable<bool> AllowSelectTrader
		{
			get
			{
				return this._AllowSelectTrader;
			}
			set
			{
				if ((this._AllowSelectTrader != value))
				{
					this.OnAllowSelectTraderChanging(value);
					this.SendPropertyChanging();
					this._AllowSelectTrader = value;
					this.SendPropertyChanged("AllowSelectTrader");
					this.OnAllowSelectTraderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkupDesk_Broker_Desk", Storage="_Broker_Desks", ThisKey="DeskID", OtherKey="DeskID")]
		public EntitySet<Broker_Desk> Broker_Desks
		{
			get
			{
				return this._Broker_Desks;
			}
			set
			{
				this._Broker_Desks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Broker_Desks(Broker_Desk entity)
		{
			this.SendPropertyChanging();
			entity.lkupDesk = this;
		}
		
		private void detach_Broker_Desks(Broker_Desk entity)
		{
			this.SendPropertyChanging();
			entity.lkupDesk = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkupCommodity")]
	public partial class lkupCommodity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommodityID;
		
		private string _CommodityName;
		
		private EntitySet<Broker_Desk> _Broker_Desks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommodityIDChanging(int value);
    partial void OnCommodityIDChanged();
    partial void OnCommodityNameChanging(string value);
    partial void OnCommodityNameChanged();
    #endregion
		
		public lkupCommodity()
		{
			this._Broker_Desks = new EntitySet<Broker_Desk>(new Action<Broker_Desk>(this.attach_Broker_Desks), new Action<Broker_Desk>(this.detach_Broker_Desks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommodityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommodityID
		{
			get
			{
				return this._CommodityID;
			}
			set
			{
				if ((this._CommodityID != value))
				{
					this.OnCommodityIDChanging(value);
					this.SendPropertyChanging();
					this._CommodityID = value;
					this.SendPropertyChanged("CommodityID");
					this.OnCommodityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommodityName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CommodityName
		{
			get
			{
				return this._CommodityName;
			}
			set
			{
				if ((this._CommodityName != value))
				{
					this.OnCommodityNameChanging(value);
					this.SendPropertyChanging();
					this._CommodityName = value;
					this.SendPropertyChanged("CommodityName");
					this.OnCommodityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkupCommodity_Broker_Desk", Storage="_Broker_Desks", ThisKey="CommodityID", OtherKey="CommodityID")]
		public EntitySet<Broker_Desk> Broker_Desks
		{
			get
			{
				return this._Broker_Desks;
			}
			set
			{
				this._Broker_Desks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Broker_Desks(Broker_Desk entity)
		{
			this.SendPropertyChanging();
			entity.lkupCommodity = this;
		}
		
		private void detach_Broker_Desks(Broker_Desk entity)
		{
			this.SendPropertyChanging();
			entity.lkupCommodity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationMapValues")]
	public partial class LocationMapValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ExtSourceID;
		
		private string _LocationName;
		
		private EntitySet<Broker_Desk> _Broker_Desks;
		
		private EntityRef<lkupExtSource> _lkupExtSource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnExtSourceIDChanging(int value);
    partial void OnExtSourceIDChanged();
    partial void OnLocationNameChanging(string value);
    partial void OnLocationNameChanged();
    #endregion
		
		public LocationMapValue()
		{
			this._Broker_Desks = new EntitySet<Broker_Desk>(new Action<Broker_Desk>(this.attach_Broker_Desks), new Action<Broker_Desk>(this.detach_Broker_Desks));
			this._lkupExtSource = default(EntityRef<lkupExtSource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtSourceID", DbType="Int NOT NULL")]
		public int ExtSourceID
		{
			get
			{
				return this._ExtSourceID;
			}
			set
			{
				if ((this._ExtSourceID != value))
				{
					if (this._lkupExtSource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExtSourceIDChanging(value);
					this.SendPropertyChanging();
					this._ExtSourceID = value;
					this.SendPropertyChanged("ExtSourceID");
					this.OnExtSourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationName", DbType="VarChar(50)")]
		public string LocationName
		{
			get
			{
				return this._LocationName;
			}
			set
			{
				if ((this._LocationName != value))
				{
					this.OnLocationNameChanging(value);
					this.SendPropertyChanging();
					this._LocationName = value;
					this.SendPropertyChanged("LocationName");
					this.OnLocationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocationMapValue_Broker_Desk", Storage="_Broker_Desks", ThisKey="ID", OtherKey="LocationMapValuesID")]
		public EntitySet<Broker_Desk> Broker_Desks
		{
			get
			{
				return this._Broker_Desks;
			}
			set
			{
				this._Broker_Desks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkupExtSource_LocationMapValue", Storage="_lkupExtSource", ThisKey="ExtSourceID", OtherKey="ExtSourceID", IsForeignKey=true)]
		public lkupExtSource lkupExtSource
		{
			get
			{
				return this._lkupExtSource.Entity;
			}
			set
			{
				lkupExtSource previousValue = this._lkupExtSource.Entity;
				if (((previousValue != value) 
							|| (this._lkupExtSource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkupExtSource.Entity = null;
						previousValue.LocationMapValues.Remove(this);
					}
					this._lkupExtSource.Entity = value;
					if ((value != null))
					{
						value.LocationMapValues.Add(this);
						this._ExtSourceID = value.ExtSourceID;
					}
					else
					{
						this._ExtSourceID = default(int);
					}
					this.SendPropertyChanged("lkupExtSource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Broker_Desks(Broker_Desk entity)
		{
			this.SendPropertyChanging();
			entity.LocationMapValue = this;
		}
		
		private void detach_Broker_Desks(Broker_Desk entity)
		{
			this.SendPropertyChanging();
			entity.LocationMapValue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkupTradeType")]
	public partial class lkupTradeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TradeTypeID;
		
		private string _TradeTypeCode;
		
		private string _TradeTypeDesc;
		
		private EntitySet<Broker_Desk> _Broker_Desks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTradeTypeIDChanging(int value);
    partial void OnTradeTypeIDChanged();
    partial void OnTradeTypeCodeChanging(string value);
    partial void OnTradeTypeCodeChanged();
    partial void OnTradeTypeDescChanging(string value);
    partial void OnTradeTypeDescChanged();
    #endregion
		
		public lkupTradeType()
		{
			this._Broker_Desks = new EntitySet<Broker_Desk>(new Action<Broker_Desk>(this.attach_Broker_Desks), new Action<Broker_Desk>(this.detach_Broker_Desks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradeTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TradeTypeID
		{
			get
			{
				return this._TradeTypeID;
			}
			set
			{
				if ((this._TradeTypeID != value))
				{
					this.OnTradeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TradeTypeID = value;
					this.SendPropertyChanged("TradeTypeID");
					this.OnTradeTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradeTypeCode", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string TradeTypeCode
		{
			get
			{
				return this._TradeTypeCode;
			}
			set
			{
				if ((this._TradeTypeCode != value))
				{
					this.OnTradeTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._TradeTypeCode = value;
					this.SendPropertyChanged("TradeTypeCode");
					this.OnTradeTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradeTypeDesc", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string TradeTypeDesc
		{
			get
			{
				return this._TradeTypeDesc;
			}
			set
			{
				if ((this._TradeTypeDesc != value))
				{
					this.OnTradeTypeDescChanging(value);
					this.SendPropertyChanging();
					this._TradeTypeDesc = value;
					this.SendPropertyChanged("TradeTypeDesc");
					this.OnTradeTypeDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkupTradeType_Broker_Desk", Storage="_Broker_Desks", ThisKey="TradeTypeID", OtherKey="TradeTypeID")]
		public EntitySet<Broker_Desk> Broker_Desks
		{
			get
			{
				return this._Broker_Desks;
			}
			set
			{
				this._Broker_Desks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Broker_Desks(Broker_Desk entity)
		{
			this.SendPropertyChanging();
			entity.lkupTradeType = this;
		}
		
		private void detach_Broker_Desks(Broker_Desk entity)
		{
			this.SendPropertyChanging();
			entity.lkupTradeType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkupInitAgg")]
	public partial class lkupInitAgg : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InitAggID;
		
		private string _InitAggName;
		
		private EntitySet<Broker_Desk> _Broker_Desks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInitAggIDChanging(int value);
    partial void OnInitAggIDChanged();
    partial void OnInitAggNameChanging(string value);
    partial void OnInitAggNameChanged();
    #endregion
		
		public lkupInitAgg()
		{
			this._Broker_Desks = new EntitySet<Broker_Desk>(new Action<Broker_Desk>(this.attach_Broker_Desks), new Action<Broker_Desk>(this.detach_Broker_Desks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitAggID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InitAggID
		{
			get
			{
				return this._InitAggID;
			}
			set
			{
				if ((this._InitAggID != value))
				{
					this.OnInitAggIDChanging(value);
					this.SendPropertyChanging();
					this._InitAggID = value;
					this.SendPropertyChanged("InitAggID");
					this.OnInitAggIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitAggName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string InitAggName
		{
			get
			{
				return this._InitAggName;
			}
			set
			{
				if ((this._InitAggName != value))
				{
					this.OnInitAggNameChanging(value);
					this.SendPropertyChanging();
					this._InitAggName = value;
					this.SendPropertyChanged("InitAggName");
					this.OnInitAggNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkupInitAgg_Broker_Desk", Storage="_Broker_Desks", ThisKey="InitAggID", OtherKey="InitAggID")]
		public EntitySet<Broker_Desk> Broker_Desks
		{
			get
			{
				return this._Broker_Desks;
			}
			set
			{
				this._Broker_Desks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Broker_Desks(Broker_Desk entity)
		{
			this.SendPropertyChanging();
			entity.lkupInitAgg = this;
		}
		
		private void detach_Broker_Desks(Broker_Desk entity)
		{
			this.SendPropertyChanging();
			entity.lkupInitAgg = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkupExtSource")]
	public partial class lkupExtSource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExtSourceID;
		
		private string _ExtSourceName;
		
		private EntitySet<BrokerMapValue> _BrokerMapValues;
		
		private EntitySet<LocationMapValue> _LocationMapValues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExtSourceIDChanging(int value);
    partial void OnExtSourceIDChanged();
    partial void OnExtSourceNameChanging(string value);
    partial void OnExtSourceNameChanged();
    #endregion
		
		public lkupExtSource()
		{
			this._BrokerMapValues = new EntitySet<BrokerMapValue>(new Action<BrokerMapValue>(this.attach_BrokerMapValues), new Action<BrokerMapValue>(this.detach_BrokerMapValues));
			this._LocationMapValues = new EntitySet<LocationMapValue>(new Action<LocationMapValue>(this.attach_LocationMapValues), new Action<LocationMapValue>(this.detach_LocationMapValues));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtSourceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExtSourceID
		{
			get
			{
				return this._ExtSourceID;
			}
			set
			{
				if ((this._ExtSourceID != value))
				{
					this.OnExtSourceIDChanging(value);
					this.SendPropertyChanging();
					this._ExtSourceID = value;
					this.SendPropertyChanged("ExtSourceID");
					this.OnExtSourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtSourceName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ExtSourceName
		{
			get
			{
				return this._ExtSourceName;
			}
			set
			{
				if ((this._ExtSourceName != value))
				{
					this.OnExtSourceNameChanging(value);
					this.SendPropertyChanging();
					this._ExtSourceName = value;
					this.SendPropertyChanged("ExtSourceName");
					this.OnExtSourceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkupExtSource_BrokerMapValue", Storage="_BrokerMapValues", ThisKey="ExtSourceID", OtherKey="ExtSourceID")]
		public EntitySet<BrokerMapValue> BrokerMapValues
		{
			get
			{
				return this._BrokerMapValues;
			}
			set
			{
				this._BrokerMapValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkupExtSource_LocationMapValue", Storage="_LocationMapValues", ThisKey="ExtSourceID", OtherKey="ExtSourceID")]
		public EntitySet<LocationMapValue> LocationMapValues
		{
			get
			{
				return this._LocationMapValues;
			}
			set
			{
				this._LocationMapValues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BrokerMapValues(BrokerMapValue entity)
		{
			this.SendPropertyChanging();
			entity.lkupExtSource = this;
		}
		
		private void detach_BrokerMapValues(BrokerMapValue entity)
		{
			this.SendPropertyChanging();
			entity.lkupExtSource = null;
		}
		
		private void attach_LocationMapValues(LocationMapValue entity)
		{
			this.SendPropertyChanging();
			entity.lkupExtSource = this;
		}
		
		private void detach_LocationMapValues(LocationMapValue entity)
		{
			this.SendPropertyChanging();
			entity.lkupExtSource = null;
		}
	}
}
#pragma warning restore 1591
