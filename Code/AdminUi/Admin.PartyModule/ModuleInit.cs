// This code was generated by a tool: InfrastructureTemplates\ModuleInitTemplate.tt
namespace Admin.PartyModule
{
    using System;

    using Admin.PartyModule.ViewModels;
    using Admin.PartyModule.Views;

    using Common.Services;

    using EnergyTrading.Mdm.Client.Services;
    using EnergyTrading.Mdm.Client.WebClient;
    using EnergyTrading.Mdm.Contracts;
    using EnergyTrading.MDM.Contracts.Sample;

    using Microsoft.Practices.Prism.Events;
    using Microsoft.Practices.Prism.Modularity;
    using Microsoft.Practices.Unity;

    public class ModuleInit : IModule
    {
        private readonly IUnityContainer container;

        private readonly IApplicationMenuRegistry menuRegistry;

        public ModuleInit(IUnityContainer container, IApplicationMenuRegistry menuRegistry)
        {
            this.container = container;
            this.menuRegistry = menuRegistry;
        }

        public void Initialize()
        {
            this.Register();
            this.PopulateReferenceData();

            this.menuRegistry.RegisterMenuItem(
                "Party", 
                string.Empty, 
                typeof(PartySearchResultsView), 
                new Uri(PartyViewNames.PartyAddView, UriKind.Relative), 
                "Name", 
                "_Name");
            this.menuRegistry.RegisterEntitySelector("Party", typeof(PartySelectorView));
        }

        private void PopulateReferenceData()
        {
        }

        private void Register()
        {
            this.container.RegisterType<IMdmEntityService<Party>, MdmEntityService<Party>>(
                new ContainerControlledLifetimeManager(), 
                new InjectionConstructor(Server.Name + "party", new ResolvedParameter<IMessageRequester>()));
            this.container.RegisterType<object, PartyEditView>(PartyViewNames.PartyEditView);
            this.container.RegisterType<object, PartyAddView>(PartyViewNames.PartyAddView);
            this.container.RegisterType<object, PartySearchResultsView>(PartyViewNames.PartySearchResultsView);
            this.container.RegisterType<object, PartyEmbeddedSearchResultsView>(
                PartyViewNames.PartyEmbeddedSearchResultsView, 
                new ContainerControlledLifetimeManager());

            this.container.RegisterType<PartyAddViewModel>(
                new ContainerControlledLifetimeManager(), 
                new InjectionConstructor(
                    new ResolvedParameter<IEventAggregator>(), 
                    new ResolvedParameter<IMdmService>()));

            this.container.RegisterType<PartyEditViewModel>(
                new ContainerControlledLifetimeManager(), 
                new InjectionConstructor(
                    new ResolvedParameter<IEventAggregator>(), 
                    new ResolvedParameter<IMdmService>(), 
                    new ResolvedParameter<INavigationService>(), 
                    new ResolvedParameter<IMappingService>(), 
                    new ResolvedParameter<IApplicationCommands>()));

            this.container.RegisterType<PartySelectorView>();
            this.container.RegisterType<PartySelectorViewModel>();

            this.container.RegisterInstance<Func<int, IMdmEntity>>(
                "Party", 
                entityId =>
                    {
                        var entityService = container.Resolve<IMdmEntityService<Party>>();
                        var response = entityService.Get(entityId);
                        return response.Message;
                    });
        }
    }
}