// This code was generated by a tool: ViewModelTemplates\EntityEditViewModelTemplate.tt
namespace Admin.PartyAccountabilityModule.ViewModels
{
    using System;
    using System.Collections.ObjectModel;
    using System.Collections.Generic;
    using System.Linq;
    using System.Windows.Input;

    using Common;
    
    using Common.Authorisation;
    using Common.Commands;
    using Common.Events;
    using Common.Extensions;
    using Common.Services;
    using Common.UI;
    using Common.UI.Uris;
    using Common.UI.ViewModels;

    using Microsoft.Practices.Prism.Events;
    using Microsoft.Practices.Prism.Interactivity.InteractionRequest;
    using Microsoft.Practices.Prism.Regions;
    using Microsoft.Practices.Prism.ViewModel;

    using EnergyTrading;
    using EnergyTrading.Mdm.Client.WebClient;
    using EnergyTrading.MDM.Contracts.Sample; using EnergyTrading.Mdm.Contracts;
    using EnergyTrading.Mdm.Client.Services;

    using Uris;

    public class PartyAccountabilityEditViewModel : NotificationObject, IConfirmNavigationRequest
    {
        private readonly InteractionRequest<Confirmation> confirmationFromViewModelInteractionRequest;
        private readonly IMdmService entityService;
        private readonly IEventAggregator eventAggregator;
        private readonly INavigationService navigationService;
        private readonly IMappingService mappingService;
        private ObservableCollection<MappingViewModel> mappings;
        private PartyAccountabilityViewModel partyaccountability;
        private MappingViewModel selectedMapping;
        private ICommand deleteMappingCommand;
        private ICommand updateMappingCommand;
        private DateTime validAtString;
        private readonly IApplicationCommands applicationCommands;
        

        public PartyAccountabilityEditViewModel(
            IEventAggregator eventAggregator, 
            IMdmService entityService,
            INavigationService navigationService,
            IMappingService mappingService,
            IApplicationCommands applicationCommands,
            IList<string> partyaccountabilitytypeConfiguration)
        {
            this.navigationService = navigationService;
            this.mappingService = mappingService;
            this.applicationCommands = applicationCommands;
            
            this.eventAggregator = eventAggregator;
            this.entityService = entityService;
            this.confirmationFromViewModelInteractionRequest = new InteractionRequest<Confirmation>();
            this.CanEdit = AuthorisationHelpers.HasEntityRights("PartyAccountability");
            
                         this.PartyAccountabilityTypeConfiguration = partyaccountabilitytypeConfiguration;
                   }

        public bool CanEdit { get; private set; }
    
                public IList<string> PartyAccountabilityTypeConfiguration
        {
            get;
            set;
        }
                   
        public ICommand DeleteMappingCommand
        {
            get
            {
                if (this.deleteMappingCommand == null)
                {
                    this.deleteMappingCommand = new RelayCommand(param => this.DeleteMapping(param), param => CanEditOrDeleteMapping(param));
                }

                return this.deleteMappingCommand;
            }
        }

        public ICommand UpdateMappingCommand
        {
            get
            {
                if (this.updateMappingCommand == null)
                {
                    this.updateMappingCommand = new RelayCommand(param => this.UpdateMapping(param), param => CanEditOrDeleteMapping(param));
                }

                return this.updateMappingCommand;
            }
        }

        private bool CanEditOrDeleteMapping(object mapping)
        {
            var mappingViewModel = mapping as MappingViewModel;
            if (mappingViewModel == null)
            {
                return false;
            }

            if (mappingViewModel.MappingId == null)
            {
                return false;
            }

            return CanEditOrDeleteMapping(mappingViewModel.MappingId.Value);
        }

        private bool CanEditOrDeleteMapping(int mappingId)
        {
            var system = Mappings.Where(x => x.MappingId == mappingId).Select(x => x.SystemName).FirstOrDefault();
            return AuthorisationHelpers.HasMappingRights("PartyAccountability", system);
        }

        private void DeleteMapping(object mapping)
        {
            var mappingViewModel = mapping as MappingViewModel;
            if (mappingViewModel == null)
            {
                return;
            }

            if (mappingViewModel.MappingId == null)
            {
                return;
            }

            this.eventAggregator.Publish(new ConfirmMappingDeleteEvent(mappingViewModel.MappingId.Value,
                mappingViewModel.MappingString, mappingViewModel.SystemName));
        }

        private void UpdateMapping(object mapping)
        {
            var mappingViewModel = mapping as MappingViewModel;
            if (mappingViewModel == null)
            {
                return;
            }

            if (mappingViewModel.MappingId == null)
            {
                return;
            } 
            
            if (mappingViewModel != null)
            {
                this.eventAggregator.Publish(new MappingUpdateEvent(this.PartyAccountability.Id.Value, mappingViewModel.MappingId.Value, mappingViewModel.MappingString, "PartyAccountability"));
            }
        }

        private bool CanAddMappings()
        {
            foreach (var system in mappingService.GetSourceSystemNames())
            {
                if (AuthorisationHelpers.HasMappingRights("PartyAccountability", system))
                {
                    return true;
                }
            }
            return false;
        }
        
        /// <summary>
        /// Gets the notification from view model interaction request. View binds to this property
        /// </summary>
        public IInteractionRequest ConfirmationFromViewModelInteractionRequest
        {
            get
            {
                return this.confirmationFromViewModelInteractionRequest;
            }
        }

        public ObservableCollection<MappingViewModel> Mappings
        {
            get
            {
                return this.mappings;
            }

            set
            {
                this.mappings = value;
                this.RaisePropertyChanged(() => this.Mappings);
            }
        }

        public PartyAccountabilityViewModel PartyAccountability
        {
            get
            {
                return this.partyaccountability;
            }

            set
            {
                this.partyaccountability = value;
                this.RaisePropertyChanged(() => this.PartyAccountability);
            }
        }

        public MappingViewModel SelectedMapping
        {
            get
            {
                return this.selectedMapping;
            }

            set
            {
                this.selectedMapping = value;
                this.RaisePropertyChanged(() => this.SelectedMapping);
            }
        }

        public void NavigateToDetail(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                this.NavigateToDetailScreen();
            }
        }

        public void NavigateToDetailDoubleClick()
        {
            this.NavigateToDetailScreen();
        }

        private void NavigateToDetailScreen()
        {
            if (this.SelectedMapping != null && CanEditOrDeleteMapping(this.SelectedMapping))
            {
                if (!this.SelectedMapping.IsMdmId)
                {
                    this.navigationService.NavigateMain(
                        new MappingEditUri(
                            this.PartyAccountability.Id.Value, "PartyAccountability", Convert.ToInt32(this.SelectedMapping.MappingId), this.PartyAccountability.Name));
                    return;
                }

                this.eventAggregator.Publish(new StatusEvent("MdmSystemData ID cannot be edited"));
            }
        }

        public void Sorting()
        {
            this.SelectedMapping = null;
        }

        public void ConfirmNavigationRequest(NavigationContext navigationContext, Action<bool> continuationCallback)
        {
            if (this.PartyAccountability.CanSave)
            {
                this.eventAggregator.Publish(new DialogOpenEvent(true));
                this.confirmationFromViewModelInteractionRequest.Raise(
                    new Confirmation { Content = Message.UnsavedChanges, Title = Message.UnsavedChangeTitle },
                    confirmation =>
                        {
                            continuationCallback(confirmation.Confirmed);
                            this.eventAggregator.Publish(new DialogOpenEvent(false));
                        });
            }
            else
            {
                continuationCallback(true);
            }
        }

        public bool IsNavigationTarget(NavigationContext navigationContext)
        {
            return true;
        }

        public void OnNavigatedFrom(NavigationContext navigationContext)
        {
            this.eventAggregator.Unsubscribe<SaveEvent>(this.Save);
            this.eventAggregator.Unsubscribe<CreateEvent>(this.CreateMapping);
            this.eventAggregator.Unsubscribe<EntitySelectedEvent>(this.EntitySelected);
            this.eventAggregator.Unsubscribe<MappingUpdatedEvent>(this.MappingUpdated);
            this.eventAggregator.Unsubscribe<MappingDeleteConfirmedEvent>(this.MappingDeleteConfirmed);
                    
                }

        public void OnNavigatedTo(NavigationContext navigationContext)
        {
            this.eventAggregator.Subscribe<SaveEvent>(this.Save);
            this.eventAggregator.Subscribe<CreateEvent>(this.CreateMapping);
            this.eventAggregator.Subscribe<MappingUpdatedEvent>(this.MappingUpdated);
            this.eventAggregator.Subscribe<MappingDeleteConfirmedEvent>(this.MappingDeleteConfirmed);
            this.eventAggregator.Subscribe<EntitySelectedEvent>(this.EntitySelected);
            int idParam = int.Parse(navigationContext.Parameters[NavigationParameters.EntityId]);
            DateTime validAtStringParam = DateTime.Parse(navigationContext.Parameters[NavigationParameters.ValidAtDate]);

            if (this.PartyAccountability == null || this.validAtString != validAtStringParam ||
                this.PartyAccountability.Id != idParam)
            {
                    }

            this.validAtString = validAtStringParam;
            this.LoadPartyAccountabilityFromService(idParam, validAtString);

                    this.eventAggregator.Publish(new CanCreateNewChangeEvent(CanAddMappings()));
        }

        
        

        private void EntitySelected(EntitySelectedEvent obj)
        {
                            switch (obj.EntityKey)
                {
                                                case "SourceParty":
                                this.PartyAccountability.SourcePartyId = obj.Id;
                                this.PartyAccountability.SourcePartyName = obj.EntityValue;
                                break;

                                                case "TargetParty":
                                this.PartyAccountability.TargetPartyId = obj.Id;
                                this.PartyAccountability.TargetPartyName = obj.EntityValue;
                                break;

                                                case "SourcePerson":
                                this.PartyAccountability.SourcePersonId = obj.Id;
                                this.PartyAccountability.SourcePersonName = obj.EntityValue;
                                break;

                                                case "TargetPerson":
                                this.PartyAccountability.TargetPersonId = obj.Id;
                                this.PartyAccountability.TargetPersonName = obj.EntityValue;
                                break;

                                    }
                        }

        	
        public void NavigateToSourceParty()
        {
            this.navigationService.NavigateMain(new EntityEditUri("Party", this.PartyAccountability.SourcePartyId, this.PartyAccountability.Start));
        }

        public void SelectSourceParty()
        {
            this.eventAggregator.Publish(new EntitySelectEvent("Party", "SourceParty"));
        }
        
        public void DeleteSourceParty()
        {
            this.PartyAccountability.SourcePartyId = null;
            this.PartyAccountability.SourcePartyName = string.Empty;
        }
	
        public void NavigateToTargetParty()
        {
            this.navigationService.NavigateMain(new EntityEditUri("Party", this.PartyAccountability.TargetPartyId, this.PartyAccountability.Start));
        }

        public void SelectTargetParty()
        {
            this.eventAggregator.Publish(new EntitySelectEvent("Party", "TargetParty"));
        }
        
        public void DeleteTargetParty()
        {
            this.PartyAccountability.TargetPartyId = null;
            this.PartyAccountability.TargetPartyName = string.Empty;
        }
	
        public void NavigateToSourcePerson()
        {
            this.navigationService.NavigateMain(new EntityEditUri("Person", this.PartyAccountability.SourcePersonId, this.PartyAccountability.Start));
        }

        public void SelectSourcePerson()
        {
            this.eventAggregator.Publish(new EntitySelectEvent("Person", "SourcePerson"));
        }
        
        public void DeleteSourcePerson()
        {
            this.PartyAccountability.SourcePersonId = null;
            this.PartyAccountability.SourcePersonName = string.Empty;
        }
	
        public void NavigateToTargetPerson()
        {
            this.navigationService.NavigateMain(new EntityEditUri("Person", this.PartyAccountability.TargetPersonId, this.PartyAccountability.Start));
        }

        public void SelectTargetPerson()
        {
            this.eventAggregator.Publish(new EntitySelectEvent("Person", "TargetPerson"));
        }
        
        public void DeleteTargetPerson()
        {
            this.PartyAccountability.TargetPersonId = null;
            this.PartyAccountability.TargetPersonName = string.Empty;
        }

        private void MappingUpdated(MappingUpdatedEvent updatedEvent)
        {
            if (updatedEvent.Cancelled)
                return;

            EntityWithETag<MdmId> entityWithETag;
            if (!TryGetMapping("PartyAccountability", updatedEvent, out entityWithETag))
                return;

            if (entityWithETag.Object.EndDate <= updatedEvent.StartDate)
            {
                var message = string.Format("The start date of the new mapping must be before {0}", entityWithETag.Object.EndDate);
                this.eventAggregator.Publish(new ErrorEvent(message));
                return;
            }

            var newMapping = NewMapping(entityWithETag, updatedEvent);

            if (!TryCreateMapping("PartyAccountability", newMapping, updatedEvent)) 
                return;

            if (!TryGetMapping("PartyAccountability", updatedEvent, out entityWithETag))
                return;

            entityWithETag.Object.EndDate = updatedEvent.StartDate.AddSeconds(-1);

            if (!TryUpdateMapping("PartyAccountability", entityWithETag, updatedEvent)) 
                return;

            this.LoadPartyAccountabilityFromService(updatedEvent.EntityId, updatedEvent.StartDate, true);
            this.eventAggregator.Publish(new StatusEvent(Message.MappingUpdated));
        }

        private void MappingDeleteConfirmed(MappingDeleteConfirmedEvent obj)
        {
            if (obj.Cancelled)
                return;

            var response = this.mappingService.DeleteMapping(
                "PartyAccountability", 
                obj.MappingId, 
                this.PartyAccountability.Id.Value);

            if (response.IsValid)
            {
                this.LoadPartyAccountabilityFromService(this.partyaccountability.Id.Value, validAtString, true);
                this.eventAggregator.Publish(new StatusEvent(Message.MappingDeleted));
                return;
            }

            this.eventAggregator.Publish(
                new ErrorEvent(response.Fault != null ? response.Fault.Message : "Unknown Error"));
        }

        private bool TryGetMapping(string entityName, MappingUpdatedEvent updatedEvent, out EntityWithETag<MdmId> mapping)
        {
            mapping = mappingService.GetMapping(entityName, updatedEvent.EntityId, updatedEvent.MappingId);
            if (mapping.Object == null)
            {
                this.eventAggregator.Publish(
                    new ErrorEvent("Unable to retrieve original mapping"));
                return false;
            }
            return true;
        }

        private static MdmId NewMapping(EntityWithETag<MdmId> entityWithETag, MappingUpdatedEvent updatedEvent)
        {
            return new MdmId
                {
                    DefaultReverseInd = updatedEvent.IsDefault,
                    IsMdmId = false,
                    SourceSystemOriginated = updatedEvent.IsSourceSystemOriginated,
                    StartDate = updatedEvent.StartDate,
                    Identifier = updatedEvent.NewValue,
                    EndDate = entityWithETag.Object.EndDate,
                    SystemName = entityWithETag.Object.SystemName,
                };
        }
        
        private bool TryUpdateMapping(string entityName, EntityWithETag<MdmId> entityWithETag, MappingUpdatedEvent updatedEvent)
        {
            var response = mappingService.UpdateMapping(entityName, updatedEvent.MappingId, updatedEvent.EntityId, entityWithETag);
            if (!response.IsValid)
            {
                this.eventAggregator.Publish(
                    new ErrorEvent(response.Fault != null ? response.Fault.Message : "Unknown Error"));
                return false;
            }
            return true;
        }

        private bool TryCreateMapping(string entityName, MdmId newMapping, MappingUpdatedEvent updatedEvent)
        {
            var response = mappingService.CreateMapping(entityName, updatedEvent.EntityId, newMapping);
            if (!response.IsValid)
            {
                this.eventAggregator.Publish(
                    new ErrorEvent(response.Fault != null ? response.Fault.Message : "Unknown Error"));
                return false;
            }
            return true;
        }

        private void CreateMapping(CreateEvent obj)
        {
            this.navigationService.NavigateMain(new MappingAddUri(this.PartyAccountability.Id.Value, "PartyAccountability", this.PartyAccountability.Name));
        }

        private void LoadPartyAccountabilityFromService(int partyaccountabilityId, DateTime validAt, bool publishChangeNotification = false)
        {
            this.entityService.ExecuteAsync(
                () => this.entityService.Get<PartyAccountability>(partyaccountabilityId, validAt), 
                (response) =>
                    {
                this.PartyAccountability = new PartyAccountabilityViewModel(new EntityWithETag<PartyAccountability>(response.Message, response.Tag), this.eventAggregator);

                        this.Mappings =
                            new ObservableCollection<MappingViewModel>(
                                response.Message.Identifiers.Select(
                                    nexusId =>
                                    new MappingViewModel(
                                        new EntityWithETag<MdmId>(nexusId, null), this.eventAggregator)));

                        this.RaisePropertyChanged(string.Empty);
                    }, 
                this.eventAggregator);
        }

        private void Save(SaveEvent saveEvent)
        {
   this.entityService.ExecuteAsync(
                () => this.entityService.Update(this.PartyAccountability.Id.Value, this.PartyAccountability.Model(), this.PartyAccountability.ETag), 
                () => this.LoadPartyAccountabilityFromService(this.PartyAccountability.Id.Value, this.PartyAccountability.Start, true), 
                string.Format(Message.EntityUpdatedFormatString, "PartyAccountability"),
                this.eventAggregator);
        }

        public void StartToday()
        {
            this.PartyAccountability.Start = SystemTime.UtcNow().Date;
        }

        public void StartMinimum()
        {
            this.PartyAccountability.Start = DateUtility.MinDate;
        }
    }
}
