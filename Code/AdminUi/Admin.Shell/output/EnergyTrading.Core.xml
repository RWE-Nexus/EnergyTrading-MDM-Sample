<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EnergyTrading.Core</name>
    </assembly>
    <members>
        <member name="M:EnergyTrading.Caching.AbsoluteCacheItemPolicyFactory.CreatePolicy">
            <summary>
            Return a absolute expiration policy
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Caching.AbsoluteCacheItemPolicyFactory.AbsoluteExpiration(System.String)">
            <summary>
            Return the absolute expiration in seconds
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Caching.CacheItemPolicyFactory.SlidingPolicy(System.String)">
            <summary>
            Return a sliding expiration policy for the name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Caching.CacheItemPolicyFactory.SlidingExpiration(System.String)">
            <summary>
            Return the sliding expiration in seconds
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:EnergyTrading.Concurrency.VectorClock">
            <summary>
            Vector clock where the ids are integer.
            </summary>
        </member>
        <member name="T:EnergyTrading.Concurrency.VectorClock`1">
            <summary>
            Generic vector clock
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            Presumption on the caller that it knows which id it is responsible for.
            <para>
            Either T is a string (which will lead to large increases in vector clock size,
            or it is an integer and the client is performing the translation from its own unique identity, e.g MAC address,
            to an integer for the vector clock. Whatever type T is, it implies some mechanism for global allocation of
            identity of the client, either intrinsic such as MAC address, or extrinsic by calling a service (same problem one remove!).
            </para>
            </remarks>    
        </member>
        <member name="M:EnergyTrading.Concurrency.VectorClock`1.Increment(`0)">
            <summary>
            Increase the value associated with the id.
            </summary>
            <param name="id">Id to check for</param>
        </member>
        <member name="M:EnergyTrading.Concurrency.VectorClock`1.Max(EnergyTrading.Concurrency.VectorClock{`0})">
            <summary>
            Take the maximum vector from this and other vector clock. 
            </summary>
            <param name="value">Other vector clock</param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Concurrency.VectorClock`1.Clone">
            <summary>
            Clone the vector clock.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Concurrency.VectorClock`1.GetHashCode">
            <copydocfrom cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:EnergyTrading.Concurrency.VectorClock`1.Equals(System.Object)">
            <copydocfrom cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:EnergyTrading.Concurrency.VectorClock`1.Equals(EnergyTrading.Concurrency.VectorClock{`0})">
            <copydocfrom cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:EnergyTrading.Concurrency.VectorClock`1.Compare(EnergyTrading.Concurrency.VectorClock{`0})">
            <summary>
            Is this Reflexive, AntiSymmetric, and Transitive? Compare two VectorClocks,
            the outcomes will be one of the following: 
            -- Clock 1 is BEFORE clock 2       
            if there exists an i such that c1(i) &lt;= c(2) and there does not exist a j such that c1(j) &gt; c2(j). 
            -- Clock 1 is CONCURRENT to clock 2 
            if there exists an i, j such that c1(i) &lt; c2(i) and c1(j) &gt; c2(j) 
            -- Clock 1 is AFTER clock 2 otherwise 
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Concurrency.VectorClock`1.ToString">
            <copydocfrom cref="M:System.Object.ToString"/>
        </member>
        <member name="T:EnergyTrading.Configuration.IConfigurationManager">
            <summary>
            Abstraction over ConfigurationManager
            </summary>
        </member>
        <member name="T:EnergyTrading.Configuration.ConfigElementCollection`1">
            <summary>
            Provides a generic collection of <see cref="T:System.Configuration.ConfigurationElement"/>, implementing most necessary behaviour for client types.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EnergyTrading.Configuration.ConfigurationBootStrapper.Initialize(System.Collections.Generic.IEnumerable{EnergyTrading.Configuration.IConfigurationTask})">
            <summary>
            Process a list of configuration tasks in order..
            <param name="tasks">Tasks to be processed, need not be in order, but must form a DAG</param>
            </summary>
        </member>
        <member name="T:EnergyTrading.Configuration.IShutdownTask">
            <summary>
            A task that should be performed at application shutdown
            </summary>
        </member>
        <member name="T:EnergyTrading.Configuration.IConfigurationTask">
            <summary>
            Tasks that perform configuration logic
            </summary>
        </member>
        <member name="T:EnergyTrading.Configuration.IGlobalConfigurationTask">
            <summary>
            A configuration task that should be performed at application startup
            </summary>
        </member>
        <member name="T:EnergyTrading.Configuration.NamedConfigElement">
            <summary>
            Extends <see cref="T:System.Configuration.Configuration"/> with a standard name property which is required an is the key of the element.
            </summary>
        </member>
        <member name="P:EnergyTrading.Configuration.NamedConfigElement.Name">
            <summary>
            Get or set the Name property.
            </summary>
        </member>
        <member name="T:EnergyTrading.Configuration.NamedConfigElementCollection`1">
            <summary>
            Provides a generic collection of <see cref="T:EnergyTrading.Configuration.NamedConfigElement"/>, implementing all necessary behaviour for client types.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:EnergyTrading.Console.CommandLineAliasAttribute">
            <summary>
            This class implements an alias attribute to work in conjunction
            with the <see cref="T:EnergyTrading.Console.CommandLineSwitchAttribute">CommandLineSwitchAttribute</see>
            attribute.  If the CommandLineSwitchAttribute exists, then this attribute
            defines an alias for it.
            </summary>
            <remarks>Based on http://www.codeproject.com/csharp/commandlineparser.asp</remarks>
        </member>
        <member name="T:EnergyTrading.Console.CommandLineParser">
            <summary>
            Implementation of a command-line parsing class.  Is capable of
            having switches registered with it directly or can examine a registered
            class for any properties with the appropriate attributes appended to
            them.
            </summary>
            <remarks>Based on http://www.codeproject.com/csharp/commandlineparser.asp</remarks>
        </member>
        <member name="M:EnergyTrading.Console.CommandLineParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CommandLineParser class.
            </summary>
            <param name="commandLine">The command line to parse</param>
        </member>
        <member name="M:EnergyTrading.Console.CommandLineParser.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the CommandLineParser class.
            </summary>
            <param name="commandLine">The command line to pars</param>
            <param name="autoAttributeClass">Class instance that has attributed properties for command line switches</param>
        </member>
        <member name="M:EnergyTrading.Console.CommandLineParser.DisplayUsage">
            <summary>
            Shows the command-line usage based on the defined switches
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnergyTrading.Console.CommandLineParser.UnhandledSwitches">
            <summary>
            This function returns a list of the unhandled switches
            that the parser has seen, but not processed.
            </summary>
            <remark>
            The unhandled switches are not removed from the remainder
            of the command-line.
            </remark>
        </member>
        <member name="T:EnergyTrading.Console.CommandLineParser.SwitchInfo">
            <summary>
            A simple internal class for passing back to the caller
            some information about the switch.  The internals/implementation
            of this class has privileged access to the contents of the
            SwitchRecord class.
            </summary>
        </member>
        <member name="M:EnergyTrading.Console.CommandLineParser.SwitchInfo.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the SwitchInfo class.
            <para>
            In order to hide to the outside world
            information not necessary to know, the constructor takes a System.Object (aka
            object) as it's registering type.  If the type isn't of the correct type, an exception
            is thrown.
            </para>
            </summary>
            <param name="rec">The SwitchRecord for which this class store information.</param>
            <exception cref="T:System.ArgumentException">Thrown if the rec parameter is not of
            the type SwitchRecord.</exception>
        </member>
        <member name="T:EnergyTrading.Console.CommandLineParser.Switch">
            <summary>
            The SwitchRecord is stored within the parser's collection of registered
            switches.  This class is private to the outside world.
            </summary>
        </member>
        <member name="M:EnergyTrading.Console.CommandLineParser.Switch.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Switch class.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="M:EnergyTrading.Console.CommandLineParser.Switch.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the Switch class.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="type"></param>
        </member>
        <member name="T:EnergyTrading.Console.CommandLineSwitchAttribute">
            <summary>
            Implements a basic command-line switch by taking the
            switching name and the associated description.
            </summary>
            <remark>
            Based on http://www.codeproject.com/csharp/commandlineparser.asp
            Only currently is implemented for properties, so all
            auto-switching variables should have a get/set method supplied.
            </remark>
        </member>
        <member name="M:EnergyTrading.Console.CommandLineSwitchAttribute.#ctor(System.String,System.String)">
            <summary>
            Attribute constructor.
            </summary>
        </member>
        <member name="P:EnergyTrading.Console.CommandLineSwitchAttribute.Name">
            <summary>
            Accessor for retrieving the switch-name for an associated
            property.
            </summary>
        </member>
        <member name="P:EnergyTrading.Console.CommandLineSwitchAttribute.Description">
            <summary>
            Accessor for retrieving the description for a switch of
            an associated property.
            </summary>
        </member>
        <member name="T:EnergyTrading.Container.IServiceLocatorOwner">
            <summary>
            Marker interface for stuff that has a <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>
            <para>
            Depending on how this was created/injected we might not have access so this
            interface exposes it for testing purposes.
            </para>
            </summary>
        </member>
        <member name="M:EnergyTrading.Container.ServiceLocatorExtensions.TryGetInstance``1(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Try to get an instance of a class from the service locator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="locator"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Container.ServiceLocatorExtensions.TryGetInstance``1(Microsoft.Practices.ServiceLocation.IServiceLocator,System.String)">
            <summary>
            Try to get an instance of a class from the service locator.        
            </summary>
            <typeparam name="T"></typeparam>
            <param name="locator"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:EnergyTrading.Crypto.CryptoStringExtensions">
            <summary>
            Provides functionality to encrypt/decrypt using a pre-defined private key.
            </summary>
        </member>
        <member name="M:EnergyTrading.Crypto.CryptoStringExtensions.EncryptString(System.String)">
            <summary>
            Encrypt using our private key.
            </summary>
            <param name="plainText">Plain text to encrypt</param>
            <returns>Encrypted text.</returns>
        </member>
        <member name="M:EnergyTrading.Crypto.CryptoStringExtensions.DecryptConnectionString(System.String)">
            <summary>
            Replace encrypted password in the connection string with decrypted password
            </summary>
            <param name="connectionString">Connection string to use</param>
            <returns>Connection string with decrypted connection password</returns>
        </member>
        <member name="M:EnergyTrading.Crypto.CryptoStringExtensions.DecryptString(System.String)">
            <summary>
            Decrypt a string using our private key.
            </summary>
            <param name="encryptedText">Encrypted text to use.</param>
            <returns>Plain text</returns>
        </member>
        <member name="T:EnergyTrading.Data.InvalidColumnException">
            <summary>
            Thrown on attempted access to an invalid column
            </summary>
        </member>
        <member name="T:EnergyTrading.Data.MappingException">
            <summary>
            Thrown on an error in mapping the data to an entity.
            </summary>
        </member>
        <member name="T:EnergyTrading.Exceptions.IExceptionFactory">
            <summary>
            Creates an exception from another
            </summary>
        </member>
        <member name="M:EnergyTrading.Exceptions.IExceptionFactory.Convert(System.Exception)">
            <summary>
            Converts an exception into a different one
            </summary>
            <param name="exception">Exception to convert</param>
            <returns>new exception or null if we can't convert</returns>
        </member>
        <member name="T:EnergyTrading.DateDifference">
            <summary>
            Computes the difference between two dates in years, months and days
            </summary>
        </member>
        <member name="F:EnergyTrading.DateDifference.monthDay">
            <summary>
            defining Number of days in month; index 0=> january and 11=> December
            february contain either 28 or 29 days, that's why here value is -1
            which will be calculate later.
            </summary>
        </member>
        <member name="P:EnergyTrading.DateDifference.Years">
            <summary>
            Gets the number of years difference
            </summary>
        </member>
        <member name="P:EnergyTrading.DateDifference.Months">
            <summary>
            Gets the number of months difference
            </summary>
        </member>
        <member name="P:EnergyTrading.DateDifference.Days">
            <summary>
            Gets the number of days difference
            </summary>
        </member>
        <member name="T:EnergyTrading.Exceptions.ConstraintViolationException">
            <summary>
            Raised for primary/foreign key and check constraint violations
            </summary>
        </member>
        <member name="T:EnergyTrading.Data.DuplicateKeyException">
            <summary>
            Thrown on attempted creating an entity with a duplicate key.
            </summary>
        </member>
        <member name="T:EnergyTrading.Data.NotFoundException">
            <summary>
            Thrown on not finding an expected object
            </summary>
        </member>
        <member name="T:EnergyTrading.Exceptions.ExceptionTranslator">
            <summary>
            Translates exceptions using individual factories
            </summary>
        </member>
        <member name="T:EnergyTrading.Exceptions.ExceptionHandler">
            <summary>
            Handles exceptions of a particular class
            </summary>
        </member>
        <member name="T:EnergyTrading.Exceptions.IExceptionHandler">
            <summary>
            Used to swallow exceptions
            </summary>
        </member>
        <member name="M:EnergyTrading.Exceptions.IExceptionHandler.Handle(System.Exception)">
            <summary>
            Attempt to handle the exception
            </summary>
            <param name="ex">Exception to handle</param>
            <returns>true if we handled it, false otherwise</returns>
        </member>
        <member name="P:EnergyTrading.Exceptions.IExceptionHandler.Rethrow">
            <summary>
            Gets the Rethrow property.
            <para>
            Whether we should rethrow the exception irrespective of whether we've handled it
            </para>
            </summary>
        </member>
        <member name="M:EnergyTrading.Exceptions.ExceptionHandler.IsCritical(System.Exception)">
            <summary>
            See if the exception is one we can ever possibly handle.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:EnergyTrading.Exceptions.ExceptionHandler`1">
            <summary>
            Handles exceptions of a particular class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:EnergyTrading.Exceptions.ExceptionHandler`1.Rethrow">
            <summary>
            Get whether we should rethrow the exception, use when we handled the exception here
            </summary>
        </member>
        <member name="T:EnergyTrading.Exceptions.SqlTimeoutExceptionHandler">
            <summary>
            Handles SQL Server timeout errors
            </summary>
        </member>
        <member name="M:EnergyTrading.Extensions.DateTimeExtensions.NextDateForDay(System.DateTime,System.DayOfWeek)">
            <summary>
            Delivery the next date of the specified DayOfWeek after the date.
            </summary>
            <param name="value">Datetime to use</param>
            <param name="dayOfWeek">DayOfWeek to use</param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Extensions.DateTimeExtensions.DaysInMonth(System.DateTime)">
            <summary>
            Return the number of days in the month of the date
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Extensions.DateTimeExtensions.DaysToAdd(System.DateTime,System.DayOfWeek)">
            <summary>
            Determine how many days to add to a date to get to the next specified day of the week.
            </summary>
            <param name="value"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Extensions.DateTimeExtensions.IsBeginningOfMonth(System.DateTime)">
            <summary>
            Return true, if the date is beginning of month, i.e.: 1st of any month
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Extensions.DateTimeExtensions.IsEndOfMonth(System.DateTime)">
            <summary>
            Return true, if the date is end of the month, i.e. 28/29/30/31 depends on the month
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Extensions.EnumExtensions.ToEnum``1(System.String)">
            <summary>
            Converts a string returning its value in <typeparamref name="T"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Extensions.EnumExtensions.ToEnum``1(System.String,``0)">
            <summary>
            Converts a string returning its value in <typeparamref name="T"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Extensions.EnumExtensions.ToEnum``1(System.String,``0,System.Boolean)">
            <summary>
            Converts a string returning its value in <typeparamref name="T"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Extensions.EnumExtensions.ToEnum``1(System.Boolean,``0,System.String[])">
            <summary>
            Converts multiple string returning the value in <typeparamref name="T"/>
            </summary>
            <remarks>
            The enum <typeparamref name="T"/> enum must have the flags attribute set for this to work
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <param name="defaultValue"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="T:EnergyTrading.Extensions.MemoizationExtensions">
            <summary>
            Simple extensions to standardize the caching of function results.
            <para>
            This functionality is built in to functional languages but we have to build
            it ourselves for other .NET languages.
            </para>
            <para>
            Functions used by this extension must be strict, i.e. no side effects, this
            is because for each argument value the function will only be called once, and if
            there were side-effects, different behaviour will result from calling the function
            natively or via Memoize.
            </para>
            <para>
            Uses a ConcurrentDictionary internally so is thread-safe, but
            doesn't lock so does allow for the same value to be calculated simultaneously.
            However, this is much cheaper (~20x) and has more concurrency than other techniques.   
            </para>
            </summary>
        </member>
        <member name="M:EnergyTrading.Extensions.MemoizationExtensions.Memoize``2(System.Func{``0,``1})">
            <summary>
            Memoize a function.
            </summary>
            <typeparam name="T1">Argument type of the function.</typeparam>
            <typeparam name="R">Result type of the function.</typeparam>
            <param name="f">Function to execute, needs to be a strict function i.e. no side-effects.</param>
            <returns>Result of the function</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.MemoizationExtensions.Memoize``3(System.Func{``0,``1,``2})">
            <summary>
            Memoize a function.
            </summary>
            <typeparam name="T1">First argument type of the function.</typeparam>
            <typeparam name="T2">Second argument type of the function.</typeparam>         
            <typeparam name="R">Result type of the function.</typeparam>
            <param name="f">Function to execute, needs to be a strict function i.e. no side-effects.</param>
            <returns>Result of the function</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.MemoizationExtensions.Memoize``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Memoize a function.
            </summary>
            <typeparam name="T1">First argument type of the function.</typeparam>
            <typeparam name="T2">Second argument type of the function.</typeparam> 
            <typeparam name="T3">Third argument type of the function.</typeparam>        
            <typeparam name="R">Result type of the function.</typeparam>
            <param name="f">Function to execute, needs to be a strict function i.e. no side-effects.</param>
            <returns>Result of the function</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.MemoizationExtensions.Memoize``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Memoize a function.
            </summary>
            <typeparam name="T1">First argument type of the function.</typeparam>
            <typeparam name="T2">Second argument type of the function.</typeparam> 
            <typeparam name="T3">Third argument type of the function.</typeparam>
            <typeparam name="T4">Fourth argument type of the function.</typeparam>        
            <typeparam name="R">Result type of the function.</typeparam>
            <param name="f">Function to execute, needs to be a strict function i.e. no side-effects.</param>
            <returns>Result of the function</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.MemoizationExtensions.Tuplify``3(System.Func{``0,``1,``2})">
            <summary>
            Apply a function to a tuple.
            </summary>
            <typeparam name="T1">First argument type of the function.</typeparam>
            <typeparam name="T2">Second argument type of the function.</typeparam>      
            <typeparam name="R">Result type of the function.</typeparam>
            <param name="f">Function to execute.</param>
            <returns>Result of the function</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.MemoizationExtensions.Detuplify``3(System.Func{System.Tuple{``0,``1},``2})">
            <summary>
            Create a tuple and apply a function.
            </summary>
            <typeparam name="T1">First argument type of the function.</typeparam>
            <typeparam name="T2">Second argument type of the function.</typeparam>      
            <typeparam name="R">Result type of the function.</typeparam>
            <param name="f">Function to execute.</param>
            <returns>Result of the function</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.MemoizationExtensions.Tuplify``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Apply a function to a tuple.
            </summary>
            <typeparam name="T1">First argument type of the function.</typeparam>
            <typeparam name="T2">Second argument type of the function.</typeparam>
            <typeparam name="T3">Third argument type of the function.</typeparam>            
            <typeparam name="R">Result type of the function.</typeparam>
            <param name="f">Function to execute.</param>
            <returns>Result of the function</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.MemoizationExtensions.Detuplify``4(System.Func{System.Tuple{``0,``1,``2},``3})">
            <summary>
            Create a tuple and apply a function.
            </summary>
            <typeparam name="T1">First argument type of the function.</typeparam>
            <typeparam name="T2">Second argument type of the function.</typeparam>
            <typeparam name="T3">Third argument type of the function.</typeparam>    
            <typeparam name="R">Result type of the function.</typeparam>
            <param name="f">Function to execute.</param>
            <returns>Result of the function</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.MemoizationExtensions.Tuplify``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Apply a function to a tuple.
            </summary>
            <typeparam name="T1">First argument type of the function.</typeparam>
            <typeparam name="T2">Second argument type of the function.</typeparam>
            <typeparam name="T3">Third argument type of the function.</typeparam>
            <typeparam name="T4">Fourth argument type of the function.</typeparam>                    
            <typeparam name="R">Result type of the function.</typeparam>
            <param name="f">Function to execute.</param>
            <returns>Result of the function</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.MemoizationExtensions.Detuplify``5(System.Func{System.Tuple{``0,``1,``2,``3},``4})">
            <summary>
            Create a tuple and apply a function.
            </summary>
            <typeparam name="T1">First argument type of the function.</typeparam>
            <typeparam name="T2">Second argument type of the function.</typeparam>
            <typeparam name="T3">Third argument type of the function.</typeparam>
            <typeparam name="T4">Fourth argument type of the function.</typeparam>  
            <typeparam name="R">Result type of the function.</typeparam>
            <param name="f">Function to execute.</param>
            <returns>Result of the function</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.StringExtensions.DefaultIfNullOrEmpty(System.String,System.String)">
            <summary>
            Return the default value if the source value is null or empty.
            </summary>
            <param name="source">Value to check</param>
            <param name="defaultValue">Default value</param>
            <returns>Original string if not null or empty, value otherwise.</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.StringExtensions.AppendValueToEndIfMissing(System.String,System.String)">
            <summary>
            Append the value to the source if the source is not null/whitespace and the 
            source does not end with the value.
            </summary>
            <param name="source">Value to check.</param>
            <param name="value">Value to append</param>
            <returns>Original string if already ends with value or is null/whitespace, original + value otherwise.</returns>
        </member>
        <member name="T:EnergyTrading.FileProcessing.Configuration.FileProcessorElement">
            <summary>
            Configuration definition for a file processor.
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.Configuration.FileProcessorElement.DropPath">
            <summary>
            Gets or sets the file drop path to monitor.
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.Configuration.FileProcessorElement.InProgressPath">
            <summary>
            Gets or sets the path where in-progress files are written to (used by the polling based processor).
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.Configuration.FileProcessorElement.Filter">
            <summary>
            Gets or sets the file drop path to monitor.
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.Configuration.FileProcessorElement.MonitorSubdirectories">
            <summary>
            Gets or sets whether we should monitor subdirecties of the drop path.
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.Configuration.FileProcessorElement.SuccessPath">
            <summary>
            Gets or sets the success path to move files into
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.Configuration.FileProcessorElement.FailurePath">
            <summary>
            Gets or sets the success path to move files into
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.Configuration.FileProcessorElement.ProcessorConfiguratorType">
            <summary>
            Gets or sets the type name of the processor configurator type to use.  Leaving it blank will default to
            the event based processor being used.
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.Configuration.FileProcessorElement.Handler">
            <summary>
            Gets or sets the type name of the handler to use.
            </summary>
            <remarks>
            This item is optional but if not present the user is responsible
            for registering an appropriate <see cref="T:EnergyTrading.FileProcessing.IFileHandler"/> into
            the container against the listener's name.
            </remarks>
        </member>
        <member name="P:EnergyTrading.FileProcessing.Configuration.FileProcessorElement.ScavengeInterval">
            <summary>
            Gets or sets the scavenge process interval.
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.Configuration.FileProcessorElement.RecoveryInterval">
            <summary>
            Gets or sets the elapsed processing time before we recover a file.
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.Configuration.FileProcessorElement.PollingInactivityRestartInterval">
            <summary>
            Gets or sets the time in seconds of inactivity before we alert the polling processor
            to restart itself.  If explicitly set to 0 the restart mechanism will not be used.
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.Configuration.FileProcessorElement.Consumers">
            <summary>
            Gets or sets the number of consumers spawned in the polling based processor.
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.Configuration.FileProcessorElement.PostProcessor">
            <summary>
            Gets or sets the type name of the post processor <see cref="T:EnergyTrading.FileProcessing.IFilePostProcessor"/> to use
            </summary>
            <remarks>
            This item is optional. 
            If not present the handler type will be checked for post processing capability
            before it is assumed that there are no post processing requirements
            </remarks>
        </member>
        <member name="T:EnergyTrading.FileProcessing.Configuration.FileProcessorHostSection">
            <summary>
            Configuration information for file processors
            </summary>
        </member>
        <member name="T:EnergyTrading.FileProcessing.FileHandling.DeleteSuccessfulFileHandlingStrategy">
            <summary>
            Strategy to delete files that have been processed successfully.
            </summary>
        </member>
        <member name="T:EnergyTrading.FileProcessing.FileHandling.IFileHandlingStrategy">
            <summary>
            Strategy for handling files under various scenarios, e.g. success, failure, deletion etc.
            </summary>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileHandling.IFileHandlingStrategy.Handle(EnergyTrading.FileProcessing.FileHandling.ProcessingFile)">
            <summary>
            Handle the file.
            </summary>
            <param name="processingFile">File to handle</param>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileHandling.DeleteSuccessfulFileHandlingStrategy.Handle(EnergyTrading.FileProcessing.FileHandling.ProcessingFile)">
            <summary>
            Delete a file that has been processed successfully.
            </summary>
            <param name="processingFile">File to process</param>
        </member>
        <member name="T:EnergyTrading.FileProcessing.FileHandling.FileProcessResult">
            <summary>
            Events that can have to files
            </summary>
        </member>
        <member name="F:EnergyTrading.FileProcessing.FileHandling.FileProcessResult.Processed">
            <summary>
            File has been successfully processed.
            </summary>
        </member>
        <member name="F:EnergyTrading.FileProcessing.FileHandling.FileProcessResult.Cancelled">
            <summary>
            File processing has been cancelled.
            </summary>
        </member>
        <member name="F:EnergyTrading.FileProcessing.FileHandling.FileProcessResult.Error">
            <summary>
            An error occurred during processing.
            </summary>
        </member>
        <member name="T:EnergyTrading.FileProcessing.FileHandling.IFileProcessResultHandler">
            <summary>
            Handles events on files.
            </summary>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileHandling.IFileProcessResultHandler.Handle(EnergyTrading.FileProcessing.FileHandling.FileProcessResult,EnergyTrading.FileProcessing.FileHandling.ProcessingFile)">
            <summary>
            Handle an event on a file
            </summary>
            <param name="fileEvent">Event that has occurred</param>
            <param name="file">File affected</param>
        </member>
        <member name="T:EnergyTrading.FileProcessing.FileHandling.StrategyFileEventHandler">
            <summary>
            Handles files by passing off to appropriate <see cref="T:EnergyTrading.FileProcessing.FileHandling.IFileHandlingStrategy"/> instances.
            </summary>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileHandling.StrategyFileEventHandler.#ctor(EnergyTrading.FileProcessing.FileHandling.IFileHandlingStrategy,EnergyTrading.FileProcessing.FileHandling.IFileHandlingStrategy,EnergyTrading.FileProcessing.FileHandling.IFileHandlingStrategy)">
            <summary>
            Create a new instance of the <see cref="T:EnergyTrading.FileProcessing.FileHandling.StrategyFileEventHandler"/> class.
            </summary>
            <param name="successStrategy"></param>
            <param name="cancelledStrategy"></param>
            <param name="failureStrategy"></param>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileHandling.StrategyFileEventHandler.Handle(EnergyTrading.FileProcessing.FileHandling.FileProcessResult,EnergyTrading.FileProcessing.FileHandling.ProcessingFile)">
            <copydocfrom cref="M:EnergyTrading.FileProcessing.FileHandling.IFileProcessResultHandler.Handle(EnergyTrading.FileProcessing.FileHandling.FileProcessResult,EnergyTrading.FileProcessing.FileHandling.ProcessingFile)"/>
        </member>
        <member name="T:EnergyTrading.FileProcessing.FileHandling.MoveFileHandlingStrategy">
            <summary>
            Strategy that moves files to a target directory.
            </summary>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileHandling.MoveFileHandlingStrategy.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.FileProcessing.FileHandling.MoveFileHandlingStrategy"/>
            </summary>
            <param name="targetDirectory">Directory to move files into</param>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileHandling.MoveFileHandlingStrategy.Handle(EnergyTrading.FileProcessing.FileHandling.ProcessingFile)">
            <summary>
            Move a file into a directory.
            </summary>
            <param name="processingFile">File to move</param>
        </member>
        <member name="T:EnergyTrading.FileProcessing.FileProcessors.EventBasedFileProcessor">
            <summary>
            Provides a processor that listens for files and then passes them onto a handler.
            <para>
            Caters for issues such as IO and network errors and if operating against NTFS performs atomic operations.
            </para>
            </summary>
        </member>
        <member name="T:EnergyTrading.Services.IStartable">
            <summary>
            Interface to start and stop services
            </summary>
        </member>
        <member name="M:EnergyTrading.Services.IStartable.Start">
            <summary>
            Starts the object, generally this MUST be called on a object that implements this interface.
            </summary>
        </member>
        <member name="M:EnergyTrading.Services.IStartable.Stop">
            <summary>
            Stops a object that can be started.
            </summary>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileProcessors.EventBasedFileProcessor.ProcessSuccessfulFile(System.IO.FileInfo,System.String)">
            <summary>
            Logic for processing a successful file
            </summary>
            <param name="fileInfo">File info of the successful file.</param>
            <param name="originalFilePath"></param>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileProcessors.EventBasedFileProcessor.ProcessFailedFile(System.IO.FileInfo,System.String)">
            <summary>
            Logic for processing a failed file
            </summary>
        </member>
        <member name="T:EnergyTrading.FileProcessing.FileProcessor">
            <summary>
            Provides a processor that listens for files and then passes them onto a handler.
            <para>
            Caters for issues such as IO and network errors and if operating against NTFS performs atomic operations.
            </para>
            </summary>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileProcessor.ProcessSuccessfulFile(System.IO.FileInfo,System.String)">
            <summary>
            Logic for processing a successful file
            </summary>
            <param name="fileInfo">File info of the successful file.</param>
            <param name="originalFilePath"></param>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileProcessor.ProcessFailedFile(System.IO.FileInfo,System.String)">
            <summary>
            Logic for processing a failed file
            </summary>
        </member>
        <member name="T:EnergyTrading.FileProcessing.FileProcessorEndpoint">
            <summary>
            Endpoint definition for a file processor.
            </summary>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileProcessorEndpoint.Validate">
            <summary>
            Check we are valid to create an endpoint
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.FileProcessorEndpoint.ProcessorConfigurator">
            <summary>
            Gets or sets the type of the processor configurator.
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.FileProcessorEndpoint.Handler">
            <summary>
            Gets or sets the type of the handler.
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.FileProcessorEndpoint.PostProcessor">
            <summary>
            Gets or sets the type of the post processor
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.FileProcessorEndpoint.ScavengeInterval">
            <summary>
            Frequency that we check for files that have hung during processing.
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.FileProcessorEndpoint.RecoveryInterval">
            <summary>
            Amount of time that a file can be processed before it is re-added to the queue.
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.FileProcessorEndpoint.NumberOfConsumers">
            <summary>
            The number of consumer threads spawned within the loop based file processor mechanism.
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.FileProcessorEndpoint.PollingRestartInterval">
            <summary>
            The inactivity interval used by the polling processor to determine if it should restart the processor
            </summary>
        </member>
        <member name="T:EnergyTrading.FileProcessing.FileProcessorHost">
            <summary>
            Hosts the collection of <see cref="T:EnergyTrading.FileProcessing.IFileProcessor"/>s.
            </summary>
        </member>
        <member name="T:EnergyTrading.FileProcessing.IFileProcessorHost">
            <summary>
            Marker interface for a file processor host.
            </summary>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileProcessorHost.#ctor(EnergyTrading.FileProcessing.IFileProcessor[])">
            <summary>
            Construct a new FileProcessorHost
            </summary>
            <param name="processors"></param>
            <remarks>Have to use array rather then IList due to Unity restrictions</remarks>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileProcessorHost.Start">
            <summary>
            Tells all configured processors to start.
            </summary>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileProcessorHost.Stop">
            <summary>
            Tell all configured processors to stop.
            </summary>
        </member>
        <member name="T:EnergyTrading.FileProcessing.FileWatcherFileChangeDetector">
            <summary>
            File change detector using a <see cref="T:System.IO.FileSystemWatcher"/>
            </summary>
        </member>
        <member name="T:EnergyTrading.FileProcessing.IFileChangeDetector">
            <summary>
            Detects changes to the file system.
            </summary>
        </member>
        <member name="E:EnergyTrading.FileProcessing.IFileChangeDetector.Changed">
            <summary>
            Raised on any type of file change - new, renamed
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.IFileChangeDetector.Path">
            <summary>
            Gets or sets the path to monitor.
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.IFileChangeDetector.Filter">
            <summary>
            Gets or sets the filter to use.
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.IFileChangeDetector.MonitorSubdirectories">
            <summary>
            Gets or sets whether we monitor subdirectories.
            </summary>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileWatcherFileChangeDetector.Start">
            <summary>
            Start the watcher
            </summary>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileWatcherFileChangeDetector.Stop">
            <summary>
            Stop the watcher
            </summary>
        </member>
        <member name="E:EnergyTrading.FileProcessing.FileWatcherFileChangeDetector.Changed">
            <copydocfrom cref="E:EnergyTrading.FileProcessing.IFileChangeDetector.Changed"/>
        </member>
        <member name="P:EnergyTrading.FileProcessing.FileWatcherFileChangeDetector.Path">
            <copydocfrom cref="P:EnergyTrading.FileProcessing.IFileChangeDetector.Path"/>
        </member>
        <member name="P:EnergyTrading.FileProcessing.FileWatcherFileChangeDetector.Filter">
            <copydocfrom cref="P:EnergyTrading.FileProcessing.IFileChangeDetector.Filter"/>
        </member>
        <member name="P:EnergyTrading.FileProcessing.FileWatcherFileChangeDetector.MonitorSubdirectories">
            <copydocfrom cref="P:EnergyTrading.FileProcessing.IFileChangeDetector.MonitorSubdirectories"/>
        </member>
        <member name="T:EnergyTrading.FileProcessing.IFileHandler">
            <summary>
            Handles files for a business process.
            </summary>
        </member>
        <member name="M:EnergyTrading.FileProcessing.IFileHandler.Handle(System.IO.FileInfo,System.String)">
            <summary>
            Process a file returning whether we were successful or not.
            </summary>
            <param name="fileInfo">File to process</param>
            <param name="originalFileName">Original name of dropped file</param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="T:EnergyTrading.FileProcessing.IFileHandlerFullPath">
            <summary>
            Extends IFileHandler with a function that handles an inprogress file and supplies the full path of the original file
            When a file is being processed if the supplied IFileHandler implements this interface HandleWithFullPath will be called instead of IFileHandler.Handle
            </summary>
        </member>
        <member name="M:EnergyTrading.FileProcessing.IFileHandlerFullPath.HandleWithFullPath(System.IO.FileInfo,System.String)">
            <summary>
            Process a file returning whether we were successful or not.
            </summary>
            <param name="fileInfo">File to process</param>
            <param name="originalFileFullPath">Original full path to dropped file</param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="T:EnergyTrading.FileProcessing.FileHandling.CombinedFileHandlingStrategy">
            <summary>
            Strategy that applies multiple strategies to the file,
            </summary>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileHandling.CombinedFileHandlingStrategy.#ctor(EnergyTrading.FileProcessing.FileHandling.IFileHandlingStrategy[])">
            <summary>
            Create a new instance of the <see cref="T:EnergyTrading.FileProcessing.FileHandling.CombinedFileHandlingStrategy"/> class.
            </summary>
            <param name="strategies">Strategies to use.</param>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileHandling.CombinedFileHandlingStrategy.Handle(EnergyTrading.FileProcessing.FileHandling.ProcessingFile)">
            <summary>
            Apply the strategies to the file.
            </summary>
            <param name="processingFile">File to use</param>
        </member>
        <member name="M:EnergyTrading.ProducerConsumer.Disposable.ThrowIfDisposed">
            <summary>
            Helper method so subclasses can easily throw if disposed
            </summary>
        </member>
        <member name="T:EnergyTrading.FileProcessing.FileHandling.IHandleFiles">
            <summary>
            Process a file
            </summary>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileHandling.IHandleFiles.Notify(EnergyTrading.FileProcessing.FileHandling.ProcessingFile)">
            <summary>
            Notify that a file is ready for processing.
            </summary>
            <param name="processingFile"></param>
        </member>
        <member name="T:EnergyTrading.FileProcessing.FileHandling.ProcessingFile">
            <summary>
            Metadata about a file we are processing.
            </summary>
        </member>
        <member name="M:EnergyTrading.FileProcessing.FileHandling.ProcessingFile.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.FileProcessing.FileHandling.ProcessingFile"/> class.
            </summary>
            <param name="currentFilePath">Current location of the file</param>
            <param name="originalFilePath">Original location of the file</param>
            <param name="originalFullPathToFile">Original location of the file FileInfo.FullName</param>
        </member>
        <member name="P:EnergyTrading.FileProcessing.FileHandling.ProcessingFile.CurrentFilePath">
            <summary>
            Gets the current location of the file.
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.FileHandling.ProcessingFile.OriginalFilePath">
            <summary>
            Gets the original name of the file
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.FileHandling.ProcessingFile.FullPathOfOriginalFile">
            <summary>
            Gets the full path of the original file FileInfo.FullName
            </summary>
        </member>
        <member name="T:EnergyTrading.FileProcessing.PollingFileChangeDetector">
            <summary>
            A file change detector using polling to find files.
            </summary>
        </member>
        <member name="M:EnergyTrading.FileProcessing.PollingFileChangeDetector.Stop">
            <summary>
            Stop the watcher
            </summary>
        </member>
        <member name="T:EnergyTrading.Infrastructure.IChain`1">
            <summary>
            Abstraction of a Chain of Responsibility pattern
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:EnergyTrading.IO.FileExtensions">
            <summary>
            Extension methods for operating with files/paths
            </summary>
        </member>
        <member name="M:EnergyTrading.IO.FileExtensions.MapPath(System.String)">
            <summary>
            Handles web relative file names
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.IO.FileExtensions.DeleteFiles(System.String)">
            <summary>
            Delete files in a path, handling wildcards
            </summary>
            <param name="searchPattern"></param>
        </member>
        <member name="M:EnergyTrading.IO.FileExtensions.RetryFileActionIfLocked(System.IO.FileInfo,System.Action{System.IO.FileInfo},System.Int32,System.Int32)">
            <summary>
            Retries file action code block for maxRetries times If file locked.
            </summary>
            <param name="source"> FileInfo object </param>
            <param name="codeBlock"> The code block </param>
            <param name="retryIntervalInMilliseconds">An action to be executed in the case of an exception</param>
            <param name="maxRetries">The total time in milliseconds before no more retries should be attempted</param>
        </member>
        <member name="M:EnergyTrading.IO.StreamExtensions.ToEncodedString(System.IO.MemoryStream,System.Text.Encoding)">
            <summary>
            Reads the contents of the stream from the current position
            </summary>
            <param name="stream">Stream to use</param>
            <param name="encoding">Encoding to use, defaults to UTF-8</param>
            <returns>The stream contents as a string and the stream positioned where it was on entry.</returns>
        </member>
        <member name="T:EnergyTrading.Mapping.CachingXmlMapperFactory">
            <summary>
            Implementation of <see cref="T:EnergyTrading.Mapping.IXmlMapperFactory"/> that caches results.
            </summary>
        </member>
        <member name="T:EnergyTrading.Mapping.IXmlMapperFactory">
            <summary>
            Creates a <see cref="T:EnergyTrading.Mapping.IXmlMapper`2"/>
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlMapperFactory.Mapper``2(System.String)">
            <summary>
            Gets a <see cref="T:EnergyTrading.Mapping.IXmlMapper`2"/>
            </summary>
            <typeparam name="TSource">Type of the source object.</typeparam>
            <typeparam name="TDestination">Type of the destination object</typeparam>
            <param name="name">Optional name of the mapper</param>
            <returns>The mapper from source to destination</returns>
            <exception cref="T:EnergyTrading.Mapping.MappingException">Thrown if the mapper is not found.</exception>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlMapperFactory.Mapper(System.Type,System.Type,System.String)">
            <summary>
            Gets a <see cref="T:EnergyTrading.Mapping.IXmlMapper`2"/>
            </summary>
            <param name="source">Type of the source object.</param>
            <param name="destination">Type of the destination object</param>
            <param name="name">Optional name of the mapper</param>
            <returns>The mapper from source to destination</returns>
            <remarks>Has to return object as there is no appropriate base type.</remarks>
            <exception cref="T:EnergyTrading.Mapping.MappingException">Thrown if the mapper is not found.</exception>        
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlMapperFactory.Register``2(EnergyTrading.Mapping.IXmlMapper{``0,``1},System.String)">
            <summary>
            Register a mapper to use.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="mapper">The mapper to register</param>
            <param name="name">Optional name of the mapper</param>        
        </member>
        <member name="M:EnergyTrading.Mapping.CachingXmlMapperFactory.Mapper``2(System.String)">
            <contentfrom cref="M:EnergyTrading.Mapping.IXmlMapperFactory.Mapper``2(System.String)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.CachingXmlMapperFactory.Mapper(System.Type,System.Type,System.String)">
            <contentfrom cref="M:EnergyTrading.Mapping.IXmlMapperFactory.Mapper(System.Type,System.Type,System.String)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.CachingXmlMapperFactory.Register``2(EnergyTrading.Mapping.IXmlMapper{``0,``1},System.String)">
            <contentfrom cref="M:EnergyTrading.Mapping.IXmlMapperFactory.Register``2(EnergyTrading.Mapping.IXmlMapper{``0,``1},System.String)"/>
        </member>
        <member name="T:EnergyTrading.Mapping.CompatibleXmlMappingEngineFactory">
            <summary>
            Locates the most compatible XML mapping engine factory.
            </summary>
        </member>
        <member name="T:EnergyTrading.Mapping.IXmlMappingEngineFactory">
            <summary>
            Locates versioned <see cref="T:EnergyTrading.Mapping.IXmlMappingEngine"/>s
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlMappingEngineFactory.Find(System.String)">
            <summary>
            Finds an <see cref="T:EnergyTrading.Mapping.IXmlMappingEngine"/> for the specified version.
            </summary>
            <param name="version">Version of mapping engine to find, typically {Schema}.{Version} e.g. Css.V2_1</param>
            <returns></returns>
            <exception cref="T:EnergyTrading.Mapping.MappingException">thrown if the versioned engine is not found/configured incorrectly.</exception>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlMappingEngineFactory.TryFind(System.String,EnergyTrading.Mapping.IXmlMappingEngine@)">
            <summary>
            Finds an <see cref="T:EnergyTrading.Mapping.IXmlMappingEngine"/> for the specified version.
            </summary>
            <param name="version">Version of mapping engine to find, typically {Schema}.{Version} e.g. Css.V2_1</param>
            <param name="engine">Engine instance if found, null otherwise</param>
            <returns>true if found, false otherwise.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.CompatibleXmlMappingEngineFactory.Find(System.String)">
            <summary>
            Finds a specified version of an IXmlMappingEngine.
            <para>
            Will try to locate an earlier minor version if the exact version is not found e.g. can return Css.V2_0 if Css.V2_1 was requested.
            </para>
            </summary>
            <param name="version">Version of mapping engine to find, typically {Schema}.{Version} e.g. Css.V2_1</param>
            <returns></returns>
            <exception cref="T:EnergyTrading.Mapping.XmlEngineResolutionException">thrown if the versioned engine is not found/configured incorrectly.</exception>
        </member>
        <member name="M:EnergyTrading.Mapping.CompatibleXmlMappingEngineFactory.TryFind(System.String,EnergyTrading.Mapping.IXmlMappingEngine@)">
            <summary>
            Finds an IXmlMappingEngine for the specified version.
            <para>
            Will try to locate an earlier minor version if the exact version is not found e.g. can return Css.V2_0 if Css.V2_1 was requested.
            </para>        
            </summary>
            <param name="version">Version of mapping engine to find, typically {Schema}.{Version} e.g. Css.V2_1</param>
            <param name="engine">Engine instance if found, null otherwise</param>
            <returns>true if found, false otherwise.</returns>
        </member>
        <member name="T:EnergyTrading.Mapping.Context">
            <summary>
            Provides a context for the mapping.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.Context.Exists(System.String)">
            <summary>
            Determine whether a named value exists in the context
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Mapping.Context.Set``1(System.String,``0)">
            <summary>
            Set a named value in the context
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:EnergyTrading.Mapping.Context.Value``1(System.String)">
            <summary>
            Get a named value in the context
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Mapping.Context.Clone">
            <summary>
            Clone the context, copying current values.
            <para>
            This is a deep copy, i.e. the values are independent after the clone operation
            though if reference types are stored the values will be shared between contexts
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="T:EnergyTrading.Mapping.IXmlSchemaRegistry">
            <summary>
            Records XML schemas that are registered.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlSchemaRegistry.RegisterSchema(System.String)">
            <summary>
            Record a schema in the registry.
            </summary>
            <param name="schema">Schema to register.</param>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlSchemaRegistry.SchemaExists(System.String)">
            <summary>
            Determine whether a schema is registered.
            </summary>
            <param name="schema">Schema to check</param>
            <returns>true if the schema is registered, false otherwise.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlSchemaRegistry.GetSchemas">
            <summary>
            Retrieve a copy of the registered schemas.
            </summary>
            <returns>Enumeration of the current schemas, not linked to the internal representation, so thread-safe.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.LinqExtensions.Add(System.Xml.Linq.XContainer,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Add multiple values to a XML container.
            </summary>
            <param name="container">Container to use</param>
            <param name="values">Values to add</param>
        </member>
        <member name="T:EnergyTrading.Mapping.LocatorXmlMapperFactory">
            <summary>
            Implementation of <see cref="T:EnergyTrading.Mapping.IXmlMapperFactory"/> that uses <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.LocatorXmlMapperFactory.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Create a new instance of the <see cref="T:EnergyTrading.Mapping.LocatorXmlMapperFactory"/> class.
            </summary>
            <param name="locator"></param>
        </member>
        <member name="M:EnergyTrading.Mapping.LocatorXmlMapperFactory.Mapper``2(System.String)">
            <contentfrom cref="M:EnergyTrading.Mapping.IXmlMapperFactory.Mapper``2(System.String)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.LocatorXmlMapperFactory.Mapper(System.Type,System.Type,System.String)">
            <contentfrom cref="M:EnergyTrading.Mapping.IXmlMapperFactory.Mapper(System.Type,System.Type,System.String)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.LocatorXmlMapperFactory.Register``2(EnergyTrading.Mapping.IXmlMapper{``0,``1},System.String)">
            <contentfrom cref="M:EnergyTrading.Mapping.IXmlMapperFactory.Register``2(EnergyTrading.Mapping.IXmlMapper{``0,``1},System.String)"/>
        </member>
        <member name="T:EnergyTrading.Mapping.MappingExtensions">
            <summary>
            Extensions for classes in EnergyTrading.Mapping
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.MappingExtensions.MapDateTimeList(EnergyTrading.Mapping.XPathProcessor,System.String,System.String)">
            <summary>
            Maps a list of DateTime values into a collection
            </summary>
            <param name="source">XPathProcessor to use</param>
            <param name="collectionNode">Collection node name (may be null)</param>
            <param name="nodeName">Node name to use</param>
            <returns>List of DateTime values</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.MappingExtensions.MapStringList(EnergyTrading.Mapping.XPathProcessor,System.String,System.String)">
            <summary>
            Maps a list of string values into a collection
            </summary>
            <param name="source">XPathProcessor to use</param>
            <param name="collectionNode">Collection node name (may be null)</param>
            <param name="nodeName">Node name to use</param>
            <returns>List of strings values</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.MappingExtensions.MapList(EnergyTrading.Mapping.XPathProcessor,System.String,System.String)">
            <summary>
            Maps a list of string values into a collection
            </summary>
            <param name="source">XPathProcessor to use</param>
            <param name="collectionNode">Collection node name (may be null)</param>
            <param name="nodeName">Node name to use</param>
            <returns>List of strings values</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.MappingExtensions.MapList``1(EnergyTrading.Mapping.XPathProcessor,System.String,System.String,System.Func{EnergyTrading.Mapping.XPathProcessor,``0})">
            <summary>
            Maps a list of simple values into a collection
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="source">XPathProcessor to use</param>
            <param name="collectionNode">Collection node name (may be null)</param>
            <param name="nodeName">Node name to use</param>
            <param name="func">Function to access the data from the XPathProcessor, e.g. x => x.ToInt(CurrentXPath)</param>
            <returns>List of values</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.MappingExtensions.MapList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Xml.Linq.XElement})">
            <summary>
            Maps a list of values into a collection of XElement
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="source">XPathProcessor to use</param>
            <param name="func">Function to access the data from the XPathProcessor</param>
            <returns>List of values</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.MappingExtensions.RegisterMapper``1(EnergyTrading.Mapping.IXmlMappingEngine,EnergyTrading.Mapping.XmlMapper{``0})">
            <summary>
            Registers a <see cref="T:EnergyTrading.Mapping.XmlMapper`1"/> against a <see cref="T:EnergyTrading.Mapping.IXmlMappingEngine"/>.
            </summary>
            <typeparam name="TEntity">Entity we are registering for</typeparam>
            <param name="engine">Engine to use</param>
            <param name="mapper">Mapper to use</param>
        </member>
        <member name="T:EnergyTrading.Mapping.IXmlMappingEngine">
            <summary>
            Extends a <see cref="T:EnergyTrading.Mapping.IMappingEngine"/> with methods to assist when mapping to and from XML.
            </summary>
        </member>
        <member name="T:EnergyTrading.Mapping.IMappingEngine">
            <summary>
            Generic interface for mapping an object from a source to a destination.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.IMappingEngine.Map``2(``0)">
            <summary>
            Map the source to a created destination
            </summary>
            <typeparam name="TSource">Type of the source</typeparam>
            <typeparam name="TDestination">Type of the destination</typeparam>
            <param name="source">Object to map from</param>
            <returns>Generated object with values mapped from the source</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.IMappingEngine.Map``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Map a enumeration of sources to the created destination.
            </summary>
            <typeparam name="TSource">Type of the source</typeparam>
            <typeparam name="TDestination">Type of the destination</typeparam>
            <param name="source">Enumerable objects to map from</param>
            <returns>Enumerable generated object with values mapped from the source</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.IMappingEngine.Map``2(``0,``1)">
            <summary>
            Map the source to the destination
            </summary>
            <typeparam name="TSource">Type of the source</typeparam>
            <typeparam name="TDestination">Type of the destination</typeparam>
            <param name="source">Object to map from</param>
            <param name="destination">Object to map to</param>
        </member>
        <member name="M:EnergyTrading.Mapping.IMappingEngine.RegisterMap``2(EnergyTrading.Mapping.IMapper{``0,``1},System.String)">
            <summary>
            Register an IMapper to use
            </summary>
            <typeparam name="TSource">Type of the source</typeparam>
            <typeparam name="TDestination">Type of the destination</typeparam>
            <param name="mapper">The mapper to register</param>
            <param name="name">Name to register the mapper against</param>
        </member>
        <member name="P:EnergyTrading.Mapping.IMappingEngine.Context">
            <summary>
            Provides a context for the mapping.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlMappingEngine.CreateDocument``1(``0)">
            <summary>
            Creates a document from the source.
            <para>
            Similar to Map, but allows us to know where the root of the document is so we can centrally create
            XML namespace references.
            </para>
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <param name="source">Source object to serialize.</param>
            <returns>A new <see cref="T:System.Xml.Linq.XElement"/> containing the serialized object.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlMappingEngine.LookupPrefix(System.String)">
            <summary>
            Lookup a prefix namespace from a namespace.
            </summary>
            <param name="uri"></param>
            <returns>Prefix if found, null otherwise.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlMappingEngine.Map``1(``0,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Construct an XElement from an entity
            </summary>
            <typeparam name="TSource">Type of the source</typeparam>
            <param name="source">Source object to use.</param>
            <param name="nodeName">Name to emit.</param>
            <param name="xmlNamespace">Namespace to use for the nodeName.</param>
            <param name="outputDefault">Whether to output, even if the source has its default value.</param>
            <param name="useDynamicResolution">
            If <c>true</c> and <paramref name="source"/> instance is subtype of <typeparamref name="TSource"/>
            will attempt to resolve the concrete mapper instead of using <typeparamref name="TSource"/> mapper.
            </param>
            <returns>A new <see cref="T:System.Xml.Linq.XElement"/> containing the serialized object.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlMappingEngine.Map``2(``0,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Map the source to a created destination
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <typeparam name="TDestination">Type of the destination.</typeparam>
            <param name="source">Source object to use.</param>
            <param name="nodeName">Name to emit.</param>
            <param name="xmlNamespace">Namespace to use if provided, otherwise use the destination's namespace</param>        
            <param name="xmlType">XML type to emit</param>
            <param name="xmlPrefix">Prefix to use for the XML namespace</param>
            <param name="index">Index to use if the node is a collection element.</param>
            <returns>Generated object with values mapped from the source</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlMappingEngine.MapList``2(``0,System.String,System.Boolean)">
            <summary>
            Map the source to a list of created destination
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <typeparam name="TDestination">Type of the destination.</typeparam>
            <param name="source">Source object to use.</param>
            <param name="collectionNode">Name of the collection node.</param>
            <param name="outputDefault">Do we return an empty element if the collection is empty</param>     
            <returns>Generated list of objects with values mapped from the source</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlMappingEngine.MapList``2(``0,System.String,System.String,System.Boolean)">
            <summary>
            Map the source to a list of created destination
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <typeparam name="TDestination">Type of the destination.</typeparam>
            <param name="source">Source object to use.</param>
            <param name="nodeName">Name to emit.</param>
            <param name="collectionNode">Name of the collection node.</param> 
            <param name="outputDefault">Do we return an empty element if the collection is empty</param>      
            <returns>Generated list of objects with values mapped from the source</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlMappingEngine.MapList``2(``0,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Map the source to a list of created destination
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <typeparam name="TDestination">Type of the destination.</typeparam>
            <param name="source">Source object to use.</param>
            <param name="nodeName">Name to emit.</param>
            <param name="collectionNode">Name of the collection node.</param>
            <param name="collectionNodeNamespacePrefix">Collection NamespacePrefix to use if provided, otherwise use the destination's NamespacePrefix</param>
            <param name="collectionItemNodeNamespacePrefix">Collection item Namespace to use if provided, otherwise use the destination's namespacePrefix</param>
            <param name="outputDefault">Do we return an empty element if the collection is empty</param>
            <returns>Generated list of objects with values mapped from the source</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlMappingEngine.MapList``2(System.Collections.Generic.IList{``0},System.String,System.Boolean)">
            <summary>
            Map a list of source to a created destination
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <typeparam name="TDestination">Type of the destination.</typeparam>
            <param name="source">Source object to use.</param>
            <param name="collectionNode">Name of the collection node.</param>
            <param name="outputDefault">Do we return an empty element if the collection is empty</param>
            <returns>Generated object with values mapped from the source</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlMappingEngine.MapList``2(System.Collections.Generic.IList{``0},System.String,System.String,System.Boolean)">
            <summary>
            Map a list of source to a created destination
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <typeparam name="TDestination">Type of the destination.</typeparam>
            <param name="source">Source object to use.</param>
            <param name="nodeName">Name to emit.</param>
            <param name="collectionNode">Name of the collection node.</param>   
            <param name="outputDefault">Do we return an empty element if the collection is empty</param>  
            <returns>Generated object with values mapped from the source</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlMappingEngine.MapList``2(System.Collections.Generic.IList{``0},System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Map a list of source to a created destination
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <typeparam name="TDestination">Type of the destination.</typeparam>
            <param name="source">Source object to use.</param>
            <param name="collectionNode">Name of the collection node.</param>
            <param name="collectionItemNodeName">Name to emit for items in the collection.</param>
            <param name="collectionNodeNamespace">Collection Namespace to use if provided, otherwise use the destination's namespace</param>
            <param name="collectionItemNodeNamespace">Collection item Namespace to use if provided, otherwise use the destination's namespace</param>
            <param name="outputDefault">Do we return an empty element if the collection is empty</param>
            <returns>Generated object with values mapped from the source</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlMappingEngine.RegisterXmlType(System.String,System.String,System.Type)">
            <summary>
            Register an XML Type and it's associated namespace and target class.
            </summary>
            <param name="xmlNamespace">XML namespace for the type.</param>
            <param name="xmlType">XML type to register.</param>
            <param name="type">CLR type to register.</param>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlMappingEngine.RegisterNamespace(System.String,System.String)">
            <summary>
            Register a namespace and prefix to use.
            </summary>
            <param name="xmlPrefix">Prefix to register for the namespace.</param>
            <param name="xmlNamespace">XML namespace to register.</param>
        </member>
        <member name="T:EnergyTrading.Mapping.SchemaVersion">
            <summary>
            Hold schema and version
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.SchemaVersion.ToString">
            <summary>
            Displayable value.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnergyTrading.Mapping.SchemaVersion.Schema">
            <summary>
            Get or set the schema.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.SchemaVersion.Version">
            <summary>
            Get or set the version.
            </summary>
        </member>
        <member name="T:EnergyTrading.Mapping.SchemaVersionExtensions">
            <summary>
            Extension methods for ASM version strings, handling conversions for namespace values and <see cref="T:System.Version"/> objects.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.SchemaVersionExtensions.ToSchemaVersion(System.String)">
            <summary>
            Convert an ASM version string into a <see cref="T:EnergyTrading.Mapping.SchemaVersion"/>
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Mapping.SchemaVersionExtensions.ToAsmSchema(System.String)">
            <summary>
            Locate the schema from a fully qualified ASM schema string.
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Mapping.SchemaVersionExtensions.ToAsmVersion(System.String,System.String)">
            <summary>
            Convert a version to a schema qualified version string.
            </summary>
            <param name="version">Version to use.</param>
            <param name="schema">Schema to use</param>
            <returns>Schema-qualified version string if valid, otherwise null.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.SchemaVersionExtensions.ToAsmVersion(System.Version,System.String)">
            <summary>
            Convert a version to a schema qualified version string.
            </summary>
            <param name="version">Version to use.</param>
            <param name="schema">Schema to use</param>
            <returns>Schema-qualified version string if valid, otherwise null.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.SchemaVersionExtensions.ToAsmVersion(EnergyTrading.Mapping.SchemaVersion)">
            <summary>
            Convert a version to a schema qualified version string.
            </summary>
            <param name="version">Version to use.</param>
        </member>
        <member name="M:EnergyTrading.Mapping.SchemaVersionExtensions.ToVersion(System.String)">
            <summary>
            Convert a version string to a <see cref="T:System.Version"/> object.
            </summary>
            <param name="value">String to use</param>
            <returns>Version object if valid, otherwise null</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.SchemaVersionExtensions.ToVersionString(System.String)">
            <summary>
            Convert an ASM version string into a string parsable by <see cref="T:System.Version"/>
            </summary>
            <param name="value">String to use</param>
            <returns>Converted string.</returns>
        </member>
        <member name="T:EnergyTrading.Mapping.XmlEngineResolutionErrorCode">
            <summary>
            Error codes when determining versions of <see cref="T:EnergyTrading.Mapping.IXmlMappingEngine"/>.
            </summary>
        </member>
        <member name="F:EnergyTrading.Mapping.XmlEngineResolutionErrorCode.Undetermined">
            <summary>
            Error reason is unknown.
            </summary>
            <remarks>
            Could be a parsing error, e.g. the requested schema value is invalid
            or that the schema is registered but no specific versions are present.
            </remarks>
        </member>
        <member name="F:EnergyTrading.Mapping.XmlEngineResolutionErrorCode.UnexpectedSchema">
            <summary>
            Cannot resolve an engine for the schema at all.
            </summary>
        </member>
        <member name="F:EnergyTrading.Mapping.XmlEngineResolutionErrorCode.MessageVersionTooLow">
            <summary>
            Schema version of the message is too low.
            </summary>
            <remarks>
            For example, we have registered V11 of the schema and we
            are asked to resolve a V10.2 engine and no V10 engines are registered.
            </remarks>
        </member>
        <member name="F:EnergyTrading.Mapping.XmlEngineResolutionErrorCode.MessageVersionTooHigh">
            <summary>
            Schema version of the message is too high.
            </summary>
            <remarks>
            For example, we have registered V10 of the schema and we
            are asked to resolve a V11.1 engine and no V11 engines are registered.
            </remarks>
        </member>
        <member name="T:EnergyTrading.Mapping.XmlEngineResolutionException">
            <summary>
            Exception raised for failure to locate an appropriate <see cref="T:EnergyTrading.Mapping.IXmlMappingEngine"/>
            </summary>
        </member>
        <member name="T:EnergyTrading.Mapping.MappingException">
            <summary>
            Exception raised for errors in the mapping framework.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XmlEngineResolutionException.AsmVersion">
            <summary>
            Gets the ASM schema version we are trying to locate a <see cref="T:EnergyTrading.Mapping.IXmlMappingEngine"/> for.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XmlEngineResolutionException.Code">
            <summary>
            Gets the 
            </summary>
        </member>
        <member name="T:EnergyTrading.Mapping.XmlSchemaRegistry">
            <copydocfrom cref="T:EnergyTrading.Mapping.IXmlSchemaRegistry"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlSchemaRegistry.RegisterSchema(System.String)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlSchemaRegistry.RegisterSchema(System.String)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlSchemaRegistry.GetSchemas">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlSchemaRegistry.GetSchemas"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlSchemaRegistry.SchemaExists(System.String)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlSchemaRegistry.SchemaExists(System.String)"/>
        </member>
        <member name="T:EnergyTrading.Math.DoubleExtensions">
            <summary>
            Extension methods for doubles.
            </summary>
        </member>
        <member name="M:EnergyTrading.Math.DoubleExtensions.ToVersionString(System.Double,System.String)">
            <summary>
            Converts a version number into a string representation.
            </summary>
            <param name="version">Version number e.g. 2, 2.1</param>
            <param name="delimiter">Delimiter to replace "." with</param>
            <returns>String version suitable for a namespace e.g. 2, 2_1</returns>
        </member>
        <member name="M:EnergyTrading.Math.DoubleExtensions.AlmostEquals(System.Double,System.Double)">
            <summary>
            Approxmiate equality for double-precision floating point numbers.
            <para>
            Tolerance of comparision is estimated from the size of the numbers passed.
            </para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
            <remarks>Based on http://stackoverflow.com/questions/4787125/evaluate-if-two-doubles-are-equal-based-on-a-given-precision-not-within-a-certa</remarks>        
        </member>
        <member name="M:EnergyTrading.Math.DoubleExtensions.AlmostEquals(System.Double,System.Double,System.Double)">
            <summary>
            Approxmiate equality for double-precision floating point numbers.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Math.DoubleExtensions.Ulp(System.Double)">
            <summary>
            Calculate the size of an ulp of the specified double-precision floating point number.
            <para>
            An ulp of a value is the positive difference between this floating point value and the 
            value next larger in magnitude. Note that for non-NaN x, ulp(-x) == ulp(x).
            </para>
            <para>
            Special cases:
            <list type="bullet">
            <item><description>If the argument is NaN, then the result is NaN.</description></item>
            <item><description>If the argument is positive or negative infinity then the result is positive infinity</description></item>
            <item><description>If the argument is positive or negative zero, then the result is double.MinValue</description></item>
            <item><description>If the argument is +-double.MaxValue, then the result is equal to 2^971</description></item>                        
            </list>
            </para>
            </summary>
            <param name="value">The double-precision floating point number whose ulp is to be returned.</param>
            <returns>Size of the ulp of the argument.</returns>
            <remarks>Based on http://stackoverflow.com/questions/9485943/calculate-the-unit-in-the-last-place-ulp-for-doubles</remarks>
        </member>
        <member name="T:EnergyTrading.Math.FloatExtensions">
            <summary>
            Extension methods for floats.
            </summary>
        </member>
        <member name="M:EnergyTrading.Math.FloatExtensions.Ulp(System.Single)">
            <summary>
            Calculate the size of an ulp of the specified single-precision floating point number.
            <para>
            An ulp of a value is the positive difference between this floating point value and the 
            value next larger in magnitude. Note that for non-NaN x, ulp(-x) == ulp(x).
            </para>
            <para>
            Special cases:
            <list type="bullet">
            <item><description>If the argument is NaN, then the result is NaN.</description></item>
            <item><description>If the argument is positive or negative infinity then the result is positive infinity</description></item>
            <item><description>If the argument is positive or negative zero, then the result is single.MinValue</description></item>
            <item><description>If the argument is +-single.MaxValue, then the result is equal to 2^104</description></item>                        
            </list>
            </para>
            </summary>
            <param name="value">The double-precision floating point number whose ulp is to be returned.</param>
            <returns>Size of the ulp of the argument.</returns>
            <remarks>Based on http://stackoverflow.com/questions/9485943/calculate-the-unit-in-the-last-place-ulp-for-doubles</remarks>
        </member>
        <member name="M:EnergyTrading.Math.FloatExtensions.SingleToInt32Bits(System.Single)">
            <summary>
            Converts the specified single-precision floating point number to a 32-bit signed integer.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Math.FloatExtensions.Int32BitsToSingle(System.Int32)">
            <summary>
            Converts the specified 32-bit signed integer to a single-precision floating point number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.ChannelsExtensions.MessageContent(System.ServiceModel.Channels.MessageBuffer)">
            <summary>
            Convert a message buffer into its string representation.
            </summary>
            <param name="buffer">MessageBuffer to use.</param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.ChannelsExtensions.XmlToStream(System.ServiceModel.Channels.Message,System.Xml.XmlWriterSettings,System.IO.Stream)">
            <summary>
            Write a <see cref="T:System.ServiceModel.Channels.Message"/> to a stream
            </summary>
            <param name="message"></param>
            <param name="writerSettings"></param>
            <param name="stream"></param>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.ChannelsExtensions.GetXmlDeclEncoding(System.Byte[],System.Text.Encoding)">
            <summary>
            Get the encoding from the a binary XML message
            </summary>
            <param name="message"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.ChannelsExtensions.GetEncoding(System.Byte[],System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="T:EnergyTrading.ServiceModel.Channels.ClientMessageLogger">
            <summary>
            Client Message inspector that logs sent/received messages.
            </summary>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.ClientMessageLogger.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
            <copydocfrom cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)"/>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.ClientMessageLogger.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
            <copydocfrom cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)"/>
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.ClientMessageLogger.Logger">
            <summary>
            Get or set the logger.
            </summary>
        </member>
        <member name="T:EnergyTrading.ServiceModel.Channels.ClientMessageLoggerBehavior">
            <summary>
            Endpoint behaviour that logs client messages.
            </summary>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.ClientMessageLoggerBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.ClientMessageLoggerBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.ClientMessageLoggerBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.ClientMessageLoggerBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.ClientMessageLoggerBehavior.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
        </member>
        <member name="T:EnergyTrading.ServiceModel.Channels.ConfigurationStrings">
            <summary>
            Configuration strings class for this namespace.
            </summary>
        </member>
        <member name="T:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoder">
            <summary>
            Custom text encoder that can apply multiple transformations.
            </summary>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoder.#ctor(EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoderFactory)">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoder"/> class.
            </summary>
            <param name="factory">Factory to use</param>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoder.IsContentTypeSupported(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.String)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoder.ReadMessage(System.IO.Stream,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoder.AlternateContentType">
            <summary>
            Alternate content type that should be treated the same as the actual content type.
            <para>
            This allows for slightly rogue services which don't want to obey the rules, e.g. returning faults as text/html rather than text/xml
            </para>
            </summary>
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoder.ContentType">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoder.MediaType">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoder.MessageLogger">
            <summary>
            Gets the message logger to use.
            </summary>
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoder.MessageVersion">
            <inheritdoc />
        </member>
        <member name="T:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoderFactory">
            <summary>
            Factory for the <see cref="T:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoder"/>
            </summary>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoderFactory.#ctor(System.String,System.String,System.String,EnergyTrading.ServiceModel.IMessageLogger,System.ServiceModel.Channels.MessageVersion,System.Collections.Generic.IList{EnergyTrading.ServiceModel.Channels.IMessageTransformer})">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoderFactory"/>
            </summary>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <param name="alternateContentType"></param>
            <param name="messageLogger"></param>
            <param name="version"></param>
            <param name="transformers"></param>
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoderFactory.Encoder">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoderFactory.MessageVersion">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoderFactory.AlternateContentType">
            <summary>
            Gets the alternate content type to use.
            </summary>
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoderFactory.MediaType">
            <summary>
            Gets the MIME media type to use.
            </summary>
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoderFactory.CharSet">
            <summary>
            Gets the character set to use.
            </summary>
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoderFactory.MessageLogger">
            <summary>
            Gets the message logger to use
            </summary>
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoderFactory.Transformers">
            <summary>
            Gets the list of <see cref="T:EnergyTrading.ServiceModel.Channels.IMessageTransformer"/>s to use.
            </summary>
        </member>
        <member name="T:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement">
            <summary>
            The binding element that specifies the details of the <see cref="T:EnergyTrading.ServiceModel.Channels.CustomTextMessageEncoder"/>.
            </summary>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement"/> class.
            </summary>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement"/> class.
            </summary>
            <param name="encoding"></param>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement"/> class.
            </summary>
            <param name="encoding"></param>
            <param name="mediaType"></param>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement.#ctor(EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement)">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement"/> class.
            </summary>
            <param name="binding"></param>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement.#ctor(System.String,System.String,System.String,EnergyTrading.ServiceModel.IMessageLogger,System.ServiceModel.Channels.MessageVersion)">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement"/> class.
            </summary>
            <param name="encoding"></param>
            <param name="mediaType"></param>
            <param name="alternateContentType"></param>
            <param name="messageLogger"></param>
            <param name="msgVersion"></param>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement.CreateMessageEncoderFactory">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement.Clone">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement.AlternateContentType">
            <summary>
            Gets or sets the alternate content type.
            </summary>
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement.Encoding">
            <summary>
            Gets the message encoding
            </summary>
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement.MediaType">
            <summary>
            Gets the media type.
            </summary>
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement.MessageLogger">
            <summary>
            Gets or sets the message logger to use.
            </summary>
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement.MessageVersion">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement.ReaderQuotas">
            <summary>
            This encoder does not enforces any quotas for the unsecure messages. The 
            quotas are enforced for the secure portions of messages when this encoder
            is used in a binding that is configured with security. 
            </summary>
        </member>
        <member name="P:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement.Transformers">
            <summary>
            Gets or sets the list of <see cref="T:EnergyTrading.ServiceModel.Channels.IMessageTransformer"/>s to apply.
            </summary>
        </member>
        <member name="T:EnergyTrading.ServiceModel.Channels.SoapBodyXsiMessageTransformer">
            <summary>
            Removes the xsi declaration from a SOAP envelope.
            </summary>
        </member>
        <member name="T:EnergyTrading.ServiceModel.Channels.IMessageTransformer">
            <summary>
            Transforms a message in some way.
            </summary>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.IMessageTransformer.Transform(System.Xml.Linq.XDocument)">
            <summary>
            Apply a transformation to the XML.
            </summary>
            <param name="document">XDocument to use.</param>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.SoapBodyXsiMessageTransformer.Transform(System.Xml.Linq.XDocument)">
            <copydocfrom cref="M:EnergyTrading.ServiceModel.Channels.IMessageTransformer.Transform(System.Xml.Linq.XDocument)"/>
        </member>
        <member name="T:EnergyTrading.ServiceModel.Configuration.ClientMessageLoggerBehaviorElement">
            <summary>
            Enables the use of <see cref="T:EnergyTrading.ServiceModel.Channels.ClientMessageLoggerBehavior"/> from a machine or application configuration files.
            </summary>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Configuration.ClientMessageLoggerBehaviorElement.CreateBehavior">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.ServiceModel.Configuration.ClientMessageLoggerBehaviorElement.Logger">
            <summary>
            Gets or sets the logger type.
            </summary>
        </member>
        <member name="P:EnergyTrading.ServiceModel.Configuration.ClientMessageLoggerBehaviorElement.Path">
            <summary>
            Gets or sets the logging path.
            </summary>
        </member>
        <member name="P:EnergyTrading.ServiceModel.Configuration.ClientMessageLoggerBehaviorElement.BehaviorType">
            <inheritdoc />
        </member>
        <member name="T:EnergyTrading.ServiceModel.Configuration.CustomTextMessageEncodingElement">
            <summary>
            Enables the use of <see cref="T:EnergyTrading.ServiceModel.Channels.CustomTextMessageBindingElement"/> from a machine or application configuration files.
            </summary>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Configuration.CustomTextMessageEncodingElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.ServiceModel.Configuration.CustomTextMessageEncodingElement.CreateBindingElement">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.ServiceModel.Configuration.CustomTextMessageEncodingElement.BindingElementType">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.ServiceModel.Configuration.CustomTextMessageEncodingElement.MessageVersion">
            <summary>
            Gets or sets the message version.
            </summary>
        </member>
        <member name="P:EnergyTrading.ServiceModel.Configuration.CustomTextMessageEncodingElement.MediaType">
            <summary>
            Gets or sets the MIME media type.
            </summary>
        </member>
        <member name="P:EnergyTrading.ServiceModel.Configuration.CustomTextMessageEncodingElement.Encoding">
            <summary>
            Gets or sets the text encoding.
            </summary>
        </member>
        <member name="P:EnergyTrading.ServiceModel.Configuration.CustomTextMessageEncodingElement.ReaderQuotasElement">
            <summary>
            Gets the reader quotas
            </summary>
        </member>
        <member name="P:EnergyTrading.ServiceModel.Configuration.CustomTextMessageEncodingElement.Transformers">
            <summary>
            Gets the transformers to apply.
            </summary>
        </member>
        <member name="T:EnergyTrading.ServiceModel.Channels.MessageVersionConverter">
            <summary>
            Converts between <see cref="T:EnergyTrading.ServiceModel.Channels.ConfigurationStrings"/> and <see cref="T:System.ServiceModel.Channels.MessageVersion"/>
            </summary>
        </member>
        <member name="T:EnergyTrading.ServiceModel.Channels.RemoveMustUnderstandMessageTransformer">
            <summary>
            Remove the SOAP mustUnderstand attribute from the SOAP security header.
            </summary>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Channels.RemoveMustUnderstandMessageTransformer.Transform(System.Xml.Linq.XDocument)">
            <copydocfrom cref="M:EnergyTrading.ServiceModel.Channels.IMessageTransformer.Transform(System.Xml.Linq.XDocument)"/>
        </member>
        <member name="T:EnergyTrading.ServiceModel.IMessageLogger">
            <summary>
            Logs WCF messages.
            </summary>
        </member>
        <member name="M:EnergyTrading.ServiceModel.IMessageLogger.Sent(System.String)">
            <summary>
            Log a sent message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:EnergyTrading.ServiceModel.IMessageLogger.Received(System.String)">
            <summary>
            Log a received message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:EnergyTrading.ServiceModel.IMessageLogger.Path">
            <summary>
            Gets or sets the path to log to.
            </summary>
        </member>
        <member name="T:EnergyTrading.ServiceModel.Loggers.NullMessageLogger">
            <summary>
            A message logger that does nothing
            </summary>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Loggers.NullMessageLogger.Sent(System.String)">
            <copydocfrom cref="M:EnergyTrading.ServiceModel.IMessageLogger.Sent(System.String)"/>
        </member>
        <member name="M:EnergyTrading.ServiceModel.Loggers.NullMessageLogger.Received(System.String)">
            <copydocfrom cref="M:EnergyTrading.ServiceModel.IMessageLogger.Received(System.String)"/>
        </member>
        <member name="P:EnergyTrading.ServiceModel.Loggers.NullMessageLogger.Path">
            <copydocfrom cref="P:EnergyTrading.ServiceModel.IMessageLogger.Path"/>
        </member>
        <member name="T:EnergyTrading.ServiceModel.MessageLoggerFactory">
            <summary>
            Factory to create <see cref="T:EnergyTrading.ServiceModel.IMessageLogger"/> instances.
            </summary>
        </member>
        <member name="M:EnergyTrading.ServiceModel.MessageLoggerFactory.Create(System.String,System.String)">
            <summary>
            Create a logger
            </summary>
            <param name="loggerName"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:EnergyTrading.Services.IRunningState">
            <summary>
            Interface to determine state of a service.
            </summary>
        </member>
        <member name="P:EnergyTrading.Services.IRunningState.RunningState">
            <summary>
            Get the current state of the service.
            </summary>
        </member>
        <member name="T:EnergyTrading.Services.RunningState">
            <summary>
            State model for a service.
            </summary>
        </member>
        <member name="F:EnergyTrading.Services.RunningState.Stopped">
            <summary>
            Service is not running.
            </summary>
        </member>
        <member name="F:EnergyTrading.Services.RunningState.Stopping">
            <summary>
            Transitioning from <see cref="F:EnergyTrading.Services.RunningState.Started"/> to <see cref="F:EnergyTrading.Services.RunningState.Stopped"/>
            </summary>
        </member>
        <member name="F:EnergyTrading.Services.RunningState.Starting">
            <summary>
            Transitioning from <see cref="F:EnergyTrading.Services.RunningState.Stopped"/> to <see cref="F:EnergyTrading.Services.RunningState.Started"/>
            </summary>
        </member>
        <member name="F:EnergyTrading.Services.RunningState.Started">
            <summary>
            Service is running.
            </summary>
        </member>
        <member name="T:EnergyTrading.Threading.TaskExtensions">
            <summary>
            Generic code to retry calls to functions or methods
            </summary>
        </member>
        <member name="M:EnergyTrading.Threading.TaskExtensions.Retry``1(System.Func{``0},System.Int32,System.Int32)">
            <summary>
            Retry calls to a function.
            </summary>
            <typeparam name="T">Type returned from the task.</typeparam>
            <param name="task">Task to execute.</param>
            <param name="maxRetries">Number of times to attempt the task.</param>
            <param name="interval">Time in milliseconds to wait between attempts.</param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Threading.TaskExtensions.Retry(System.Action,System.Int32,System.Int32)">
            <summary>
            Retry calls to a action.
            </summary>
            <param name="task">Task to execute.</param>
            <param name="maxRetries">Number of times to attempt the task.</param>
            <param name="interval">Time in milliseconds to wait between attempts.</param>
            <returns></returns>
        </member>
        <member name="T:EnergyTrading.Validation.AndRule`1">
            <summary>
            Validates a set of rules that all must be true.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:EnergyTrading.Validation.Rule`1">
            <summary>
            Rule to validate an strongly typed object.
            </summary>
            <typeparam name="T">Type of the entity to validate.</typeparam>
        </member>
        <member name="T:EnergyTrading.Validation.IRule`1">
            <summary>
            Rule to validate an strongly typed object.
            </summary>
            <typeparam name="T">Type of the entity to validate.</typeparam>
        </member>
        <member name="T:EnergyTrading.Validation.IRule">
            <summary>
            Rule to validate an object.
            </summary>
        </member>
        <member name="M:EnergyTrading.Validation.IRule.IsValid(System.Object)">
            <summary>
            Determine the validity of the entity.
            </summary>
            <param name="entity">Entity to validate.</param>
            <returns>true if the entity is valid, false otherwise.</returns>
        </member>
        <member name="P:EnergyTrading.Validation.IRule.Message">
            <summary>
            Gets the validation message.
            </summary>
        </member>
        <member name="M:EnergyTrading.Validation.IRule`1.IsValid(`0)">
            <summary>
            Determine the validity of the entity.
            </summary>
            <param name="entity">Entity to validate.</param>
            <returns>true if the entity is valid, false otherwise.</returns>
        </member>
        <member name="M:EnergyTrading.Validation.Rule`1.EnergyTrading#Validation#IRule#IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Validation.Rule`1.IsValid(`0)">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.Validation.Rule`1.Message">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Validation.AndRule`1.IsValid(`0)">
            <inheritdoc />
        </member>
        <member name="T:EnergyTrading.Validation.BooleanRule">
            <summary>
            Validates a boolean value.
            </summary>
        </member>
        <member name="M:EnergyTrading.Validation.BooleanRule.IsValid(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Validation.ChildRuleChecker`2.IsValid(`0)">
            <inheritdoc />
        </member>
        <member name="T:EnergyTrading.Validation.NotRule`1">
            <summary>
            Negates the result of another rule.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EnergyTrading.Validation.NotRule`1.IsValid(`0)">
            <inheritdoc />
        </member>
        <member name="T:EnergyTrading.Validation.OrRule`1">
            <summary>
            Validates a set of rules which any must be true.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EnergyTrading.Validation.OrRule`1.IsValid(`0)">
            <inheritdoc />
        </member>
        <member name="T:EnergyTrading.Validation.StringLengthRule">
            <summary>
            Validate max length of a string.
            </summary>
        </member>
        <member name="M:EnergyTrading.Validation.StringLengthRule.IsValid(System.String)">
            <inheritdoc />
        </member>
        <member name="T:EnergyTrading.Validation.StringNotNullOrEmptyRule">
            <summary>
            Validates whether a string is null or empty and optionally just whitespace.
            </summary>
        </member>
        <member name="M:EnergyTrading.Validation.StringNotNullOrEmptyRule.IsValid(System.String)">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.Validation.StringNotNullOrEmptyRule.AllowWhiteSpace">
            <summary>
            Get or set whether whitespace causes a rule violation.
            </summary>
        </member>
        <member name="T:EnergyTrading.Validation.ValueExistsRule`1">
            <summary>
            Validates that a value exists in a supplied set of values.
            </summary>
        </member>
        <member name="M:EnergyTrading.Validation.ValueExistsRule`1.IsValid(`0)">
            <inheritdoc />
        </member>
        <member name="T:EnergyTrading.Wrappers.IDateTime">
            <summary>
            Injection interface to allow for mocking when performing tasks that use the current time
            </summary>
        </member>
        <member name="T:EnergyTrading.Wrappers.IDirectory">
            <summary>
            Injection interface to allow for mocking when performing tasks against the file system
            </summary>
        </member>
        <member name="T:EnergyTrading.Wrappers.IFile">
            <summary>
            Injection interface to allow for mocking when performing tasks against the file system
            </summary>
        </member>
        <member name="T:EnergyTrading.Xml.IXmlSchemaValidator">
            <summary>
            Validate XML against a schema.
            </summary>
        </member>
        <member name="M:EnergyTrading.Xml.IXmlSchemaValidator.GetSchemaSet(System.String)">
            <summary>
            Gets the schema set to use.
            </summary>
            <param name="schema">Name/version of schema to use.</param>
            <returns>Returns the XmlSchemaSet or null if not found</returns>
        </member>
        <member name="M:EnergyTrading.Xml.IXmlSchemaValidator.GetXPathValidator(System.String)">
            <summary>
            Gets the validation item to use.
            </summary>
            <param name="schema">Name/version of schema to use.</param>
            <returns>Returns the ValidationItem or null if not found</returns>
        </member>
        <member name="M:EnergyTrading.Xml.IXmlSchemaValidator.Validate(System.String,System.String)">
            <summary>
            Validate against a schema.
            </summary>
            <param name="xml">Xml to use</param>
            <param name="schema">Name/version of schema to use.</param>
            <returns></returns>
            <exception cref="T:EnergyTrading.Mapping.MappingException">Thrown if SchemaSet schema does not exist</exception>
        </member>
        <member name="M:EnergyTrading.Xml.IXmlSchemaValidator.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Validate against a schema.
            </summary>
            <param name="document">Document to use</param>
            <param name="schemaSet">XmlSchemaSet to use.</param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Xml.IXmlSchemaValidator.ValidateXPaths(System.String,System.String)">
            <summary>
            Validate against a schema.
            </summary>
            <param name="xml">Xml to use</param>
            <param name="schema">Name/version of schema to use.</param>
            <returns></returns>
            <exception cref="T:EnergyTrading.Mapping.MappingException">Thrown if ValidationItem for the schema does not exist</exception>
        </member>
        <member name="M:EnergyTrading.Xml.IXmlSchemaValidator.ValidateXPaths(System.Xml.Linq.XDocument,EnergyTrading.Xml.IXPathValidator)">
            <summary>
            Validate against a schema.
            </summary>
            <param name="document">Document to use</param>
            <param name="validator">XPath validator to use.</param>
            <returns></returns>
        </member>
        <member name="T:EnergyTrading.Xml.IXPathValidator">
            <summary>
            A hierarchy of XPaths to validate.
            </summary>
        </member>
        <member name="M:EnergyTrading.Xml.IXPathValidator.Validate(System.Xml.Linq.XDocument)">
            <summary>
            Validate a document.
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Xml.IXPathValidator.Validate(System.Xml.Linq.XDocument,System.Xml.XmlNamespaceManager,System.String)">
            <summary>
            Validate a document.
            </summary>
            <param name="document"></param>
            <param name="xnm"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="P:EnergyTrading.Xml.IXPathValidator.XPath">
            <summary>
            Gets or sets the XPath to validate.
            </summary>
        </member>
        <member name="P:EnergyTrading.Xml.IXPathValidator.Children">
            <summary>
            Gets or sets the child validation items to check if the <see cref="P:EnergyTrading.Xml.IXPathValidator.XPath"/> is present.
            </summary>
        </member>
        <member name="T:EnergyTrading.Xml.Linq.XmlLinqExtensions">
            <summary>
            Extensions to System.Xml.Linq
            </summary>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.Normalize(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Creates and returns a new, cloned, normalized XDocument.
            <para>
            If no schema is passed, the method will only perform normalizations that are possible without using PSVI.
            </para>
            <para>
            If there is a valid schema, then it will validate and normalize. During validation, it throws errors if XDocument is not valid against schema.
            </para>
            </summary>
            <param name="source">Source document to check</param>
            <param name="schema">(Optional) Schema to validate against</param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.DeepEqualsWithNormalization(System.Xml.Linq.XDocument,System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet)">
            <summary>
            This method compares two XDocument objects after normalization.
            It is valid to pass null for the schema parameter, in which case the method will only do the normalizations that are possible without using PSVI.
            </summary>
            <param name="doc1"></param>
            <param name="doc2"></param>
            <param name="schemaSet"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.Namespaces(System.Xml.XPath.XPathDocument)">
            <summary>
            Get namespaces.
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.Namespaces2(System.Xml.XPath.XPathDocument)">
            <summary>
            Get namespaces.
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.Namespaces(System.Xml.Linq.XDocument)">
            <summary>
            Get namespaces.
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.Namespaces(System.Xml.XmlDocument)">
            <summary>
            Get namespaces.
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.CheckNumericFormat(EnergyTrading.Logging.ILogger,System.Xml.Linq.XAttribute,System.Type)">
            <summary>
            Check whether the formatting of a XAttribute is compatible with a numeric value.
            </summary>
            <param name="logger">Logger to log issues against.</param>
            <param name="attribute">Attribute to check</param>
            <param name="numericType">Type to check against.</param>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.CheckNumericFormat(EnergyTrading.Logging.ILogger,System.Xml.Linq.XElement,System.Type)">
            <summary>
            Check whether the formatting of a XElement is compatible with a numeric value.
            </summary>
            <param name="logger">Logger to log issues against.</param>
            <param name="element">Element to check</param>
            <param name="numericType">Type to check against.</param>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.CheckNumericFormat(EnergyTrading.Logging.ILogger,System.Xml.XPath.XPathNodeIterator,System.Type)">
            <summary>
            Check whether the formatting of a node iterator is compatible with a numeric value.
            </summary>
            <param name="logger">Logger to log issues against.</param>
            <param name="nodeIterator">Value to check</param>
            <param name="numericType">Type to check against.</param>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.RegisterNamespace(System.Xml.XmlNamespaceManager,System.String,System.String)">
            <summary>
            Registers the namespace against the namespace manager if it doesn't exist
            </summary>
            <param name="manager"></param>
            <param name="xmlNamespace"></param>
            <param name="xmlPrefix"></param>
            <returns>Empty string if no namespace, existing prefix if already defined, namespacePrefix otherwise</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.ParseXmlBool(System.String)">
            <summary>
            Parse a potential boolean value from an XML string.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.Namespaces(System.Xml.Linq.XElement)">
            <summary>
            Get namespaces from an element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.ToXAttribute(System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Construct a new XAttribute for a value.
            </summary>
            <param name="name">Name of the XAttribute</param>
            <param name="value">Value of the XAttribute</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XAttribute if the value is the default value of the type.</param>
            <param name="defaultValue">Default value to compare to.</param>        
            <returns>A new XAttribute or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.ToXAttribute(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Construct a new XAttribute for a value.
            </summary>
            <param name="name">Name of the XAttribute</param>
            <param name="value">Value of the XAttribute</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XAttribute if the value is the default value of the type.</param>
            <param name="defaultValue">Default value to compare to.</param>        
            <returns>A new XAttribute or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.ToXAttribute(System.Int32,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Construct a new XAttribute for a value.
            </summary>
            <param name="name">Name of the XAttribute</param>
            <param name="value">Value of the XAttribute</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XAttribute if the value is the default value of the type.</param>
            <param name="defaultValue">Default value to compare to.</param>        
            <returns>A new XAttribute or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.ToXAttribute(System.Decimal,System.String,System.String,System.Boolean,System.Decimal)">
            <summary>
            Construct a new XAttribute for a value.
            </summary>
            <param name="name">Name of the XAttribute</param>
            <param name="value">Value of the XAttribute</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XAttribute if the value is the default value of the type.</param>
            <param name="defaultValue">Default value to compare to.</param>        
            <returns>A new XAttribute or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.ToXAttribute(System.DateTime,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Construct a new XAttribute for a value.
            </summary>
            <param name="name">Name of the XAttribute</param>
            <param name="value">Value of the XAttribute</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XAttribute if the value is the default value of the type.</param>
            <param name="format">Format to use, defaults to a XML date time format with UTC time zone.</param>
            <returns>A new XAttribute or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.ToXAttribute(System.DateTimeOffset,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Construct a new XAttribute for a value.
            </summary>
            <param name="name">Name of the XAttribute</param>
            <param name="value">Value of the XAttribute</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XAttribute if the value is the default value of the type.</param>
            <param name="format">Format to use, if null uses the invariant culture DateTimeFormatInfo</param>         
            <returns>A new XAttribute or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.ToXAttribute(System.Enum,System.String,System.String,System.Boolean)">
            <summary>
            Construct a new XAttribute for a value.
            </summary>
            <param name="name">Name of the XAttribute</param>
            <param name="value">Value of the XAttribute</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XAttribute if the value is the default value of the type.</param>
            <returns>A new XAttribute or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.ToXAttribute(System.Object,System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Construct a new XAttribute for a value.
            </summary>
            <param name="name">Name of the XAttribute</param>
            <param name="value">Value of the XAttribute</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XAttribute if the value is the default value of the type.</param>
            <param name="defaultValue">Default value to compare to.</param>        
            <returns>A new XAttribute or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.ToXElement(System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Construct a new XElement for a value.
            </summary>
            <param name="name">Name of the XElement</param>
            <param name="value">Value of the XElement</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XElement if the value is the default value of the type.</param>
            <param name="defaultValue">Default value to compare to.</param>
            <returns>A new XElement or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.ToXElement(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Construct a new XElement for a value.
            </summary>
            <param name="name">Name of the XElement</param>
            <param name="value">Value of the XElement</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XElement if the value is the default value of the type.</param>
            <param name="defaultValue">Default value to compare to.</param>        
            <returns>A new XElement or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.ToXElement(System.Int32,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Construct a new XElement for a value.
            </summary>
            <param name="name">Name of the XElement</param>
            <param name="value">Value of the XElement</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XElement if the value is the default value of the type.</param>
            <param name="defaultValue">Default value to compare to.</param>
            <returns>A new XElement or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.ToXElement(System.Decimal,System.String,System.String,System.Boolean,System.Decimal)">
            <summary>
            Construct a new XElement for a value.
            </summary>
            <param name="name">Name of the XElement</param>
            <param name="value">Value of the XElement</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XElement if the value is the default value of the type.</param>
            <param name="defaultValue">Default value to compare to.</param>       
            <returns>A new XElement or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.ToXElement(System.DateTime,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Construct a new XElement for a value.
            </summary>
            <param name="name">Name of the XElement</param>
            <param name="value">Value of the XElement</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XElement if the value is the default value of the type.</param>
            <param name="format">Format to use, defaults to a XML date time format with UTC time zone.</param>
            <returns>A new XElement or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.ToXElement(System.DateTimeOffset,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Construct a new XElement for a value.
            </summary>
            <param name="name">Name of the XElement</param>
            <param name="value">Value of the XElement</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XElement if the value is the default value of the type.</param>
            <param name="format">Format to use, if null uses the invariant culture DateTimeFormatInfo</param>
            <returns>A new XElement or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.ToXElement(System.Enum,System.String,System.String,System.Boolean)">
            <summary>
            Construct a new XElement for a value.
            </summary>
            <param name="name">Name of the XElement</param>
            <param name="value">Value of the XElement</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XElement if the value is the default value of the type.</param>
            <returns>A new XElement or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.ToXElement(System.Object,System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Construct a new XElement for a value.
            </summary>
            <param name="name">Name of the XElement</param>
            <param name="value">Value of the XElement</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XElement if the value is the default value of the type.</param>
            <param name="defaultValue">Default value to compare to.</param>
            <returns>A new XElement or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Linq.XmlLinqExtensions.QualifiedName(System.String,System.String)">
            <summary>
            Qualify a name with an XML namespace.
            </summary>
            <param name="name"></param>
            <param name="xmlNamespace"></param>
            <returns></returns>
        </member>
        <member name="T:EnergyTrading.Xml.Serialization.XmlSerializerExtensions">
            <summary>
            Extensions for XML serialization
            </summary>
        </member>
        <member name="M:EnergyTrading.Xml.Serialization.XmlSerializerExtensions.LoadXmlDocument``1(System.String)">
            <summary>
            Load an instance of <see typeref="T" />.
            </summary>
            <typeparam name="T">The type to load</typeparam>
            <param name="fileName">Name of file, can include root relative paths if in a web application.</param>
            <returns>Instance of T.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Serialization.XmlSerializerExtensions.LoadXmlDocument``1(System.IO.Stream)">
            <summary>
            Load an instance of <see typeref="T" />.
            </summary>
            <typeparam name="T">The type to load</typeparam>
            <param name="stream">Stream to load from.</param>
            <returns>Instance of T.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Serialization.XmlSerializerExtensions.LoadXmlDocument``1(System.Func{System.IO.TextReader})">
            <summary>
            Load an instance of <see typeref="T"/>.
            </summary>
            <typeparam name="T">The type to load</typeparam>
            <param name="func">Function to provide a <see cref="T:System.IO.StreamReader"/></param>
            <returns>Instance of T.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Serialization.XmlSerializerExtensions.XmlDeserializer``1(System.String)">
            <summary>
            Deserialize an entity from XML.
            </summary>
            <typeparam name="T">Type to deserialize</typeparam>
            <param name="xml">XML to parse.</param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Xml.Serialization.XmlSerializerExtensions.XmlSerialize``1(``0,System.String,System.Type[],System.Xml.XmlWriterSettings)">
            <summary>
            Serialize an entity to XML.
            </summary>
            <typeparam name="T">Type to serialize</typeparam>
            <param name="entity">Entity to use</param>
            <param name="fileName">File to create</param>
            <param name="types">Subtypes required for serialization</param>
            <param name="settings">Parameters to be used for the XML</param>
        </member>
        <member name="M:EnergyTrading.Xml.Serialization.XmlSerializerExtensions.XmlSerialize``1(``0,System.Type[],System.Xml.XmlWriterSettings)">
            <summary>
            Serialize an entity to XML
            </summary>
            <typeparam name="T">Type to serialize</typeparam>
            <param name="entity">Entity to use</param>
            <param name="types">Subtypes required for serialization</param>
            <param name="settings">Parameters to be used for the XML</param>        
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Xml.Serialization.XmlSerializerExtensions.TextWriterXmlSerialize``1(System.IO.TextWriter,``0,System.Type[],System.Xml.XmlWriterSettings)">
            <summary>
            XML serialize an entity to a TextWriter.
            </summary>
            <param name="textWriter"></param>
            <typeparam name="T">Type to serialize</typeparam>
            <param name="entity">Entity to use</param>
            <param name="types">Subtypes required for serialization</param>
            <param name="settings">Parameters to be used for the XML</param>    
        </member>
        <member name="M:EnergyTrading.Xml.Serialization.XmlSerializerExtensions.DataContractDeepCopy``1(``0)">
            <summary>     
            Perform a deep copy of the object using the DataContractSerializer
            </summary>  
            <typeparam name="T">The type of object being copied.</typeparam> 
            <param name="source">The object instance to copy.</param>    
            <returns>The copied object.</returns>     
        </member>
        <member name="M:EnergyTrading.Xml.Serialization.XmlSerializerExtensions.TextWriterDataContractSerialize``1(System.IO.TextWriter,``0,System.Type[])">
            <summary>
            DataContract serialize an entity to a TextWriter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="textWriter"></param>
            <param name="entity"></param>
            <param name="types"></param>
        </member>
        <member name="M:EnergyTrading.Xml.Serialization.XmlSerializerExtensions.ToXmlDocument(System.Xml.Linq.XDocument)">
            <summary>
            Convert a <see cref="T:System.Xml.Linq.XDocument"/> to a <see cref="T:System.Xml.XmlDocument"/>
            </summary>
            <param name="value">XDocument to convert.</param>
            <returns>Same content as a XmlDocument.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Serialization.XmlSerializerExtensions.ToXDocument(System.Xml.XmlDocument)">
            <summary>
            Convert a <see cref="T:System.Xml.XmlDocument"/> to a <see cref="T:System.Xml.Linq.XDocument"/>
            </summary>
            <param name="value">XmlDocument to convert</param>
            <returns>Same content as an XDocument.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Serialization.XmlSerializerExtensions.ToXmlString(System.Xml.Linq.XElement,System.Xml.ConformanceLevel)">
            <summary>
            Convert a <see cref="T:System.Xml.Linq.XElement"/> into a formatted XML string.
            </summary>
            <param name="value">XElement to serialize.</param>
            <param name="conformance">Configures the XmlWriter to check and guarantee the conformance to XML 1.0</param>        
            <returns>A formatted XML string.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Serialization.XmlSerializerExtensions.ToXmlString(System.Xml.XmlNode,System.Xml.ConformanceLevel)">
            <summary>
            Convert a <see cref="T:System.Xml.XmlNode"/> into a formatted XML string.
            </summary>
            <param name="value">XmlNode to serialize.</param>
            <param name="conformance">Configures the XmlWriter to check and guarantee the conformance to XML 1.0</param>
            <returns>A formatted XML string.</returns>
        </member>
        <member name="M:EnergyTrading.Xml.Serialization.XmlSerializerExtensions.WriteTo(System.Xml.Linq.XDocument,System.Xml.XmlWriterSettings)">
            <summary>
            Write a <see cref="T:System.Xml.XmlDocument"/> to a <see cref="T:System.IO.MemoryStream"/>
            </summary>
            <param name="document">Document to use</param>
            <param name="writerSettings">XML writer settings</param>
            <returns>A new <see cref="T:System.IO.MemoryStream"/> containing the XML document.</returns>
        </member>
        <member name="T:EnergyTrading.Logging.ILogger">
            <summary>
            Logs messages of various categories
            </summary>
        </member>
        <member name="M:EnergyTrading.Logging.ILogger.Debug(System.String)">
            <summary>
            Log a debug message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:EnergyTrading.Logging.ILogger.Debug(System.String,System.Exception)">
            <summary>
            Log a debug message with an exception.
            </summary>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to record</param>
        </member>
        <member name="M:EnergyTrading.Logging.ILogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Log a debug message.
            </summary>
            <param name="format">The format to use.</param>
            <param name="parameters">Parameters to fill in the format</param>
        </member>
        <member name="M:EnergyTrading.Logging.ILogger.Info(System.String)">
            <summary>
            Log an info message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:EnergyTrading.Logging.ILogger.Info(System.String,System.Exception)">
            <summary>
            Log an info message with an exception.
            </summary>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to record</param>
        </member>
        <member name="M:EnergyTrading.Logging.ILogger.InfoFormat(System.String,System.Object[])">
            <summary>
            Log an info message.
            </summary>
            <param name="format">The format to use.</param>
            <param name="parameters">Parameters to fill in the format</param>
        </member>
        <member name="M:EnergyTrading.Logging.ILogger.Warn(System.String)">
            <summary>
            Log a warning.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:EnergyTrading.Logging.ILogger.Warn(System.String,System.Exception)">
            <summary>
            Log a warning with an exception.
            </summary>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to record</param>
        </member>
        <member name="M:EnergyTrading.Logging.ILogger.WarnFormat(System.String,System.Object[])">
            <summary>
            Log a warning.
            </summary>
            <param name="format">The format to use.</param>
            <param name="parameters">Parameters to fill in the format</param>
        </member>
        <member name="M:EnergyTrading.Logging.ILogger.Error(System.String)">
            <summary>
            Log an error message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:EnergyTrading.Logging.ILogger.Error(System.String,System.Exception)">
            <summary>
            Log an error message with an exception.
            </summary>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to log.</param>
        </member>
        <member name="M:EnergyTrading.Logging.ILogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Log an error message.
            </summary>
            <param name="format">The format to use.</param>
            <param name="parameters">Parameters to fill in the format</param>
        </member>
        <member name="M:EnergyTrading.Logging.ILogger.Fatal(System.String)">
            <summary>
            Log a fatal message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:EnergyTrading.Logging.ILogger.Fatal(System.String,System.Exception)">
            <summary>
            Log a fatal message with an exception.
            </summary>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to log.</param>
        </member>
        <member name="M:EnergyTrading.Logging.ILogger.FatalFormat(System.String,System.Object[])">
            <summary>
            Log a fatal message.
            </summary>
            <param name="format">The format to use.</param>
            <param name="parameters">Parameters to fill in the format</param>
        </member>
        <member name="P:EnergyTrading.Logging.ILogger.IsDebugEnabled">
            <summary>
            Gets whether the debug level of logging is enabled.
            </summary>
        </member>
        <member name="P:EnergyTrading.Logging.ILogger.IsInfoEnabled">
            <summary>
            Gets whether the info level of logging is enabled.
            </summary>
        </member>
        <member name="P:EnergyTrading.Logging.ILogger.IsWarnEnabled">
            <summary>
            Gets whether the warning level of logging is enabled.
            </summary>
        </member>
        <member name="P:EnergyTrading.Logging.ILogger.IsErrorEnabled">
            <summary>
            Gets whether the error level of logging is enabled.
            </summary>
        </member>
        <member name="P:EnergyTrading.Logging.ILogger.IsFatalEnabled">
            <summary>
            Gets whether the fatal level of logging is enabled.
            </summary>
        </member>
        <member name="T:EnergyTrading.Logging.ILoggerFactory">
            <summary>
            Delivers loggers for types.
            <para>
            Determining an appropriate logger can be expensive and should be performed infrequently,
            typically by assigning a static variable in a class.
            </para>
            </summary>
            <example>
            <c>
            public class Sample
            {
                private static readonly ILogger loggerlogger = LoggerFactory.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
            }
            </c>
            </example>
        </member>
        <member name="M:EnergyTrading.Logging.ILoggerFactory.GetLogger(System.String)">
            <summary>
            Determine a logger for a name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Logging.ILoggerFactory.GetLogger``1">
            <summary>
            Determine a logger for a type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Logging.ILoggerFactory.GetLogger(System.Type)">
            <summary>
            Determine a logger for a type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Logging.ILoggerFactory.Initialize">
            <summary>
            Initialize the logging system.
            </summary>
        </member>
        <member name="M:EnergyTrading.Logging.ILoggerFactory.Shutdown">
            <summary>
            Shuts down the logging system safely.
            </summary>
        </member>
        <member name="T:EnergyTrading.Logging.LoggerFactory">
            <summary>
            Static logger factory that provides access to loggers.
            <para>
            Initialization is similar to ServiceLocator 
            </para>
            </summary>
        </member>
        <member name="M:EnergyTrading.Logging.LoggerFactory.GetLogger(System.String)">
            <summary>
            Get a named logger
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Logging.LoggerFactory.GetLogger``1">
            <summary>
            Get a logger for a type
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Logging.LoggerFactory.GetLogger(System.Type)">
            <summary>
            Get a logger for a type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:EnergyTrading.Logging.NullLogger">
            <summary>
            Null implementation of <see cref="T:EnergyTrading.Logging.ILogger"/>. All actions do nothing.
            </summary>
            <remarks>This allows a stub behaviour to be registered, a version of the null object pattern.</remarks>
        </member>
        <member name="M:EnergyTrading.Logging.NullLogger.Debug(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.NullLogger.Debug(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.NullLogger.DebugFormat(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.NullLogger.Info(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.NullLogger.Info(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.NullLogger.InfoFormat(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.NullLogger.Warn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.NullLogger.Warn(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.NullLogger.WarnFormat(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.NullLogger.Error(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.NullLogger.Error(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.NullLogger.ErrorFormat(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.NullLogger.Fatal(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.NullLogger.Fatal(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.NullLogger.FatalFormat(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.Logging.NullLogger.IsDebugEnabled">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.Logging.NullLogger.IsInfoEnabled">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.Logging.NullLogger.IsWarnEnabled">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.Logging.NullLogger.IsErrorEnabled">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.Logging.NullLogger.IsFatalEnabled">
            <inheritdoc />
        </member>
        <member name="T:EnergyTrading.Logging.SimpleLoggerFactory">
            <summary>
            Simple ILoggerFactory that just returns the same logger
            </summary>
        </member>
        <member name="M:EnergyTrading.Logging.SimpleLoggerFactory.GetLogger(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.SimpleLoggerFactory.GetLogger(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.SimpleLoggerFactory.GetLogger``1">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.SimpleLoggerFactory.Initialize">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.SimpleLoggerFactory.Shutdown">
            <inheritdoc />
        </member>
        <member name="T:EnergyTrading.Logging.TextLogger">
            <summary>
            Implementation of <see cref="T:EnergyTrading.Logging.ILogger"/> that logs into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:EnergyTrading.Logging.TextLogger.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:EnergyTrading.Logging.TextLogger"/> that writes to
            the console output.
            </summary>
        </member>
        <member name="M:EnergyTrading.Logging.TextLogger.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of <see cref="T:EnergyTrading.Logging.TextLogger"/>.
            </summary>
            <param name="writer">The writer to use for writing log entries.</param>
        </member>
        <member name="M:EnergyTrading.Logging.TextLogger.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
             <remarks>Calls <see cref="M:EnergyTrading.Logging.TextLogger.Dispose(System.Boolean)"/></remarks>.
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:EnergyTrading.Logging.TextLogger.Dispose(System.Boolean)">
            <summary>
            Disposes the associated <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="disposing">When <see langword="true"/>, disposes the associated <see cref="T:System.IO.TextWriter"/>.</param>
        </member>
        <member name="M:EnergyTrading.Logging.TextLogger.Log(System.String,System.String)">
            <summary>
            Write a new log entry with the specified severity
            </summary>
            <param name="severity">Severity of the entry.</param>
            <param name="message">Message body to log.</param>
        </member>
        <member name="T:EnergyTrading.Logging.TraceLogger">
            <summary>
            A logger that uses a <see cref="T:System.Diagnostics.TraceSwitch"/> to decide logging.
            </summary>
        </member>
        <member name="M:EnergyTrading.Logging.TraceLogger.Debug(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.TraceLogger.Debug(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.TraceLogger.DebugFormat(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.TraceLogger.Info(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.TraceLogger.Info(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.TraceLogger.InfoFormat(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.TraceLogger.Warn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.TraceLogger.Warn(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.TraceLogger.WarnFormat(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.TraceLogger.Error(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.TraceLogger.Error(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.TraceLogger.ErrorFormat(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.TraceLogger.Fatal(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.TraceLogger.Fatal(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.TraceLogger.FatalFormat(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.Logging.TraceLogger.IsDebugEnabled">
            <inheritdoc/>
            <remarks>Maps to <see cref="P:System.Diagnostics.TraceSwitch.TraceVerbose"/></remarks>
        </member>
        <member name="P:EnergyTrading.Logging.TraceLogger.IsInfoEnabled">
            <inheritdoc/>
            <remarks>Maps to <see cref="P:System.Diagnostics.TraceSwitch.TraceInfo"/></remarks>/// 
        </member>
        <member name="P:EnergyTrading.Logging.TraceLogger.IsWarnEnabled">
            <inheritdoc/>
            <remarks>Maps to <see cref="P:System.Diagnostics.TraceSwitch.TraceWarning"/></remarks>
        </member>
        <member name="P:EnergyTrading.Logging.TraceLogger.IsErrorEnabled">
            <inheritdoc/>
            <remarks>Maps to <see cref="P:System.Diagnostics.TraceSwitch.TraceError"/></remarks>
        </member>
        <member name="P:EnergyTrading.Logging.TraceLogger.IsFatalEnabled">
            <inheritdoc/>
            <remarks>Maps to <see cref="P:System.Diagnostics.TraceSwitch.TraceError"/></remarks>
        </member>
        <member name="T:EnergyTrading.Logging.TraceLoggerFactory">
            <summary>
            A logger factory using the EnergyTrading.Logging.<see cref="T:System.Diagnostics.TraceSwitch"/> to determine logging.
            </summary>
        </member>
        <member name="M:EnergyTrading.Logging.TraceLoggerFactory.GetLogger(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.TraceLoggerFactory.GetLogger``1">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.TraceLoggerFactory.GetLogger(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.TraceLoggerFactory.Initialize">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.TraceLoggerFactory.Shutdown">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Logging.TraceLoggerFactory.Write(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:EnergyTrading.Mapping.BaseNamespaceManager">
            <summary>
            Base implementation of <see cref="T:EnergyTrading.Mapping.INamespaceManager"/> that uses a <see cref="T:System.Xml.XmlNamespaceManager"/>.
            </summary>
        </member>
        <member name="T:EnergyTrading.Mapping.INamespaceManager">
            <summary>
            Manages XML namespaces.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.INamespaceManager.RegisterNamespace(System.String,System.String)">
            <summary>
            Add a namespace to the cache.
            </summary>
            <param name="prefix">Prefix for the namespace.</param>
            <param name="uri">XML namespace to register.</param>
        </member>
        <member name="M:EnergyTrading.Mapping.INamespaceManager.LookupNamespace(System.String,System.Boolean)">
            <summary>
            Lookup a prefix from a namespace.
            </summary>
            <param name="prefix">Prefix to lookup</param>
            <param name="xname">Whether to return the namespace qualified as a namespace e.g. {http://tempuri.org/} </param>
            <returns>Namespace if found, null otherwise.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.INamespaceManager.LookupPrefix(System.String)">
            <summary>
            Lookup a prefix namespace from a namespace.
            </summary>
            <param name="uri"></param>
            <returns>Prefix if found, null otherwise.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.INamespaceManager.NamespaceExists(System.String)">
            <summary>
            Gets whether the namespace is registered.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Mapping.INamespaceManager.PrefixExists(System.String)">
            <summary>
            Gets whether the prefix is registered.
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Mapping.BaseNamespaceManager.#ctor(System.Xml.XmlNamespaceManager)">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.Mapping.BaseNamespaceManager"/> class.
            </summary>
            <param name="manager">XmlNamespaceManager to use.</param>
        </member>
        <member name="M:EnergyTrading.Mapping.BaseNamespaceManager.RegisterNamespace(System.String,System.String)">
            <contentfrom cref="M:EnergyTrading.Mapping.INamespaceManager.RegisterNamespace(System.String,System.String)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.BaseNamespaceManager.LookupNamespace(System.String,System.Boolean)">
            <contentfrom cref="M:EnergyTrading.Mapping.INamespaceManager.LookupNamespace(System.String,System.Boolean)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.BaseNamespaceManager.LookupPrefix(System.String)">
            <contentfrom cref="M:EnergyTrading.Mapping.INamespaceManager.LookupPrefix(System.String)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.BaseNamespaceManager.NamespaceExists(System.String)">
            <contentfrom cref="M:EnergyTrading.Mapping.INamespaceManager.NamespaceExists(System.String)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.BaseNamespaceManager.PrefixExists(System.String)">
            <contentfrom cref="M:EnergyTrading.Mapping.INamespaceManager.PrefixExists(System.String)"/>
        </member>
        <member name="T:EnergyTrading.Mapping.IXPathManager">
            <summary>
            Constructs fully qualified XPaths from various values.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.IXPathManager.QualifyXPath(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Construct the qualified XPath for the supplied path.
            </summary>
            <param name="xpath">Base XPath to qualify.</param>
            <param name="prefix">Prefix to apply.</param>
            <param name="uri">XML namespace to apply.</param>
            <param name="index">Index if part of a node collection.</param>
            <param name="isAttribute">Whether we are accessing a element or attribute.</param>
            <returns>The qualified path.</returns>
        </member>
        <member name="T:EnergyTrading.Mapping.IMetadataXmlVersionDetector`1">
            <summary>
            Extension of <see cref="T:EnergyTrading.Mapping.IXmlVersionDetector"/> to handle detection based on the metadata.
            </summary>
            <typeparam name="TMetaData">Type of the metadata.</typeparam>
        </member>
        <member name="T:EnergyTrading.Mapping.IXmlVersionDetector">
            <summary>
            Determine the schema version for some XML.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlVersionDetector.DetectSchemaVersion(System.String)">
            <summary>
            Determine the schema version of a XML string.
            </summary>
            <param name="xml">XML string to check</param>
            <returns>Schema version of the supplied XML, typically {Schema}.{Version} e.g. Css.2_1 or <see cref="F:System.String.Empty"/> if not recognised</returns>
            <exception cref="T:System.NotSupportedException">If the supplied string is not valid XML</exception>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlVersionDetector.DetectSchemaVersion(System.Xml.Linq.XElement)">
            <summary>
            Determine the schema version of a XML element.
            </summary>
            <param name="element">XElement to check.</param>
            <returns>Schema version of the supplied XML, typically {Schema}.{Version} e.g. Css.2_1 or <see cref="F:System.String.Empty"/> if not recognised</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.IMetadataXmlVersionDetector`1.DetermineContentVersion(`0,System.String)">
            <summary>
            Determine the schema version of a value located via metadata.
            </summary>
            <param name="metadata">Metadata to use.</param>
            <param name="contentKey">Key to locate the content via the metadata.</param>
            <returns>Schema version of the supplied XML, typically {Schema}.{Version} e.g. Css.2_1 or <see cref="F:System.String.Empty"/> if not recognised</returns>
        </member>
        <member name="T:EnergyTrading.Mapping.INullableProperties">
            <summary>
            Whether an entity supports nullable properties.
            </summary>
            <remarks>
            This is used to support serialization behaviour so we can distinguish between the default value
            of a property and whether the value was explicitly assigned in code. In the first case, we
            do not necessarily want to serialize the value, e.g. serializing every zero or empty string
            adds no semantic value.
            </remarks>
        </member>
        <member name="P:EnergyTrading.Mapping.INullableProperties.NullProperties">
            <summary>
            Get the null property bag.
            </summary>
        </member>
        <member name="T:EnergyTrading.Mapping.IXmlConverter">
            <summary>
            Converts entities to and from XML.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlConverter.FromXml``1(System.String)">
            <summary>
            Convert XML into an entity.
            </summary>
            <typeparam name="T">Entity type to create</typeparam>
            <param name="xml">XML to convert</param>
            <returns>Deserialized entity or null if xml not provided</returns>
            <exception cref="T:EnergyTrading.Mapping.MappingException">Thrown on errors</exception>        
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlConverter.FromXml``1(System.Xml.Linq.XElement)">
            <summary>
            Convert XElement into an entity.
            </summary>
            <typeparam name="T">Entity type to create</typeparam>
            <param name="document">XML document to convert</param>
            <returns>Deserialized entity or null if XElement not provided.</returns>
            <exception cref="T:EnergyTrading.Mapping.MappingException">Thrown on errors</exception>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlConverter.ToXElement``1(``0,System.String,System.Boolean)">
            <summary>
            Convert an entity to XElement.
            </summary>
            <param name="entity">The entity</param>
            <param name="version">The schema version of the XML to produce</param>
            <param name="localNamespaces">Declare namespaces locally to nodes or at the root</param>
            <returns>The XML string containing the order details</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlConverter.ToXml``1(``0,System.String,System.Boolean)">
            <summary>
            Convert an entity to XML.
            </summary>
            <param name="entity">The entity</param>
            <param name="version">The schema version of the XML to produce</param>
            <param name="localNamespaces">Declare namespaces locally to nodes or at the root</param>
            <returns>The XML string containing the order details</returns>
        </member>
        <member name="T:EnergyTrading.Mapping.IXmlMapper`2">
            <summary>
            Extends <see cref="T:EnergyTrading.Mapping.IMapper`2"/> to assist when mapping to and from XML.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
        </member>
        <member name="T:EnergyTrading.Mapping.IMapper`2">
            <summary>
            Maps an object from a source to a destination.
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <typeparam name="TDestination">Type of the destination.</typeparam>
        </member>
        <member name="M:EnergyTrading.Mapping.IMapper`2.Map(`0)">
            <summary>
            Map the source to a created destination.
            </summary>
            <param name="source">Object to map from</param>
            <returns>Default of <typeparamref name="TDestination"/> if source is null, otherwise generated object with values mapped from the source</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.IMapper`2.Map(`0,`1)">
            <summary>
            Map the source to the destination.
            </summary>
            <param name="source">Object to map from</param>
            <param name="destination">Object to map to</param>
        </member>
        <member name="M:EnergyTrading.Mapping.IXmlMapper`2.Map(`0,System.String,System.String,System.Boolean)">
            <summary>
            Map the source to a created destination
            </summary>
            <param name="source">Object to map from</param>
            <param name="nodeName">Name for the node</param>
            <param name="xmlNamespace">Namespace to override the default</param>
            <param name="outputDefault"></param>
            <returns>Generated object with values mapped from the source</returns>
        </member>
        <member name="T:EnergyTrading.Mapping.IXmlMapper`1">
            <summary>
            Provides a downcast from an IXmlMapper{S, D} when we want to be polymorphic on D
            </summary>
            <typeparam name="TSource"></typeparam>
        </member>
        <member name="T:EnergyTrading.Mapping.LinqXPathManager">
            <summary>
            Computes the qualified XPath for use in LINQ to XML queries.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathManager.#ctor(EnergyTrading.Mapping.INamespaceManager)">
            <summary>
            Create a new instance of the LinqXPathManager class.
            </summary>
            <param name="namespaceManager">Namespace manager to use.</param>
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathManager.#ctor(EnergyTrading.Mapping.INamespaceManager,System.Boolean)">
            <summary>
            Create a new instance of the LinqXPathManager class.
            </summary>
            <param name="namespaceManager">Namespace manager to use.</param>
            <param name="memoize">Whether to memoize (cache) the results.</param>
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathManager.QualifyXPath(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXPathManager.QualifyXPath(System.String,System.String,System.String,System.Int32,System.Boolean)"/>
        </member>
        <member name="T:EnergyTrading.Mapping.LinqXPathProcessor">
            <summary>
            Uses LINQ to XML to query an XDocument.
            </summary>
        </member>
        <member name="T:EnergyTrading.Mapping.XDocumentXPathProcessor">
            <summary>
            An XPathProcessor that uses an <see cref="T:System.Xml.Linq.XDocument"/> rather than a <see cref="T:System.Xml.XPath.XPathDocument"/>.
            </summary>
        </member>
        <member name="T:EnergyTrading.Mapping.XPathProcessor">
            <summary>
            Parses an XML document.
            </summary>
            <remarks>
            This implementation uses stacks to maintain the current XML namespace and XPath, adjusting them
            by means of Push/Pop methods.
            </remarks>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.#ctor">
            <summary>
            Constructs a new instance of the XPathProcessor class.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.Initialize(System.String)">
            <summary>
            Initialize the processor.
            </summary>
            <remarks>Uses an XPathDocument internally</remarks>
            <param name="xml">XML to use.</param>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.Initialize(System.Xml.XPath.XPathDocument)">
            <summary>
            Initialize the processor.
            </summary>
            <param name="document">XPathDocument to use</param>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.Initialize(System.Xml.Linq.XDocument)">
            <summary>
            Initialize the processor.
            </summary>
            <param name="document">XDocument to use.</param>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.Initialize(System.Xml.Linq.XElement)">
            <summary>
            Initialize the processor.
            </summary>
            <param name="element">XElement to use.</param>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.Push(System.String,System.String,System.String,System.Int32)">
            <summary>
            Push the XPath provided onto the current path.
            </summary>
            <param name="xpath">XPath to push, may contain an index and a prefix, which takes precedence over the namespace</param>
            <param name="xmlNamespace">Namespace for the xpath.</param>
            <param name="prefix">Prefix used to alias the namespace.</param>
            <param name="index">Index if the path is collection element.</param>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.Pop">
            <summary>
            Pop the top context from the path.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.CurrentNode">
            <summary>
            Gets whether there is a current node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.IsNull(System.String,System.String)">
            <summary>
            Determine whether a node is null or not
            </summary>
            <param name="xpath"></param>
            <param name="prefix"></param>
            <returns>true if the node is not present or is empty, false otherwise</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.HasElement(System.String,System.String,System.Int32)">
            <summary>
            Determine if the current node has the named element.
            </summary>
            <param name="xpath">Relative xpath</param>
            <param name="prefix">Prefix for the xpath</param>
            <param name="index">Index if xpath is an array</param>
            <returns>true if the element is present, otherwise false</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.HasAttribute(System.String,System.String)">
            <summary>
            Determine if the current node has the named attribute.
            </summary>
            <param name="xpath">Relative xpath</param>
            <param name="prefix">Prefix for the xpath</param>
            <returns>true if the element is present, otherwise false</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.LookupNamespace(System.String)">
            <summary>
            Lookup a namespace based on the prefix.
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.LookupPrefix(System.String)">
            <summary>
            Lookup a prefix namespace based on the namespace.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.RegisterNamespace(System.String,System.String)">
            <summary>
            Register a namespace and prefix to use
            </summary>
            <param name="uri"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.ToBool(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Evaluate a node as a boolean.
            </summary>
            <param name="xpath">XPath relative to CurrentNode</param>
            <param name="prefix">Prefix to use, must provide to evaluate qualified attributes</param>
            <param name="isAttribute">Whether the node is an attribute or an element.</param>        
            <param name="defaultValue">Value to return if node not present.</param>
            <returns>Value of the node or defaultValue if not present.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.ToDecimal(System.String,System.String,System.Boolean,System.Decimal)">
            <summary>
            Evaluate a node as an decimal.
            </summary>
            <param name="xpath">XPath relative to CurrentNode</param>
            <param name="prefix">Prefix to use, must provide to evaluate qualified attributes</param>
            <param name="isAttribute">Whether the node is an attribute or an element.</param>        
            <param name="defaultValue">Value to return if node not present.</param>
            <returns>Value of the node or defaultValue if not present.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.ToDouble(System.String,System.String,System.Boolean,System.Single)">
            <summary>
            Evaluate a node as an double.
            </summary>
            <param name="xpath">XPath relative to CurrentNode</param>
            <param name="prefix">Prefix to use, must provide to evaluate qualified attributes</param>
            <param name="isAttribute">Whether the node is an attribute or an element.</param>        
            <param name="defaultValue">Value to return if node not present.</param>
            <returns>Value of the node or defaultValue if not present.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.ToFloat(System.String,System.String,System.Boolean,System.Single)">
            <summary>
            Evaluate a node as a float.
            </summary>
            <param name="xpath">XPath relative to CurrentNode</param>
            <param name="prefix">Prefix to use, must provide to evaluate qualified attributes</param>
            <param name="isAttribute">Whether the node is an attribute or an element.</param>        
            <param name="defaultValue">Value to return if node not present.</param>
            <returns>Value of the node or defaultValue if not present.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.ToSingle(System.String,System.String,System.Boolean,System.Single)">
            <summary>
            Evaluate a node as a <see cref="T:System.Single"/>.
            </summary>
            <param name="xpath">XPath relative to CurrentNode</param>
            <param name="prefix">Prefix to use, must provide to evaluate qualified attributes</param>
            <param name="isAttribute">Whether the node is an attribute or an element.</param>        
            <param name="defaultValue">Value to return if node not present.</param>
            <returns>Value of the node or defaultValue if not present.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.ToInt(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Evaluate a node as an integer.
            </summary>
            <param name="xpath">XPath relative to CurrentNode</param>
            <param name="prefix">Prefix to use, must provide to evaluate qualified attributes</param>
            <param name="isAttribute">Whether the node is an attribute or an element.</param>
            <param name="defaultValue">Value to return if node not present.</param>
            <returns>Value of the node or defaultValue if not present.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.ToInt32(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Evaluate a node as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="xpath">XPath relative to CurrentNode</param>
            <param name="prefix">Prefix to use, must provide to evaluate qualified attributes</param>
            <param name="isAttribute">Whether the node is an attribute or an element.</param>
            <param name="defaultValue">Value to return if node not present.</param>
            <returns>Value of the node or defaultValue if not present.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.ToLong(System.String,System.String,System.Boolean,System.Int64)">
            <summary>
            Evaluate a node as a long.
            </summary>
            <param name="xpath">XPath relative to CurrentNode</param>
            <param name="prefix">Prefix to use, must provide to evaluate qualified attributes</param>
            <param name="isAttribute">Whether the node is an attribute or an element.</param>        
            <param name="defaultValue">Value to return if node not present.</param>
            <returns>Value of the node or defaultValue if not present.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.ToInt64(System.String,System.String,System.Boolean,System.Int64)">
            <summary>
            Evaluate a node as an <see cref="T:System.Int64"/>.
            </summary>
            <param name="xpath">XPath relative to CurrentNode</param>
            <param name="prefix">Prefix to use, must provide to evaluate qualified attributes</param>
            <param name="isAttribute">Whether the node is an attribute or an element.</param>
            <param name="defaultValue">Value to return if node not present.</param>
            <returns>Value of the node or defaultValue if not present.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.ToString(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Evaluate a node as a string.
            </summary>
            <param name="xpath">XPath relative to CurrentNode</param>
            <param name="prefix">Prefix to use, must provide to evaluate qualified attributes</param>
            <param name="isAttribute">Whether the node is an attribute or an element.</param>        
            <param name="defaultValue">Value to return if node not present.</param>
            <returns>Value of the node or defaultValue if not present.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.ToEnum``1(System.String,System.String,System.Boolean)">
            <summary>
            Evaluate a node as an enum.
            </summary>
            <typeparam name="T">Type of the enum</typeparam>
            <param name="xpath">XPath relative to CurrentNode</param>
            <param name="prefix">Prefix to use, must provide to evaluate qualified attributes</param>
            <param name="isAttribute">Whether the node is an attribute or an element.</param>        
            <returns>Value of the node.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.ToDateTime(System.String,System.String,System.Boolean)">
            <summary>
            Evaluate a node as a DateTime.
            </summary>
            <param name="xpath">XPath relative to CurrentNode</param>
            <param name="prefix">Prefix to use, must provide to evaluate qualified attributes</param>
            <param name="isAttribute">Whether the node is an attribute or an element.</param>        
            <returns>Value of the node.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.ToDateTimeOffset(System.String,System.String,System.Boolean)">
            <summary>
            Evaluate a node as a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="xpath">XPath relative to CurrentNode</param>
            <param name="prefix">Prefix to use, must provide to evaluate qualified attributes</param>
            <param name="isAttribute">Whether the node is an attribute or an element.</param>        
            <returns>Value of the node.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.ToTimeSpan(System.String,System.String,System.Boolean)">
            <summary>
            Evaluate a node as a <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="xpath">XPath relative to CurrentNode</param>
            <param name="prefix">Prefix to use, must provide to evaluate qualified attributes</param>
            <param name="isAttribute">Whether the node is an attribute or an element.</param>        
            <returns>Value of the node.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.InitializeManagers(System.Xml.XPath.XPathNavigator)">
            <summary>
            Initialize the internal namespace/xpath managers.
            </summary>
            <param name="navigator"></param>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.PushNamespace(System.String,System.String)">
            <summary>
            Push a namespace onto the stack, used for local namespace prefix evaluation.
            </summary>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="prefix">Prefix to use.</param>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.PushPath(System.String)">
            <summary>
            Push an XPath onto the stack, relative to the current path.
            </summary>
            <param name="xpath">XPath to use.</param>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.DetermineCurrentPath">
            <summary>
            Determine the current XPath.
            </summary>
            <returns>The current XPath.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.PopNamespace">
            <summary>
            Pop the current XML namespace from stack.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.PopPath">
            <summary>
            Pop the current XPath from the stack.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathProcessor.QualifyXPath(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Construct the qualified XPath for the supplied path.
            </summary>
            <param name="xpath">Base XPath to qualify.</param>
            <param name="prefix">Prefix to use, must provide to evaluate qualified attributes</param>
            <param name="xmlNamespace">XML namespace to apply.</param>
            <param name="index">Index if part of a node collection.</param>
            <param name="isAttribute">Whether we are accessing a element or attribute.</param>
            <returns>The qualified path.</returns>
        </member>
        <member name="P:EnergyTrading.Mapping.XPathProcessor.CurrentNamespace">
            <summary>
            Gets the current namespace we are processing for.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XPathProcessor.CurrentPath">
            <summary>
            Gets the current XPath we are processing for.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XPathProcessor.NamespaceManager">
            <summary>
            Gets the namespace manager.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XPathProcessor.XPathManager">
            <summary>
            Gets the XPath manager.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XPathProcessor.XmlNamespaceManager">
            <summary>
            Gets the internal namespace manager.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XPathProcessor.Navigator">
            <summary>
            Gets or sets the XPathNavigator we use to process XPaths.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.XDocumentXPathProcessor.Initialize(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.XDocumentXPathProcessor.Initialize(System.Xml.Linq.XDocument)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.XDocumentXPathProcessor.Initialize(System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.Mapping.XDocumentXPathProcessor.RootElement">
            <summary>
            Gets or sets the root element we use.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathProcessor.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.Mapping.LinqXPathProcessor"/> class.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathProcessor.IsNull(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathProcessor.ToBool(System.String,System.String,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathProcessor.ToInt32(System.String,System.String,System.Boolean,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathProcessor.ToInt64(System.String,System.String,System.Boolean,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathProcessor.ToDecimal(System.String,System.String,System.Boolean,System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathProcessor.ToDouble(System.String,System.String,System.Boolean,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathProcessor.ToSingle(System.String,System.String,System.Boolean,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathProcessor.ToString(System.String,System.String,System.Boolean,System.String)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathProcessor.ToEnum``1(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathProcessor.ToDateTime(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathProcessor.ToDateTimeOffset(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathProcessor.CurrentNode">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathProcessor.HasElement(System.String,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathProcessor.HasAttribute(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathProcessor.DetermineCurrentPath">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathProcessor.InitializeManagers(System.Xml.XPath.XPathNavigator)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathProcessor.Push(System.String,System.String,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathProcessor.Pop">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.LinqXPathProcessor.QualifyXPath(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.Mapping.LinqXPathProcessor.CurrentElement">
            <summary>
            Gets or sets the current element we are on.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.LinqXPathProcessor.CurrentNodes">
            <summary>
            Gets or sets the current node set we are on.
            </summary>
        </member>
        <member name="T:EnergyTrading.Mapping.Extensions.MappingExtensions">
            <summary>
            Extensions for mapping, need to be in a different namespace to avoid clashes with core classes.
            </summary>
        </member>
        <member name="T:EnergyTrading.Mapping.NamespaceManager">
            <summary>
            Implements the <see cref="T:EnergyTrading.Mapping.INamespaceManager"/> using internal dictionaries.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.NamespaceManager.RegisterNamespace(System.String,System.String)">
            <contentfrom cref="M:EnergyTrading.Mapping.INamespaceManager.RegisterNamespace(System.String,System.String)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.NamespaceManager.LookupNamespace(System.String,System.Boolean)">
            <contentfrom cref="M:EnergyTrading.Mapping.INamespaceManager.LookupNamespace(System.String,System.Boolean)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.NamespaceManager.LookupPrefix(System.String)">
            <contentfrom cref="M:EnergyTrading.Mapping.INamespaceManager.LookupPrefix(System.String)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.NamespaceManager.NamespaceExists(System.String)">
            <contentfrom cref="M:EnergyTrading.Mapping.INamespaceManager.NamespaceExists(System.String)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.NamespaceManager.PrefixExists(System.String)">
            <contentfrom cref="M:EnergyTrading.Mapping.INamespaceManager.PrefixExists(System.String)"/>
        </member>
        <member name="T:EnergyTrading.Mapping.NullPropertyBag">
            <summary>
            Records whether properties of an object were null on deserialization.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.NullPropertyBag.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.Mapping.NullPropertyBag"/> class.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.NullPropertyBag.Assigned(System.String)">
            <summary>
            Sets that the property was assigned.
            <para>
            No action if <see cref="P:EnergyTrading.Mapping.NullPropertyBag.Loading"/> is true.
            </para>
            </summary>
            <param name="name">Name of the property to assign.</param>
        </member>
        <member name="P:EnergyTrading.Mapping.NullPropertyBag.Loading">
            <summary>
            Get or set whether the property bag is in loading mode.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.NullPropertyBag.Item(System.String)">
            <summary>
            Determine whether a named property was null or not.
            </summary>
            <param name="name">Name of the property.</param>
            <returns>true if the property was not null, false otherwise.</returns>
        </member>
        <member name="T:EnergyTrading.Mapping.SimpleMapper`2">
            <summary>
            Base implementation of <see cref="T:EnergyTrading.Mapping.IMapper`2"/>.
            </summary>
            <typeparam name="TSource">Type of the source</typeparam>
            <typeparam name="TDestination">Type of the destination</typeparam>
        </member>
        <member name="M:EnergyTrading.Mapping.SimpleMapper`2.Map(`0)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IMapper`2.Map(`0)"/>
            <remarks>Override <see cref="M:EnergyTrading.Mapping.SimpleMapper`2.DefaultDestination"/> to affect behaviour if source is default/null</remarks>
        </member>
        <member name="M:EnergyTrading.Mapping.SimpleMapper`2.Map(`0,`1)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IMapper`2.Map(`0,`1)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.SimpleMapper`2.CreateDestination">
            <summary>
            Creates an instance of the destination.
            </summary>
            <returns>A new instance of the destination type.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.SimpleMapper`2.DefaultDestination">
            <summary>
            Return a default instance of the destination.
            </summary>
            <returns>A default instance of the destination type.</returns>
        </member>
        <member name="T:EnergyTrading.Mapping.ValueMapper`2">
            <summary>
            Base implementation of IMapper
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
        </member>
        <member name="M:EnergyTrading.Mapping.ValueMapper`2.Map(`0,`1)">
            <inheritdoc />
        </member>
        <member name="T:EnergyTrading.Mapping.XElementMapper`1">
            <summary>
            Extends <see cref="T:EnergyTrading.Mapping.SimpleMapper`2"/> to handle mapping from an entity to <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <typeparam name="TSource">Entity to map from</typeparam>
        </member>
        <member name="M:EnergyTrading.Mapping.XElementMapper`1.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.Mapping.XElementMapper`1"/> class.
            </summary>
            <param name="nodeName">Node name to use</param>
        </member>
        <member name="M:EnergyTrading.Mapping.XElementMapper`1.Map(`0)">
            <summary>
            Map from an entity to the XML node.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XElementMapper`1.Map(`0,System.String,System.String,System.Boolean)">
            <summary>
            Maps the source to an XElement.
            </summary>
            <param name="source"></param>
            <param name="nodeName"></param>
            <param name="xmlNamespace"></param>
            <param name="outputDefault"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XElementMapper`1.CanonicalNamespace(System.String)">
            <summary>
            Work out whether to deliver the supplied or default namespace
            </summary>
            <param name="xmlNamespace"></param>
            <returns></returns>
        </member>
        <member name="P:EnergyTrading.Mapping.XElementMapper`1.Namespace">
            <summary>
            Gets the namespace for the element.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XElementMapper`1.NamespacePrefix">
            <summary>
            Gets the namespace for the element.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XElementMapper`1.NodeName">
            <summary>
            Gets the node name for the element.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XElementMapper`1.XmlTypeNamespace">
            <summary>
            Gets the namespace of the XML type.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XElementMapper`1.XmlTypeNamespacePrefix">
            <summary>
            Gets the namespace prefix of the XML type.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XElementMapper`1.XmlType">
            <summary>
            Gets the underlying XmlType, used to emit into an xsi:Type attribute
            </summary>
        </member>
        <member name="T:EnergyTrading.Mapping.XmlConverter">
            <summary>
            XML converter to convert objects to and from XML using version detection and our XML mapping engine.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlConverter.#ctor(EnergyTrading.Mapping.IXmlVersionDetector,EnergyTrading.Mapping.IXmlMappingEngineFactory)">
            <summary>
            Create a new version of the XmlConverter.
            </summary>
            <param name="versionDetector">Version detector to use.</param>
            <param name="mappingEngineFactory">Mapping engine factory to use.</param>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlConverter.FromXml``1(System.String)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlConverter.FromXml``1(System.String)"/>
            <exception cref="T:EnergyTrading.Mapping.MappingException">Thrown if we can't parse the XML, detect version or the deserialize fails</exception>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlConverter.FromXml``1(System.Xml.Linq.XElement)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlConverter.FromXml``1(System.Xml.Linq.XElement)"/>
            <exception cref="T:EnergyTrading.Mapping.MappingException">Thrown if we can't detect version or the deserialize fails</exception>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlConverter.ToXElement``1(``0,System.String,System.Boolean)">
            <summary>
            Convert an entity to XML
            </summary>
            <param name="entity">The entity</param>
            <param name="version">The schema version of the XML to produce</param>
            <param name="localNamespaces">Declare namespaces locally versus at the top of the element</param>
            <returns>The XML string containing the order details</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlConverter.ToXml``1(``0,System.String,System.Boolean)">
            <summary>
            Convert an entity to XML
            </summary>
            <param name="entity">The entity</param>
            <param name="version">The schema version of the XML to produce</param>
            <param name="localNamespaces">Declare namespaces locally versus at the top of the element</param>
            <returns>The XML string containing the order details</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlConverter.Clear">
            <summary>
            Clear the internal state of the XmlConverter.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlConverter.CreateProcessor">
            <summary>
            Create an XPathProcessor to handle the conversion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlConverter.FromXml``1(EnergyTrading.Mapping.XPathProcessor,System.Xml.Linq.XElement)">
            <summary>
            Convert XML to an entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="processor"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:EnergyTrading.Mapping.XmlConverter.Factory">
            <summary>
            Gets the mapping engine factory.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XmlConverter.VersionDetector">
            <summary>
            Gets the version detector.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XmlConverter.NamespaceManager">
            <summary>
            Gets or sets the namespace manager.
            <para>
            This controls the registration/resolution of XML namespaces.
            </para>
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XmlConverter.XPathManager">
            <summary>
            Gets or sets the XPathManager.
            <para>
            </para>
            </summary>
        </member>
        <member name="T:EnergyTrading.Mapping.LocatorXmlMappingEngineFactory">
            <summary>
            Implementation of <see cref="T:EnergyTrading.Mapping.IXmlMappingEngineFactory"/> using <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.LocatorXmlMappingEngineFactory.Find(System.String)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlMappingEngineFactory.Find(System.String)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.LocatorXmlMappingEngineFactory.TryFind(System.String,EnergyTrading.Mapping.IXmlMappingEngine@)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlMappingEngineFactory.TryFind(System.String,EnergyTrading.Mapping.IXmlMappingEngine@)"/>
        </member>
        <member name="T:EnergyTrading.Mapping.XmlPropertyMapExpression">
            <summary>
            Fluent interface over a <see cref="T:EnergyTrading.Mapping.XmlPropertyMap"/>
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlPropertyMapExpression.#ctor(EnergyTrading.Mapping.XmlPropertyMap)">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.Mapping.XmlPropertyMapExpression"/> class.
            </summary>
            <param name="map">XmlPropertyMap to use.</param>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlPropertyMapExpression.Id">
            <summary>
            Set the <see cref="P:EnergyTrading.Mapping.XmlPropertyMap.Target"/> to <see cref="F:EnergyTrading.Mapping.XmlMapTarget.Id"/>
            </summary>
            <returns>The current XmlPropertyMapExpression.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlPropertyMapExpression.Entity">
            <summary>
            Set the <see cref="P:EnergyTrading.Mapping.XmlPropertyMap.Target"/> to <see cref="F:EnergyTrading.Mapping.XmlMapTarget.Entity"/>
            </summary>
            <returns>The current XmlPropertyMapExpression.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlPropertyMapExpression.Count">
            <summary>
            Set the <see cref="P:EnergyTrading.Mapping.XmlPropertyMap.Target"/> to <see cref="F:EnergyTrading.Mapping.XmlMapTarget.Count"/>
            </summary>
            <returns>The current XmlPropertyMapExpression.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlPropertyMapExpression.Value">
            <summary>
            Set the <see cref="P:EnergyTrading.Mapping.XmlPropertyMap.Target"/> to <see cref="F:EnergyTrading.Mapping.XmlMapTarget.Value"/>
            </summary>
            <returns>The current XmlPropertyMapExpression.</returns>
        </member>
        <member name="T:EnergyTrading.Mapping.XmlMapper`1">
            <summary>
            Base implementation of a two-way <see cref="T:EnergyTrading.Mapping.IXmlMapper`2"/> for an entity using XPath.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:EnergyTrading.Mapping.XPathMapper`1">
            <summary>
            Extends <see cref="T:EnergyTrading.Mapping.Mapper`2"/> with <see cref="T:EnergyTrading.Mapping.IXmlMapper`2"/> features.
            </summary>
            <typeparam name="TDestination">Type of entity to map.</typeparam>
        </member>
        <member name="T:EnergyTrading.Mapping.Mapper`2">
            <summary>
            Base implementation of <see cref="T:EnergyTrading.Mapping.IMapper`2"/>.
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <typeparam name="TDestination">Type of the destination</typeparam>
        </member>
        <member name="M:EnergyTrading.Mapping.Mapper`2.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.Mapping.Mapper`2"/> class.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.Mapper`2.#ctor(EnergyTrading.Mapping.IMappingEngine)">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.Mapping.Mapper`2"/> class.
            </summary>
            <param name="engine">Mapping engine used to map components</param>
        </member>
        <member name="M:EnergyTrading.Mapping.Mapper`2.CreateDestination">
            <summary>
            Creates a new instance of the target object.
            </summary>
            <returns>A new instance of the <typeparamref name="TDestination"/> object.</returns>
        </member>
        <member name="P:EnergyTrading.Mapping.Mapper`2.Engine">
            <summary>
            Gets the mapping engine to use.
            </summary>
            <remarks>Uses a null object pattern if not set.</remarks>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathMapper`1.#ctor">
            <summary>
            Create a new instance of the <see cref="T:EnergyTrading.Mapping.XPathMapper`1"/> class.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathMapper`1.#ctor(System.String)">
            <summary>
            Create a new instance of the <see cref="T:EnergyTrading.Mapping.XPathMapper`1"/> class.
            </summary>
            <param name="nodeName">Name of the node.</param>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathMapper`1.#ctor(System.String,EnergyTrading.Mapping.IXmlMappingEngine)">
            <summary>
            Create a new instance of the <see cref="T:EnergyTrading.Mapping.XPathMapper`1"/> class.
            </summary>
            <param name="nodeName">Name of the node.</param>
            <param name="engine">Mapping engine to use.</param>        
        </member>
        <member name="M:EnergyTrading.Mapping.XPathMapper`1.Map(EnergyTrading.Mapping.XPathProcessor)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Mapping.XPathMapper`1.Map(EnergyTrading.Mapping.XPathProcessor,System.String,System.String,System.Boolean)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlMapper`2.Map(`0,System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathMapper`1.EnergyTrading#Mapping#IXmlMapper{EnergyTrading#Mapping#XPathProcessor}#Map(EnergyTrading.Mapping.XPathProcessor,System.String,System.String,System.String,System.Int32)">
            NOTE: No defaults as we can't enforce implementation - caller determines passed values - C# standard
        </member>
        <member name="M:EnergyTrading.Mapping.XPathMapper`1.InitializeMap(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.String)">
            <summary>
            Initialize a XML mapping
            </summary>
            <param name="propertyExpression"></param>
            <param name="xpath"></param>
            <param name="xmlNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathMapper`1.RegisterNamespace(System.String,System.String)">
            <summary>
            Registers a namespace for later processing.
            </summary>
            <param name="xmlPrefix">Prefix to use as an alias for the XML namespace</param>
            <param name="xmlNamespace">XML namespace to register</param>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathMapper`1.RegisterNamespaces(EnergyTrading.Mapping.XPathProcessor)">
            <summary>
            Registers the namespaces against the processor if it doesn't exist
            </summary>
            <param name="source"></param>
            <returns>Empty string if no namespace, existing prefix if already defined, namespacePrefix otherwise</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathMapper`1.RegisterNamespace(EnergyTrading.Mapping.XPathProcessor,System.String,System.String)">
            <summary>
            Registers the namespace against the processor if it doesn't exist
            </summary>
            <param name="source"></param>
            <param name="xmlPrefix">Prefix to use as an alias for the XML namespace</param>
            <param name="xmlNamespace">XML namespace to register</param>
            <returns>Empty string if no namespace, existing prefix if already defined, namespacePrefix otherwise</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathMapper`1.XsiMapper(EnergyTrading.Mapping.XPathProcessor,System.String,System.String,System.String,System.Int32)">
            <summary>
            Map an entity for a particular xsi:type.
            </summary>
            <param name="source">Processor to use</param>
            <param name="nodeName">Node name to use.</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="xmlType">XML type to use</param>
            <param name="index">Index to use.</param>
            <returns>A new instance of the TDestination class mapped from the source.</returns>
        </member>
        <member name="P:EnergyTrading.Mapping.XPathMapper`1.XmlType">
            <summary>
            Gets the underlying XmlType, used to emit into an xsi:Type attribute
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XPathMapper`1.XmlTypeNamespace">
            <summary>
            Gets the namespace of the XML type.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XPathMapper`1.XmlTypeNamespacePrefix">
            <summary>
            Gets the namespace prefix of the XML type.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XPathMapper`1.Engine">
            <summary>
            Gets the XML mapping engine.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XPathMapper`1.Namespace">
            <summary>
            Gets or sets the XML namespace.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XPathMapper`1.NamespacePrefix">
            <summary>
            Gets or sets the XML namespace prefix.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XPathMapper`1.NodeName">
            <summary>
            Gets or sets the XML node name.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.Map(`0)">
            <copydocfrom cref="!:IXmlMapper&lt;T, XElement&gt;.Map(T)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.Map(`0,System.String,System.String,System.Boolean)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlMapper`2.Map(`0,System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.HasSignificantContent(`0)">
            <summary>
            Determine if the entity has any significant content, used for optional output control.
            </summary>
            <param name="entity">Entity to check.</param>
            <returns>true if we have significant content, false otherwise.</returns>
            <remarks>
            Significant content typically means that we have a non-empty node somewhere in the entity
            or its children so that it's worthwhile performing the serialization.
            </remarks>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.OptionalXElement(System.String,System.Xml.Linq.XElement[],System.String,System.Boolean)">
            <summary>
            Emit a <see cref="T:System.Xml.Linq.XElement"/> if it has contents.
            </summary>
            <param name="name">Name to use</param>
            <param name="elements">Elements to use</param>
            <param name="xmlNamespace">Namespace to use</param>
            <param name="outputDefault">Whether to output the XElement if the value is the default value of the type.</param>
            <returns>A new XElement or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.OptionalXElement(System.String,System.Collections.Generic.IList{System.Xml.Linq.XElement},System.String,System.Boolean)">
            <summary>
            Emit a <see cref="T:System.Xml.Linq.XElement"/> if it has contents.
            </summary>
            <param name="name">Name to use</param>
            <param name="elements">Elements to use</param>
            <param name="xmlNamespace">Namespace to use</param>
            <param name="outputDefault">Whether to output the XElement if the value is the default value of the type.</param>
            <returns>A new XElement or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.XAttribute(System.String,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Construct a new XAttribute for a value.
            </summary>
            <param name="name">Name of the XAttribute</param>
            <param name="value">Value of the XAttribute</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XAttribute if the value is the default value of the type.</param>
            <param name="defaultValue">The default value to compare with.</param>        
            <returns>A new XAttribute or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.XAttribute(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Construct a new XAttribute for a value.
            </summary>
            <param name="name">Name of the XAttribute</param>
            <param name="value">Value of the XAttribute</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XAttribute if the value is the default value of the type.</param>
            <param name="defaultValue">The default value to compare with.</param>        
            <returns>A new XAttribute or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.XAttribute(System.String,System.Int32,System.String,System.Boolean,System.Int32)">
            <summary>
            Construct a new XAttribute for a value.
            </summary>
            <param name="name">Name of the XAttribute</param>
            <param name="value">Value of the XAttribute</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XAttribute if the value is the default value of the type.</param>
            <param name="defaultValue">The default value to compare with.</param>        
            <returns>A new XAttribute or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.XAttribute(System.String,System.Decimal,System.String,System.Boolean,System.Decimal)">
            <summary>
            Construct a new XAttribute for a value.
            </summary>
            <param name="name">Name of the XAttribute</param>
            <param name="value">Value of the XAttribute</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XAttribute if the value is the default value of the type.</param>
            <param name="defaultValue">The default value to compare with.</param>        
            <returns>A new XAttribute or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.XAttribute(System.String,System.DateTime,System.String,System.Boolean,System.String)">
            <summary>
            Construct a new XAttribute for a value.
            </summary>
            <param name="name">Name of the XAttribute</param>
            <param name="value">Value of the XAttribute</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XAttribute if the value is the default value of the type.</param>
            <param name="format">Format to use, if null uses the invariant culture DateTimeFormatInfo</param>        
            <returns>A new XAttribute or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.XAttribute(System.String,System.DateTimeOffset,System.String,System.Boolean,System.String)">
            <summary>
            Construct a new XAttribute for a value.
            </summary>
            <param name="name">Name of the XAttribute</param>
            <param name="value">Value of the XAttribute</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XAttribute if the value is the default value of the type.</param>
            <param name="format">Format to use, if null uses the invariant culture DateTimeFormatInfo</param>        
            <returns>A new XAttribute or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.XAttribute(System.String,System.Enum,System.String,System.Boolean)">
            <summary>
            Construct a new XAttribute for a value.
            </summary>
            <param name="name">Name of the XAttribute</param>
            <param name="value">Value of the XAttribute</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XAttribute if the value is the default value of the type.</param>
            <returns>A new XAttribute or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.XAttribute(System.String,System.Object,System.String,System.Boolean,System.Object)">
            <summary>
            Construct a new XAttribute for a value.
            </summary>
            <param name="name">Name of the XAttribute</param>
            <param name="value">Value of the XAttribute</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XAttribute if the value is the default value of the type.</param>
            <param name="defaultValue">The default value to compare with.</param>
            <returns>A new XAttribute or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.XElement(System.String,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Construct a new XElement for a value.
            </summary>
            <param name="name">Name of the XElement</param>
            <param name="value">Value of the XElement</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XElement if the value is the default value of the type.</param>
            <param name="defaultValue">The default value to compare with.</param>        
            <returns>A new XElement or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.XElement(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Construct a new XElement for a value.
            </summary>
            <param name="name">Name of the XElement</param>
            <param name="value">Value of the XElement</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XElement if the value is the default value of the type.</param>
            <param name="defaultValue">The default value to compare with.</param>        
            <returns>A new XElement or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.XElement(System.String,System.Int32,System.String,System.Boolean,System.Int32)">
            <summary>
            Construct a new XElement for a value.
            </summary>
            <param name="name">Name of the XElement</param>
            <param name="value">Value of the XElement</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XElement if the value is the default value of the type.</param>
            <param name="defaultValue">The default value to compare with.</param>        
            <returns>A new XElement or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.XElement(System.String,System.Decimal,System.String,System.Boolean,System.Decimal)">
            <summary>
            Construct a new XElement for a value.
            </summary>
            <param name="name">Name of the XElement</param>
            <param name="value">Value of the XElement</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XElement if the value is the default value of the type.</param>
            <param name="defaultValue">The default value to compare with.</param>        
            <returns>A new XElement or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.XElement(System.String,System.DateTime,System.String,System.Boolean,System.String)">
            <summary>
            Construct a new XElement for a value.
            </summary>
            <param name="name">Name of the XElement</param>
            <param name="value">Value of the XElement</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XElement if the value is the default value of the type.</param>
            <param name="format">Format to use, if null uses the invariant culture DateTimeFormatInfo</param>        
            <returns>A new XElement or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.XElement(System.String,System.DateTimeOffset,System.String,System.Boolean,System.String)">
            <summary>
            Construct a new XElement for a value.
            </summary>
            <param name="name">Name of the XElement</param>
            <param name="value">Value of the XElement</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XElement if the value is the default value of the type.</param>
            <param name="format">Format to use, if null uses the invariant culture DateTimeFormatInfo</param>
            <returns>A new XElement or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.XElement(System.String,System.Enum,System.String,System.Boolean)">
            <summary>
            Construct a new XElement for a value.
            </summary>
            <param name="name">Name of the XElement</param>
            <param name="value">Value of the XElement</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XElement if the value is the default value of the type.</param>
            <returns>A new XElement or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.XElement(System.String,System.Object,System.String,System.Boolean,System.Object)">
            <summary>
            Construct a new XElement for a value.
            </summary>
            <param name="name">Name of the XElement</param>
            <param name="value">Value of the XElement</param>
            <param name="xmlNamespace">XML namespace to use.</param>
            <param name="outputDefault">Whether to output the XElement if the value is the default value of the type.</param>
            <param name="defaultValue">The default value to compare with.</param>
            <returns>A new XElement or null depending on value/outputDefault.</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.XmiTypeAttribute(System.String,System.String)">
            <summary>
            Construct an XAttribute for the XML type declaration.
            </summary>
            <param name="xmlType"></param>
            <param name="xmlTypeNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.CanonicalAttributeNamespace(System.String)">
            <summary>
            By default attributes are not in the default namespace
            </summary>
            <param name="xmlNamespace">Namespace to use</param>
            <returns>Supplied namespace if <see cref="P:EnergyTrading.Mapping.XmlMapper`1.AttributeDefaultNamespace"/> is true, <see cref="M:EnergyTrading.Mapping.XmlMapper`1.CanonicalNamespace(System.String)"/> otherwise</returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMapper`1.CanonicalNamespace(System.String)">
            <summary>
            Work out whether to deliver the supplied or default namespace
            </summary>
            <param name="xmlNamespace"></param>
            <returns></returns>
        </member>
        <member name="P:EnergyTrading.Mapping.XmlMapper`1.AttributeDefaultNamespace">
            <summary>
            Gets or sets whether attributes use the default namespace.
            </summary>
        </member>
        <member name="T:EnergyTrading.Mapping.XmlMappingEngine">
            <summary>
            Used to map to and from XML
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMappingEngine.#ctor(EnergyTrading.Mapping.IXmlMapperFactory)">
            <summary>
            Create a new instance of the <see cref="T:EnergyTrading.Mapping.XmlMappingEngine"/> class.
            </summary>
            <param name="factory">Factory to use.s</param>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMappingEngine.CreateDocument``1(``0)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlMappingEngine.CreateDocument``1(``0)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMappingEngine.LookupPrefix(System.String)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlMappingEngine.LookupPrefix(System.String)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMappingEngine.Map``2(``0)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IMappingEngine.Map``2(``0)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMappingEngine.Map``2(System.Collections.Generic.IEnumerable{``0})">
            <copydocfrom cref="M:EnergyTrading.Mapping.IMappingEngine.Map``2(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMappingEngine.Map``1(``0,System.String,System.String,System.Boolean,System.Boolean)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlMappingEngine.Map``1(``0,System.String,System.String,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMappingEngine.Map``2(``0,``1)">
            <copydocfrom cref="!:IXmlMappingEngine.Map&lt;T, D&gt;(T, D)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMappingEngine.Map``2(``0,System.String,System.String,System.String,System.String,System.Int32)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlMappingEngine.Map``2(``0,System.String,System.String,System.String,System.String,System.Int32)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMappingEngine.MapList``2(``0,System.String,System.Boolean)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlMappingEngine.MapList``2(``0,System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMappingEngine.MapList``2(``0,System.String,System.String,System.Boolean)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlMappingEngine.MapList``2(``0,System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMappingEngine.MapList``2(``0,System.String,System.String,System.String,System.String,System.Boolean)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlMappingEngine.MapList``2(``0,System.String,System.String,System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMappingEngine.MapList``2(System.Collections.Generic.IList{``0},System.String,System.Boolean)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlMappingEngine.MapList``2(System.Collections.Generic.IList{``0},System.String,System.String,System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMappingEngine.MapList``2(System.Collections.Generic.IList{``0},System.String,System.String,System.Boolean)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlMappingEngine.MapList``2(System.Collections.Generic.IList{``0},System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMappingEngine.MapList``2(System.Collections.Generic.IList{``0},System.String,System.String,System.String,System.String,System.Boolean)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlMappingEngine.MapList``2(System.Collections.Generic.IList{``0},System.String,System.String,System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMappingEngine.RegisterMap``2(EnergyTrading.Mapping.IMapper{``0,``1},System.String)">
            <summary>
            Register a <see cref="T:EnergyTrading.Mapping.IXmlMapper`2"/> to use.
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <typeparam name="TDestination">Type of the destination.</typeparam>
            <param name="mapper">The mapper to register</param>
            <param name="name">Name of the mapper</param>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMappingEngine.RegisterNamespace(System.String,System.String)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlMappingEngine.RegisterNamespace(System.String,System.String)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMappingEngine.RegisterXmlType(System.String,System.String,System.Type)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlMappingEngine.RegisterXmlType(System.String,System.String,System.Type)"/>        
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMappingEngine.Mapper``2(System.String)">
            <summary>
            Gets a <see cref="T:EnergyTrading.Mapping.IXmlMapper`2"/>
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <typeparam name="TDestination">Type of the destination.</typeparam>
            <param name="name">Name of the mapper</param>
            <returns>A <see cref="T:EnergyTrading.Mapping.IXmlMapper`2"/></returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMappingEngine.Mapper``2(System.String,System.String)">
            <summary>
            Gets a <see cref="T:EnergyTrading.Mapping.IXmlMapper`2"/> for an XML type.
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <typeparam name="TDestination">Type of the destination.</typeparam>
            <param name="xmlNamespace">Namespace of the XML type</param>
            <param name="xmlType">XML type of the <typeparamref name="TSource"/></param>
            <returns>A <see cref="T:EnergyTrading.Mapping.IXmlMapper`2"/></returns>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlMappingEngine.Mapper(System.Type,System.Type,System.String)">
            <summary>
            Gets a <see cref="T:EnergyTrading.Mapping.IXmlMapper`2"/>
            </summary>
            <param name="source">Type of the source.</param>
            <param name="destination">Type of the destination.</param>
            <param name="name">Name of the mapper</param>
            <returns>A <see cref="T:EnergyTrading.Mapping.IXmlMapper`2"/></returns>
        </member>
        <member name="P:EnergyTrading.Mapping.XmlMappingEngine.Context">
            <copydocfrom cref="P:EnergyTrading.Mapping.IMappingEngine.Context"/>
        </member>
        <member name="P:EnergyTrading.Mapping.XmlMappingEngine.NamespaceManager">
            <summary>
            Gets the namespace manager used for handling namespaces and their prefixes
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XmlMappingEngine.XmlNamespaceManager">
            <summary>
            Gets the internal namespace manager.
            </summary>
        </member>
        <member name="T:EnergyTrading.Mapping.XmlMapTarget">
            <summary>
            Type of the mapping between an object and XML.
            </summary>
        </member>
        <member name="T:EnergyTrading.Mapping.XmlPropertyMap">
            <summary>
            Records a mapping between a <see cref="T:System.Reflection.PropertyInfo"/> and a <see cref="T:EnergyTrading.Mapping.XmlMapTarget"/>
            <para>
            Provides sufficient information to achieve a two-way mapping between an object and XML.
            </para>
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlPropertyMap.#ctor(System.Reflection.PropertyInfo,EnergyTrading.Mapping.XmlMapTarget)">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.Mapping.XmlPropertyMap"/> class.
            </summary>
            <param name="info">PropertyInfo to use.</param>
            <param name="target"></param>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlPropertyMap.FromXml(EnergyTrading.Mapping.XPathProcessor,System.Object)">
            <summary>
            Uses a <see cref="T:EnergyTrading.Mapping.XPathProcessor"/> to populate an object based on the mapping.
            </summary>
            <param name="processor">XPathProcessor to use</param>
            <param name="value">Object to populate</param>
        </member>
        <member name="P:EnergyTrading.Mapping.XmlPropertyMap.Info">
            <summary>
            Gets the property for the mapping.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XmlPropertyMap.Target">
            <summary>
            Gets the mapping target type
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.XmlPropertyMap.XPath">
            <summary>
            Gets the XPath to be used to do the mapping
            </summary>
        </member>
        <member name="T:EnergyTrading.Mapping.XmlVersionDetector">
            <summary>
            Decorator version of an <see cref="T:EnergyTrading.Mapping.IXmlVersionDetector"/>.
            Takes an array of version detectors and asks each one until it finds one 
            who responds or the list is exhausted.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlVersionDetector.#ctor(EnergyTrading.Mapping.IXmlVersionDetector[])">
            <summary>
            Creates a new instance of the XmlVersionDetector class.
            </summary>
            <param name="detectors"></param>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlVersionDetector.DetectSchemaVersion(System.String)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlVersionDetector.DetectSchemaVersion(System.String)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XmlVersionDetector.DetectSchemaVersion(System.Xml.Linq.XElement)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXmlVersionDetector.DetectSchemaVersion(System.Xml.Linq.XElement)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathExtensions.ToValue``1(System.Xml.XPath.XPathNavigator,System.Xml.XmlNamespaceManager,System.String,System.Func{System.Xml.XPath.XPathNodeIterator,``0},``0)">
            <summary>
            Get the value of the node.
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="navigator">Navigator to use</param>
            <param name="manager">Namespace manager to use</param>
            <param name="xpath">Relative Xpath to use</param>
            <param name="valueSelector">Value selector to use</param>
            <param name="defaultValue">Default value to use</param>
            <returns></returns>
        </member>
        <member name="T:EnergyTrading.Mapping.XPathManager">
            <summary>
            Computes the qualified XPath for use in XPath queries.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathManager.#ctor(EnergyTrading.Mapping.INamespaceManager)">
            <summary>
            Creates a new instance of the XPathManager class.
            </summary>
            <param name="namespaceManager">Namespace manager to use.</param>
        </member>
        <member name="M:EnergyTrading.Mapping.XPathManager.QualifyXPath(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IXPathManager.QualifyXPath(System.String,System.String,System.String,System.Int32,System.Boolean)"/>
        </member>
        <member name="T:EnergyTrading.Registrars.MapperArea">
            <summary>
            An area and version of mappers used to control registration of mappers     
            </summary>
        </member>
        <member name="P:EnergyTrading.Registrars.MapperArea.Area">
            <summary>
            Gets or sets the Area name property.
            <para>
            This corresponds to the partial namespace that will be adopted.
            </para>
            </summary>
        </member>
        <member name="P:EnergyTrading.Registrars.MapperArea.Version">
            <summary>
            Gets or sets the major version number that is supported.
            <para>
            Version numbers are inclusive, i.e. version 2 includes version 1
            so that only changed mappers need to be implemented at each new version.
            </para>
            </summary>
        </member>
        <member name="P:EnergyTrading.Registrars.MapperArea.AllowedMinorVersions">
            <summary>
            Gets or sets the allowed minor versions.
            <para>
            Normally you would include all versions e.g. if we are on 2.3, the allowed minor
            versions would be 2.3, 2.2 and 2.1.
            </para>
            <para>
            However, we sometimes include breaking changes in minor releases, this allows
            us to control whether these minor releases are included in a versioned engine.
            </para>
            </summary>
        </member>
        <member name="T:EnergyTrading.Search.SearchBuilder">
            <summary>
            Little fluent interface for creating searches
            </summary>
        </member>
        <member name="T:EnergyTrading.Container.IContainerContext">
            <summary>
            Simple abstraction layer over containers so we can register without knowing the container
            </summary>
        </member>
        <member name="M:EnergyTrading.Container.IContainerContext.Release(System.Object)">
            <summary>
            Release a component instance.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="T:EnergyTrading.Data.Dao">
            <copydocfrom cref="T:EnergyTrading.Data.IDao"/>
        </member>
        <member name="T:EnergyTrading.Data.IDao">
            <summary>
            Provides calling methods against the database with SQL
            </summary>
        </member>
        <member name="M:EnergyTrading.Data.IDao.ExecuteNonQuery(System.String,System.Int32)">
            <summary>
            Execute a non-query action against the database.
            </summary>
            <param name="sql">SQL command to execute</param>
            <param name="timeout">Execution timeout in seconds.</param>
        </member>
        <member name="P:EnergyTrading.Data.IDao.Connection">
            <summary>
            Gets underlying connection.
            </summary>
            <remarks>
            By exposing this, we can use the <see cref="T:System.Data.IDbConnection"/> factory methods
            for creating commands, parameters etc.
            </remarks>
        </member>
        <member name="M:EnergyTrading.Data.Dao.#ctor(System.Data.IDbConnection)">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.Data.Dao"/> class.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:EnergyTrading.Data.Dao.ExecuteNonQuery(System.String,System.Int32)">
            <copydocfrom cref="M:EnergyTrading.Data.IDao.ExecuteNonQuery(System.String,System.Int32)"/>
        </member>
        <member name="P:EnergyTrading.Data.Dao.Connection">
            <copydocfrom cref="P:EnergyTrading.Data.IDao.Connection"/>
        </member>
        <member name="T:EnergyTrading.Data.IIdentifiable">
            <summary>
            An entity that has a unique identity.
            </summary>
        </member>
        <member name="P:EnergyTrading.Data.IIdentifiable.Id">
            <summary>
            Get the identity.
            </summary>
        </member>
        <member name="T:EnergyTrading.Data.IQueryFactory">
            <summary>
            Converts searches into executable queries.
            </summary>
        </member>
        <member name="M:EnergyTrading.Data.IQueryFactory.CreateQuery(EnergyTrading.Contracts.Search.Search)">
            <summary>
            Create a query.
            </summary>
            <param name="search">Search to use</param>
            <returns>Query string executable by the engine.</returns>
        </member>
        <member name="T:EnergyTrading.Data.IRepository">
            <summary>
            Provides persistence methods for entities.
            </summary>
        </member>
        <member name="M:EnergyTrading.Data.IRepository.FindOne``1(System.Object)">
            <summary>
            Find an entity based on its primary key.
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="id">Primary key</param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Data.IRepository.Queryable``1">
            <summary>
            Get the entities.
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Data.IRepository.Add``1(``0)">
            <summary>
            Add an entity.
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="entity">Entity to use</param>
        </member>
        <member name="M:EnergyTrading.Data.IRepository.Delete``1(``0)">
            <summary>
            Delete an entity
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="entity">Entity to use</param>
        </member>
        <member name="M:EnergyTrading.Data.IRepository.Evict``1(``0)">
            <summary>
            Evict an entity from the current repository, does not affect the database, just the in-memory copy.
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="entity">Entity to use</param>
        </member>
        <member name="M:EnergyTrading.Data.IRepository.Save``1(``0)">
            <summary>
            Save an entity.
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="entity">Entity to use</param>
        </member>
        <member name="M:EnergyTrading.Data.IRepository.Flush">
            <summary>
            Flush changes to the database.
            <para>
            Performs validation, but will not actually commit if inside a <see cref="T:System.Transactions.TransactionScope"/>
            </para>
            </summary>
        </member>
        <member name="T:EnergyTrading.Data.QueryFactory">
            <copydocfrom cref="T:EnergyTrading.Data.IQueryFactory"/>
        </member>
        <member name="M:EnergyTrading.Data.QueryFactory.CreateQuery(EnergyTrading.Contracts.Search.Search)">
            <copydocfrom cref="M:EnergyTrading.Data.IQueryFactory.CreateQuery(EnergyTrading.Contracts.Search.Search)"/>
        </member>
        <member name="T:EnergyTrading.DateRange">
            <summary>
            Represents a period of time
            </summary>
            <remarks>Only a class due to EF!</remarks>
        </member>
        <member name="M:EnergyTrading.DateRange.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            Initializes a new instance of the DateRange class.
            </summary>
            <param name="start"></param>
            <param name="span"></param>
        </member>
        <member name="M:EnergyTrading.DateRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the DateRange class.
            </summary>
            <param name="start"></param>
            <param name="finish"></param>
        </member>
        <member name="M:EnergyTrading.DateRange.SpecifyKind(EnergyTrading.DateRange,System.DateTimeKind)">
            <summary>
            Create a new DateRange object that represents the same period but is designated in either local or UTC time.
            </summary>
            <param name="range"></param>
            <param name="kind"></param>
        </member>
        <member name="M:EnergyTrading.DateRange.ChangeStart(System.TimeSpan)">
            <summary>
            Returns a new <see cref="T:EnergyTrading.DateRange"/> with the start date modified by the
            specified amount and the original finish date.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.DateRange.ChangeStart(System.DateTime)">
            <summary>
            Returns a new <see cref="T:EnergyTrading.DateRange"/> with the specified start date and the 
            original finish date.
            </summary>
            <param name="value">The new start date</param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.DateRange.ChangeFinish(System.DateTime)">
            <summary>
            Returns a new <see cref="T:EnergyTrading.DateRange"/> with the original start date and the 
            specified finish date.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.DateRange.ChangeFinish(System.TimeSpan)">
            <summary>
            Returns a new <see cref="T:EnergyTrading.DateRange"/> with the original start date and the 
            finish date modified by the specified amount.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.DateRange.Contiguous(EnergyTrading.DateRange)">
            <summary>
            Is the value contiguous to the original within 1 second.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.DateRange.Contiguous(EnergyTrading.DateRange,System.TimeSpan)">
            <summary>
            Is the value contiguous to the original within the specified interval
            </summary>
            <param name="value"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.DateRange.Difference">
            <summary>
            Return the difference in years, months and days
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.DateRange.Union(EnergyTrading.DateRange)">
            <summary>
            Returns the union of the two period.
            </summary>
            <param name="value"></param>
            <returns>
            this when !value.HasValue
            value when !this.HasValue
            NoValueDateRange when this.Disjoint(value)
            the union value otherwise.
            </returns>
        </member>
        <member name="M:EnergyTrading.DateRange.Intersect(EnergyTrading.DateRange)">
            <summary>
            Returns the intersection of the two periods.
            </summary>
            <param name="value"></param>
            <returns>the intersecting period or <see cref="P:EnergyTrading.DateRange.NoValueDateRange"/> if either do not have a value.</returns>
        </member>
        <member name="M:EnergyTrading.DateRange.Contains(System.DateTime)">
            <summary>
            Is the date contained within the <see cref="T:EnergyTrading.DateRange"/>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.DateRange.Contains(EnergyTrading.DateRange)">
            <summary>
            Is the period wholly contained within the <see cref="T:EnergyTrading.DateRange"/>
            The end points of the period are considered to be in the period.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.DateRange.Overlaps(EnergyTrading.DateRange)">
            <summary>
            Do the two periods overlap at all.
            </summary>
            <remarks>
            We can have both <c>!period.Disjoint(value)</c> and <c>!period.Overlaps(value)</c> if
            either of period or value have !HasValue.
            </remarks>
            <param name="value"></param>
            <returns>true if the periods overlap, false otherwise</returns>
        </member>
        <member name="M:EnergyTrading.DateRange.Disjoint(EnergyTrading.DateRange)">
            <summary>
            Are the two periods entirely disjoint.
            </summary>
            <remarks>
            We can have both <c>!period.Disjoint(value)</c> and <c>!period.Overlaps(value)</c> if
            either of period or value have !HasValue.
            </remarks>
            <param name="value"></param>
            <returns>true if the periods do not overlap, false otherwise.</returns>
        </member>
        <member name="M:EnergyTrading.DateRange.DetermineState">
            <summary>
            Calculate the state of the current time with respect to the date range.
            </summary>
            <returns>The <see cref="T:EnergyTrading.DateRangeState"/> that applies.</returns>
        </member>
        <member name="M:EnergyTrading.DateRange.DetermineState(System.DateTime)">
            <summary>
            Calculate the state of a specified date with respect to the date range.
            </summary>
            <param name="value"></param>
            <returns>The <see cref="T:EnergyTrading.DateRangeState"/> that applies.</returns>
        </member>
        <member name="M:EnergyTrading.DateRange.Equals(System.Object)">
            <summary>
            Return whether the values are equal.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.DateRange.Equals(EnergyTrading.DateRange)">
            <summary>
            Return whether the values are equal.
            </summary>
            <param name="other"></param>
            <returns>false if other is null, otherwise true if Start/Finish are equal, otherwise false</returns>
        </member>
        <member name="M:EnergyTrading.DateRange.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnergyTrading.DateRange.Duration">
            <summary>
            Get the duration of the date range
            </summary>
        </member>
        <member name="P:EnergyTrading.DateRange.NoValueDateRange">
            <summary>
            A date range that has no value.
            </summary>
        </member>
        <member name="P:EnergyTrading.DateRange.MaxDateRange">
            <summary>
            A DateRange that is is the largest that we can represent.
            </summary>
        </member>
        <member name="P:EnergyTrading.DateRange.Start">
            <summary>
            Gets the start DateTime of the period.
            </summary>
        </member>
        <member name="P:EnergyTrading.DateRange.Finish">
            <summary>
            Gets the end DateTime of the period.
            </summary>
        </member>
        <member name="P:EnergyTrading.DateRange.Kind">
            <summary>
            Gets the DateTimeKind of the range
            </summary>
        </member>
        <member name="P:EnergyTrading.DateRange.HasValue">
            <summary>
            Gets whether the period has a value.
            </summary>
        </member>
        <member name="T:EnergyTrading.DateRangeState">
            <summary>
            The state of a date range
            </summary>
        </member>
        <member name="M:EnergyTrading.DateUtility.Round(System.DateTime)">
            <summary>
            Returns a date between <see cref="P:EnergyTrading.DateUtility.MinDate"/> and <see cref="P:EnergyTrading.DateUtility.MaxDate"/> rounded to database precision.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:EnergyTrading.DateUtility.DefaultDate">
            <summary>
            A default date to use in the application
            </summary>
            <remarks>Configured by Dates.Default, and defaults to MinDate if not set</remarks>
        </member>
        <member name="P:EnergyTrading.DateUtility.MinDate">
            <summary>
            Gets the MinDate property.
            <para>
            The minimum business date supported by the system.
            </para>
            </summary>
        </member>
        <member name="P:EnergyTrading.DateUtility.MaxDate">
            <summary>
            Gets the MaxDate property.
            <para>
            The maximum business date supported by the system.
            </para>
            </summary>
        </member>
        <member name="T:EnergyTrading.Extensions.ReflectionExtension">
            <summary>
            Extension methods to help with reflection.
            </summary>
        </member>
        <member name="M:EnergyTrading.Extensions.ReflectionExtension.IfNullCreate``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1})">
            <summary>
            Creates an instance and sets the property value if it is null 
            Returns the property value
            </summary>
            <typeparam name="TParent">The type of the parent object</typeparam>
            <typeparam name="TChild">The type of the child property</typeparam>
            <param name="parent">An instance of the parent</param>
            <param name="expression">Expression to obtain the property from the Parent (e.g. parent => parent.Property)</param>
            <param name="createFunction">Function used to create an instance of TChild (if required)</param>
            <returns>The instance of TChild set into the property</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.ReflectionExtension.IfNullCreate``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Simplified version of IfNullCreate for use when child item has a default constructor
            </summary>
            <typeparam name="TParent">The type of the parent object</typeparam>
            <typeparam name="TChild">The type of the child property</typeparam>
            <param name="parent">An instance of the parent</param>
            <param name="expression">Expression to obtain the property from the Parent (e.g. parent => parent.Property)</param>
            <returns>The instance of TChild set into the property</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.ReflectionExtension.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Unwrap an Expression to get to the appropriate PropertyInfo.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Extensions.ReflectionExtension.GetMemberExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Unwrap an Expression to determine the appropriate MemberExpression.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Extensions.TypeExtensions.GetAttribute``1(System.Type)">
            <summary>
            Gets type attribute.
            </summary>
            <typeparam name="TAttr">Type of the attribute.</typeparam>
            <param name="type">Target type.</param>
            <returns>Attribute value</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.TypeExtensions.DecoratedWith``1(System.Type)">
            <summary>
            Determines whether type is decorated with specified attribute
            </summary>
            <typeparam name="TAttr">Type of the attribute.</typeparam>
            <param name="type">Target type.</param>
            <returns>True if type is decorated with specified attribute, otherwise false</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.TypeExtensions.Implements``1(System.Type)">
            <summary>
            Determines whether type implements specified interface
            </summary>
            <typeparam name="TContract">Type of the interface.</typeparam>
            <param name="type">Target type.</param>
            <returns>True if type implements specified interface, otherwise false</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.TypeExtensions.Implements(System.Type,System.Type)">
            <summary>
            Determines whether type implements specified interface
            </summary>
            <param name="type">Target type.</param>
            <param name="contract">Type of the interface.</param>
            <returns>True if type implements specified interface, otherwise false</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.TypeExtensions.ImplementsOpenGeneric(System.Type,System.Type)">
            <summary>
            Determines whether type implements interface that can be constructed from specified open-generic interface
            </summary>
            <param name="type">Target type.</param>
            <param name="contract">Type of the open-generic interface.</param>
            <returns>True if type implements interface that can be constructed from specified open-generic interface, otherwise false</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.TypeExtensions.IsNullableType(System.Type)">
            <summary>
            Is the type a nullable type?
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Extensions.TypeExtensions.CreateInstance``1(System.String,System.Func{System.String,System.Type})">
            <summary>
            Creates an instance of an object from a type name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="typeName"></param>
            <param name="getType"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Extensions.TypeExtensions.CreateInstance``1(System.Type)">
            <summary>
            Creates an instance of an object from a type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Extensions.TypeExtensions.GetAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Get an attribute from a member/property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Extensions.TypeExtensions.GetAttributes``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Get all attributes of the specified type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Extensions.TypeExtensions.HasAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Check whether a member/property has an attribute defined.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Extensions.TypeExtensions.SupportsGenericInterface(System.Type,System.Type)">
            <summary>
            Check if a type supports a generic interface
            </summary>
            <param name="type"></param>
            <param name="candidate"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Extensions.TypeExtensions.GenericInterfaces(System.Type)">
            <summary>
            Returns the generic interfaces that a type implements
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Extensions.TypeExtensions.SimpleCheck``1(System.Type)">
            <summary>
            Checks that the type supports the specified type and is not abstract
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">Type to check</param>
            <returns>true if the type passes the test, false otherwise</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.TypeExtensions.SimpleCheck(System.Type,System.Type)">
            <summary>
            Checks that the type supports the specified type and is not abstract
            </summary>
            <param name="type">Type to support</param>
            <param name="candidate">Type to check</param>
            <returns>true if the type passes the test, false otherwise</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.TypeExtensions.GenericCheck(System.Type,System.Type)">
            <summary>
            Checks that the type supports the specified generic type and is not generic or abstract
            </summary>
            <param name="type">Type to support</param>
            <param name="candidate">Type to check</param>
            <returns>true if the type passes the test, false otherwise</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.TypeExtensions.ToType(System.String,System.Func{System.String,System.Type})">
            <summary>
            Converts a type string into a type.
            </summary>
            <param name="typeName">Fully qualified name of the type, including assembly</param>
            <param name="getType">Type resolver, defaults to Type.GetType if null.</param>
            <returns>null if type not specified, type instance otherwise</returns>
        </member>
        <member name="M:EnergyTrading.Extensions.TypeExtensions.MakePartialGenericType(System.Type,System.Type[])">
            <summary>
            Allows partially open generic types to be constructed.
            </summary>
            <param name="type"></param>
            <param name="typeArguments"></param>
            <returns></returns>
        </member>
        <member name="T:EnergyTrading.Mapping.SimpleMappingEngine">
            <summary>
            Simple mapping engine, all mappers are explicitly registered or found via ServiceLocator
            </summary>
        </member>
        <member name="M:EnergyTrading.Mapping.SimpleMappingEngine.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Create a new instance of the <see cref="T:EnergyTrading.Mapping.SimpleMappingEngine"/> class.
            </summary>
            <param name="locator"></param>
        </member>
        <member name="M:EnergyTrading.Mapping.SimpleMappingEngine.Map``2(``0)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IMappingEngine.Map``2(``0)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.SimpleMappingEngine.Map``2(System.Collections.Generic.IEnumerable{``0})">
            <copydocfrom cref="M:EnergyTrading.Mapping.IMappingEngine.Map``2(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:EnergyTrading.Mapping.SimpleMappingEngine.Map``2(``0,``1)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IMappingEngine.Map``2(``0,``1)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.SimpleMappingEngine.RegisterMap``2(EnergyTrading.Mapping.IMapper{``0,``1},System.String)">
            <copydocfrom cref="M:EnergyTrading.Mapping.IMappingEngine.RegisterMap``2(EnergyTrading.Mapping.IMapper{``0,``1},System.String)"/>
        </member>
        <member name="M:EnergyTrading.Mapping.SimpleMappingEngine.Mapper``2(System.String)">
            <summary>
            Determine the mapper to use.
            </summary>
            <typeparam name="TSource">Type of the source</typeparam>
            <typeparam name="TDestination">Type of the destination</typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Mapping.SimpleMappingEngine.Mapper(System.Type,System.Type,System.String)">
            <summary>
            Determine the mapper to use
            </summary>
            <param name="source">Type of the source</param>
            <param name="destination">Type of the destination</param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:EnergyTrading.Mapping.SimpleMappingEngine.CacheMappers">
            <summary>
            Get or sets whether we cache mappers that we resolve.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mapping.SimpleMappingEngine.Context">
            <copydocfrom cref="P:EnergyTrading.Mapping.IMappingEngine.Context"/>
        </member>
        <member name="T:EnergyTrading.ServiceModel.Channels.FeedBodyWriter">
            <summary>
            A <see cref="T:System.ServiceModel.Channels.BodyWriter"/> that can handle syndication feeds.
            </summary>
        </member>
        <member name="M:EnergyTrading.ServiceModel.TcpBindingUtility.#cctor">
            <summary>
            Static initializer for default values in each build configuration.
            </summary>
        </member>
        <member name="P:EnergyTrading.ServiceModel.TcpBindingUtility.MaxConnections">
            <summary>
            Client: maximum connections to be pooled for reuse.
            Server: maximum connections allowed to be pending dispatch.
            </summary>
        </member>
        <member name="P:EnergyTrading.ServiceModel.TcpBindingUtility.MaxReceivedMessageSize">
            <summary>
            The default is 65,536 bytes.
            </summary>
        </member>
        <member name="P:EnergyTrading.ServiceModel.TcpBindingUtility.MaxBufferPoolSize">
            <summary>
            The default is 65,536 bytes
            </summary>
        </member>
        <member name="T:EnergyTrading.Services.IStartable`1">
            <summary>
            Interface to start and stop services
            </summary>
            <typeparam name="T">Type that is started.</typeparam>
        </member>
        <member name="M:EnergyTrading.Services.IStartable`1.Start">
            <summary>
            Starts the object, generally this MUST be called on a object that implements this interface
            </summary>
            <returns>An instance of the started object.</returns>
        </member>
        <member name="M:EnergyTrading.Services.IStartable`1.Stop">
            <summary>
            Stops a object that can be started
            </summary>
        </member>
        <member name="T:EnergyTrading.Services.ITypeResolver">
            <summary>
            Resolves instances of .NET types, allows us to abstract from <see cref="T:System.Activator"/> to
            potentially use a factory or some other means.
            </summary>
        </member>
        <member name="M:EnergyTrading.Services.ITypeResolver.Resolve``1(System.String)">
            <summary>
            Locate an object based on a type name
            </summary>
            <typeparam name="T">Type we are resolving</typeparam>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Services.ITypeResolver.Resolve``1(System.Type)">
            <summary>
            Locate an object based on a type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:EnergyTrading.Services.TypeResolver">
            <summary>
            Simple type resolver that uses a functor to resolve types.
            </summary>
        </member>
        <member name="M:EnergyTrading.Services.TypeResolver.Resolve``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Services.TypeResolver.Resolve``1(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:EnergyTrading.Threading.CancellationTokenOwner">
            <inheritdoc />
        </member>
        <member name="T:EnergyTrading.Threading.ICancellationTokenOwner">
            <summary>
            Abstraction over <see cref="T:System.Threading.CancellationTokenSource">CancellationTokenSource</see> that is can be reset.
            </summary>
        </member>
        <member name="M:EnergyTrading.Threading.ICancellationTokenOwner.Cancel">
            <summary>
            Communicates a request for cancellation.
            </summary> 
            <remarks>
            <para> 
            The associated <see cref="T:System.Threading.CancellationToken"/> will be 
            notified of the cancellation and will transition to a state where
            <see cref="P:System.Threading.CancellationToken.IsCancellationRequested">IsCancellationRequested</see> returns true. 
            Any callbacks or cancelable operations
            registered with the <see cref="T:System.Threading.CancellationToken"/>  will be executed.
            </para>
            <para> 
            Cancelable operations and callbacks registered with the token should not throw exceptions.
            However, this overload of Cancel will aggregate any exceptions thrown into a <see cref="T:System.AggregateException"/>, 
            such that one callback throwing an exception will not prevent other registered callbacks from being executed. 
            </para>
            <para> 
            The <see cref="T:System.Threading.ExecutionContext"/> that was captured when each callback was registered
            will be reestablished when the callback is invoked.
            </para>
            </remarks> 
            <exception cref="T:System.AggregateException">An aggregate exception containing all the exceptions thrown
            by the registered callbacks on the associated <see cref="T:System.Threading.CancellationToken"/>.</exception> 
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Threading.CancellationTokenSource"/> has been disposed.</exception>
        </member>
        <member name="M:EnergyTrading.Threading.ICancellationTokenOwner.Reset">
            <summary>
            Resets the cancellation token owner, subsequent calls to <see cref="P:EnergyTrading.Threading.ICancellationTokenOwner.Token"/> will return a new value.
            </summary>
            <remarks>
            Will throw an exception if called before Cancel is invoke - this is to avoid losing the
            underlying CancellationTokenSource which is not make public.
            </remarks>
        </member>
        <member name="P:EnergyTrading.Threading.ICancellationTokenOwner.Token">
            <summary>
            Gets the <see cref="T:System.Threading.CancellationToken">CancellationToken</see> 
            associated with this <see cref="T:EnergyTrading.Threading.ICancellationTokenOwner"/>. 
            </summary>
        </member>
        <member name="P:EnergyTrading.Threading.ICancellationTokenOwner.IsCancellationRequested">
            <summary> 
            Gets whether cancellation has been requested for this <see cref="T:EnergyTrading.Threading.ICancellationTokenOwner">ICancellationTokenOwner</see>.
            </summary>
            <value>Whether cancellation has been requested for this <see cref="T:EnergyTrading.Threading.ICancellationTokenOwner">ICancellationTokenOwner</see>.</value>
            <remarks> 
            <para> 
            This property indicates whether cancellation has been requested for this token source, e.g.
            due to a call to its <see cref="M:EnergyTrading.Threading.ICancellationTokenOwner.Cancel">Cancel</see> method.
            </para>
            <para>
            If this property returns true, it only guarantees that cancellation has been requested. It does not 
            guarantee that every handler registered with the corresponding token has finished executing, nor
            that cancellation requests have finished propagating to all registered handlers. Additional 
            synchronization may be required, particularly in situations where related objects are being 
            canceled concurrently.
            </para> 
            </remarks>
        </member>
        <member name="M:EnergyTrading.Threading.CancellationTokenOwner.Cancel">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Threading.CancellationTokenOwner.Reset">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Thrown if the underlying CancellationTokenSource has not been cancelled.</exception>
        </member>
        <member name="P:EnergyTrading.Threading.CancellationTokenOwner.Token">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.Threading.CancellationTokenOwner.IsCancellationRequested">
            <inheritdoc />
        </member>
        <member name="T:EnergyTrading.Validation.ChildCollectionRule`2">
            <summary>
            Applies a validator to each member of a child collection
            </summary>
            <typeparam name="TParent"></typeparam>
            <typeparam name="TChild"></typeparam>
        </member>
        <member name="T:EnergyTrading.Validation.ValidatorRule`1">
            <summary>
            A rule used for invoking child validators
            </summary>
            <typeparam name="T">Type we are validating.</typeparam>
        </member>
        <member name="M:EnergyTrading.Validation.ValidatorRule`1.IsValid(`0)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Validation.ValidatorRule`1.EnergyTrading#Validation#IRule#IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.Validation.ValidatorRule`1.Errors">
            <summary>
            Gets the list of rule violations.
            </summary>
        </member>
        <member name="P:EnergyTrading.Validation.ValidatorRule`1.Message">
            <summary>
            Get the error message.
            </summary>
        </member>
        <member name="T:EnergyTrading.Validation.ChildRule`2">
            <summary>
            Apply a validator to a child entity
            </summary>
            <typeparam name="TParent"></typeparam>
            <typeparam name="TChild"></typeparam>
        </member>
        <member name="M:EnergyTrading.Validation.ChildRule`2.#ctor(EnergyTrading.Validation.IValidatorEngine,System.Func{`0,`1})">
            <summary>
            Creates a new ChildRule.
            </summary>
            <param name="validatorEngine">Validation engine to use</param>
            <param name="accessor">Function that returns the child object to validate.</param>
        </member>
        <member name="T:EnergyTrading.Validation.IValidator">
            <summary>
            Validates an object.
            </summary>
            <remarks>
            This interface is deliberately designed around taking <see cref="T:System.Object"/> as
            it can be called in scenarios where we do not have, or want to pass, a strongly-typed
            interface.
            </remarks>
            <seealso cref="T:EnergyTrading.Validation.IValidator`1"/>
        </member>
        <member name="M:EnergyTrading.Validation.IValidator.IsValid(System.Object,System.Collections.Generic.IList{EnergyTrading.Validation.IRule})">
            <summary>
            Validates an object, recording any rule violations.
            </summary>
            <param name="entity">Entity to validate</param>
            <param name="violations">Rule violation collection</param>
            <returns>true if valid, false otherwise.</returns>        
        </member>
        <member name="T:EnergyTrading.Validation.IValidator`1">
            <summary>
            Validates a strongly-typed object.
            </summary>
            <typeparam name="T">Type we will validate.</typeparam>
        </member>
        <member name="M:EnergyTrading.Validation.IValidator`1.IsValid(`0,System.Collections.Generic.IList{EnergyTrading.Validation.IRule})">
            <summary>
            Validates an object, recording any rule violations.
            </summary>
            <param name="entity">Entity to validate</param>
            <param name="violations">Rule violation collection</param>
            <returns>true if valid, false otherwise.</returns>
        </member>
        <member name="T:EnergyTrading.Validation.IValidatorEngine">
            <summary>
            An entity validation engine.
            </summary>
        </member>
        <member name="M:EnergyTrading.Validation.IValidatorEngine.IsValid``1(``0,System.Collections.Generic.IList{EnergyTrading.Validation.IRule})">
            <summary>
            Checks whether an entity is valid, returning any rule violations.
            </summary>
            <typeparam name="T">Type of the entity.</typeparam>
            <param name="entity">Entity to validate.</param>
            <param name="violations">List of rules that were violated.</param>
            <returns>true if the entity passes all the rules, false otherwise.</returns>
        </member>
        <member name="T:EnergyTrading.Validation.LocatorValidatorEngine">
            <summary>
            Uses ServiceLocator to implement a validator engine.
            </summary>
        </member>
        <member name="M:EnergyTrading.Validation.LocatorValidatorEngine.IsValid``1(``0,System.Collections.Generic.IList{EnergyTrading.Validation.IRule})">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Validation.LocatorValidatorEngine.Validator``1">
            <summary>
            Gets a validator for an entity.
            </summary>
            <typeparam name="T">Type of the entity we want.</typeparam>
            <returns>A validator.</returns>
        </member>
        <member name="T:EnergyTrading.Validation.NamedLocatorValidatorEngine">
            <summary>
            Uses ServiceLocator to implement a validator engine.
            <para>
            Uses a named validator for each type, which can be used to support
            more complicated validation scenarios, e.g. validators that depend 
            on the state of the entity being validated.
            </para>
            </summary>
        </member>
        <member name="M:EnergyTrading.Validation.NamedLocatorValidatorEngine.IsValid``1(``0,System.Collections.Generic.IList{EnergyTrading.Validation.IRule})">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Validation.NamedLocatorValidatorEngine.Validator``1">
            <summary>
            Gets a validator for an entity.
            </summary>
            <typeparam name="T">Type of the entity we want.</typeparam>
            <returns>A validator.</returns>
        </member>
        <member name="T:EnergyTrading.Validation.ValidationException">
            <summary>
            Exception raised if rule violations 
            </summary>
        </member>
        <member name="P:EnergyTrading.Validation.ValidationException.Violations">
            <summary>
            Gets the collection of rule violations.
            </summary>
        </member>
        <member name="P:EnergyTrading.Validation.ValidationException.Message">
            <summary>
            Get the violation message.
            </summary>
        </member>
        <member name="T:EnergyTrading.Validation.Validator`1">
            <summary>
            Validates a strongly-typed object.
            </summary>
            <typeparam name="T">Type we will validate.</typeparam>
        </member>
        <member name="M:EnergyTrading.Validation.Validator`1.IsValid(`0,System.Collections.Generic.IList{EnergyTrading.Validation.IRule})">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Validation.Validator`1.EnergyTrading#Validation#IValidator#IsValid(System.Object,System.Collections.Generic.IList{EnergyTrading.Validation.IRule})">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.Validation.Validator`1.Rules">
            <summary>
            Gets the Rules property.
            <para>
            The rules that this validator will enforce.
            </para>
            </summary>
        </member>
        <member name="T:EnergyTrading.Web.IWebOperationContextWrapper">
            <summary>
            Hides the WebOperationContext so we can test WCF services more easily
            </summary>
        </member>
        <member name="P:EnergyTrading.Web.IWebOperationContextWrapper.ContentType">
            <summary>
            Gets or sets the content type of the outgoing message.
            </summary>
        </member>
        <member name="P:EnergyTrading.Web.IWebOperationContextWrapper.Location">
            <summary>
            Gets or sets the Location.
            </summary>
        </member>
        <member name="M:EnergyTrading.Web.WebOperationContextWrapper.QueryParameter``1(System.String,System.Boolean@,``0)">
            <summary>
            Get a query string parameter of type T, returning the specified value if not found.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="found"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Web.WebOperationContextWrapper.TryGetQueryParameter``1(System.String,``0@,``0)">
            <summary>
            Get a query string parameter of type T, returning the specified value if not found and letting us
            know if we found a value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:EnergyTrading.Xml.Serialization.CustomSerializer`1">
            <summary>
            Allows us to serialize unknown subtypes of a given base type without decorating the parent with all subtypes
            Utilization is [XmlElement(Type = typeof(CustomerSerializer&lt;baseClass&gt;))]
            </summary>
            <remarks>Based on http://www.codeproject.com/csharp/XmlSerializerForUnknown.asp and http://mfharoon.blogspot.com/2006/12/using-ixmlserializable-to-overcome-not.html</remarks>
        </member>
        <member name="M:EnergyTrading.Xml.Serialization.CustomSerializer`1.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>   
            Returns schema of the XML document representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"></see> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"></see> method.   
            </summary>   
            <returns>   
            An <see cref="T:System.Xml.Schema.XmlSchema"></see> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"></see> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"></see> method.   
            </returns>   
        </member>
        <member name="M:EnergyTrading.Xml.Serialization.CustomSerializer`1.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>   
            Generates an object from its XML representation.   
            </summary>   
            <param name="reader">The <see cref="T:System.Xml.XmlReader"></see> stream from which the object is deserialized.</param>   
        </member>
        <member name="M:EnergyTrading.Xml.Serialization.CustomSerializer`1.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>   
            Converts an object into its XML representation.   
            </summary>   
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"></see> stream to which the object is serialized.</param>   
        </member>
        <member name="M:EnergyTrading.Xml.Serialization.CustomSerializer`1.op_Implicit(`0)~EnergyTrading.Xml.Serialization.CustomSerializer{`0}">
            <summary>
            Implicit operators the specified subtype.
            </summary>
            <param name="subtype"></param>
            <returns></returns>
        </member>
        <member name="T:EnergyTrading.Xml.XmlExtensions">
            <summary>
            Extensions for XML.
            </summary>
        </member>
        <member name="F:EnergyTrading.Xml.XmlExtensions.DateFormat">
            <summary>
            Standard XML date format.
            </summary>
        </member>
        <member name="F:EnergyTrading.Xml.XmlExtensions.TimeFormat">
            <summary>
            Standard XML time format to second precision.
            </summary>
        </member>
        <member name="F:EnergyTrading.Xml.XmlExtensions.TimeFormatMillisecond">
            <summary>
            Standard XML time format to millisecond precision.
            </summary>
        </member>
        <member name="F:EnergyTrading.Xml.XmlExtensions.UtcDateTimeMillisecondFormat">
            <summary>
            Standard XML UTC date time format to millisecond precision.
            </summary>
        </member>
        <member name="F:EnergyTrading.Xml.XmlExtensions.UtcDateTimeSecondFormat">
            <summary>
            Standard XML UTC date time format to second precision.
            </summary>
        </member>
        <member name="M:EnergyTrading.Xml.XmlExtensions.UtcDateTimeFormat(System.DateTime)">
            <summary>
            Determine whether we should include milliseconds in the format.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Xml.XmlExtensions.QualifyXPath(System.String,System.String,System.Boolean)">
            <summary>
            Qualify elements of an XPath with a prefix.
            </summary>
            <param name="xpath">XPath to use</param>
            <param name="prefix">Prefix to use</param>
            <param name="qualifyAttributes">Whether to qualify attributes</param>
            <returns>Returns the qualified string</returns>
        </member>
        <member name="T:EnergyTrading.Xml.XmlSchemaValidator">
            <copydocfrom cref="T:EnergyTrading.Xml.IXmlSchemaValidator"/>
        </member>
        <member name="M:EnergyTrading.Xml.XmlSchemaValidator.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator,EnergyTrading.Mapping.IXmlVersionDetector)">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.Xml.IXmlSchemaValidator"/> class.
            </summary>
            <param name="locator"></param>
            <param name="detector"></param>
        </member>
        <member name="M:EnergyTrading.Xml.XmlSchemaValidator.GetSchemaSet(System.String)">
            <copydocfrom cref="M:EnergyTrading.Xml.IXmlSchemaValidator.GetSchemaSet(System.String)"/>
        </member>
        <member name="M:EnergyTrading.Xml.XmlSchemaValidator.GetXPathValidator(System.String)">
            <copydocfrom cref="M:EnergyTrading.Xml.IXmlSchemaValidator.GetXPathValidator(System.String)"/>
        </member>
        <member name="M:EnergyTrading.Xml.XmlSchemaValidator.Validate(System.String,System.String)">
            <copydocfrom cref="M:EnergyTrading.Xml.IXmlSchemaValidator.Validate(System.String,System.String)"/>
        </member>
        <member name="M:EnergyTrading.Xml.XmlSchemaValidator.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet)">
            <copydocfrom cref="M:EnergyTrading.Xml.IXmlSchemaValidator.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet)"/>
        </member>
        <member name="M:EnergyTrading.Xml.XmlSchemaValidator.ValidateXPaths(System.String,System.String)">
            <copydocfrom cref="M:EnergyTrading.Xml.IXmlSchemaValidator.ValidateXPaths(System.String,System.String)"/>
        </member>
        <member name="M:EnergyTrading.Xml.XmlSchemaValidator.ValidateXPaths(System.Xml.Linq.XDocument,EnergyTrading.Xml.IXPathValidator)">
            <copydocfrom cref="M:EnergyTrading.Xml.IXmlSchemaValidator.ValidateXPaths(System.Xml.Linq.XDocument,EnergyTrading.Xml.IXPathValidator)"/>
        </member>
        <member name="T:EnergyTrading.Xml.XmlSchemaValidatorExtensions">
            <summary>
            Extensions for IXmlSchemaValidator
            </summary>
        </member>
        <member name="M:EnergyTrading.Xml.XmlSchemaValidatorExtensions.Validate(EnergyTrading.Xml.IXmlSchemaValidator,System.Xml.Linq.XElement,System.String)">
            <copydocfrom cref="M:EnergyTrading.Xml.IXmlSchemaValidator.Validate(System.String,System.String)"/>
        </member>
        <member name="M:EnergyTrading.Xml.XmlSchemaValidatorExtensions.Validate(EnergyTrading.Xml.IXmlSchemaValidator,System.String,System.Xml.Schema.XmlSchemaSet)">
            <copydocfrom cref="M:EnergyTrading.Xml.IXmlSchemaValidator.Validate(System.String,System.String)"/>
        </member>
        <member name="M:EnergyTrading.Xml.XmlSchemaValidatorExtensions.ValidatePaths(EnergyTrading.Xml.IXmlSchemaValidator,System.Xml.Linq.XElement,System.String)">
            <copydocfrom cref="M:EnergyTrading.Xml.IXmlSchemaValidator.ValidateXPaths(System.String,System.String)"/>
        </member>
        <member name="M:EnergyTrading.Xml.XmlSchemaValidatorExtensions.ValidatePaths(EnergyTrading.Xml.IXmlSchemaValidator,System.String,EnergyTrading.Xml.IXPathValidator)">
            <copydocfrom cref="M:EnergyTrading.Xml.IXmlSchemaValidator.ValidateXPaths(System.String,System.String)"/>
        </member>
        <member name="T:EnergyTrading.Xml.XPathValidator">
            <copydocfrom cref="T:EnergyTrading.Xml.IXPathValidator"/>
        </member>
        <member name="M:EnergyTrading.Xml.XPathValidator.Validate(System.Xml.Linq.XDocument)">
            <copydocfrom cref="M:EnergyTrading.Xml.IXPathValidator.Validate(System.Xml.Linq.XDocument)"/>
        </member>
        <member name="M:EnergyTrading.Xml.XPathValidator.Validate(System.Xml.Linq.XDocument,System.Xml.XmlNamespaceManager,System.String)">
            <copydocfrom cref="M:EnergyTrading.Xml.IXPathValidator.Validate(System.Xml.Linq.XDocument,System.Xml.XmlNamespaceManager,System.String)"/>
        </member>
        <member name="P:EnergyTrading.Xml.XPathValidator.XPath">
            <summary>
            Gets or sets the XPath to validate.
            </summary>
        </member>
        <member name="P:EnergyTrading.Xml.XPathValidator.Children">
            <summary>
            Gets or sets the child validation items to check if the <see cref="P:EnergyTrading.Xml.XPathValidator.XPath"/> is present.
            </summary>
        </member>
        <member name="T:EnergyTrading.Xml.XPathValidatorExtensions">
            <summary>
            Extension methods for <see cref="T:EnergyTrading.Xml.IXPathValidator"/>.
            </summary>
        </member>
        <member name="M:EnergyTrading.Xml.XPathValidatorExtensions.ToXPathValidator(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts XPaths into validation items.
            </summary>
            <param name="xpaths"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Xml.XPathValidatorExtensions.AddChild(EnergyTrading.Xml.XPathValidator,System.String,System.Collections.Generic.IList{EnergyTrading.Xml.IXPathValidator},System.Boolean)">
            <summary>
            Add a child validation item.
            </summary>
            <param name="item"></param>
            <param name="xpath"></param>
            <param name="children"></param>
            <param name="relative">Is the xpath relative to the child xpath</param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Xml.XPathValidatorExtensions.AddChild(EnergyTrading.Xml.XPathValidator,EnergyTrading.Xml.XPathValidator)">
            <summary>
            Add a child validation item.
            </summary>
            <param name="item"></param>
            <param name="child"></param>
            <returns></returns>
        </member>
    </members>
</doc>
