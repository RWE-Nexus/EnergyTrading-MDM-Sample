<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EnergyTrading.MDM.Contracts</name>
    </assembly>
    <members>
        <member name="T:EnergyTrading.Mdm.Contracts.MdmExtensions">
            <summary>
            Extension methods for handling MDM contracts.
            </summary>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmExtensions.HasIdentifier(EnergyTrading.Mdm.Contracts.IMdmEntity,EnergyTrading.Mdm.Contracts.MdmId)">
            <summary>
            Check whether an MDM entity has an identifier.
            </summary>
            <param name="entity">Entity to check</param>
            <param name="value">Identifier to use</param>
            <returns>true if the identifier is equal to any of the entities identifiers, otherwise false.</returns>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmExtensions.MdmId(EnergyTrading.Mdm.Contracts.EntityId)">
            <summary>
            Get the identity of the MDM identifier
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmExtensions.PrimaryIdentifier(EnergyTrading.Mdm.Contracts.IMdmEntity,System.String)">
            <summary>
            Determine the primary identifier for a MDM entity.
            </summary>
            <param name="entity">Entity to use</param>
            <param name="systemName">System to use if no SourceSystemOriginated identifier exists</param>
            <returns>The identifier with SourceSystemOriginated, or the one identified by systemName or the first identifier</returns>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmExtensions.PrimaryIdentifier(System.Collections.Generic.IList{EnergyTrading.Mdm.Contracts.MdmId},System.String)">
            <summary>
            Determine the primary identifier.
            </summary>
            <param name="identifiers">List of identifiers to query</param>
            <param name="systemName">System to use if no SourceSystemOriginated identifier exists</param>
            <returns>The identifier with SourceSystemOriginated, or the one identified by systemName or the first identifier</returns>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmExtensions.SystemId(EnergyTrading.Mdm.Contracts.IMdmEntity,System.String)">
            <summary>
            Gets a MdmId for a system
            </summary>
            <param name="entity">Entity to use</param>
            <param name="systemName">System to check</param>
            <returns>First identifier found for the system or null if not found.</returns>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmExtensions.SystemId(System.Collections.Generic.IList{EnergyTrading.Mdm.Contracts.MdmId},System.String)">
            <summary>
            Gets a MdmId for a system
            </summary>
            <param name="identifiers">Identifiers to use</param>
            <param name="systemName">System to check</param>
            <returns>First identifier found for the system or null if not found.</returns>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmExtensions.SystemIdentifier(EnergyTrading.Mdm.Contracts.IMdmEntity,System.String)">
            <summary>
            Gets an identifier value for a system
            </summary>
            <param name="entity">Entity to use</param>
            <param name="systemName">System to check</param>
            <returns>First identifier found for the system or <see cref="F:System.String.Empty"/> if not found.</returns>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmExtensions.SystemIdentifier(System.Collections.Generic.IList{EnergyTrading.Mdm.Contracts.MdmId},System.String)">
            <summary>
            Gets an identifier value for a system
            </summary>
            <param name="identifiers">Identifiers to use</param>
            <param name="systemName">System to check</param>
            <returns>First identifier found for the system or <see cref="F:System.String.Empty"/> if not found.</returns>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmExtensions.ToEntityId(EnergyTrading.Mdm.Contracts.MdmId,System.String)">
            <summary>
            Creates an <see cref="T:EnergyTrading.Mdm.Contracts.EntityId"/> from a <see cref="M:EnergyTrading.Mdm.Contracts.MdmExtensions.MdmId(EnergyTrading.Mdm.Contracts.EntityId)"/>
            </summary>
            <param name="value">MdmId to use</param>
            <param name="name">Optional name to use</param>
            <returns>A new <see cref="T:EnergyTrading.Mdm.Contracts.EntityId"/> wrapping the original MdmId</returns>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmExtensions.ToIdentifier(EnergyTrading.Mdm.Contracts.EntityId)">
            <summary>
            Convert a <see cref="T:EnergyTrading.Mdm.Contracts.EntityId"/> to a string identifier.
            </summary>
            <param name="value">EntityId to use.</param>
            <returns>Null if the identifier is null, value.Identifier otherwise.</returns>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmExtensions.ToIdentifier(EnergyTrading.Mdm.Contracts.MdmId)">
            <summary>
            Convert a <see cref="M:EnergyTrading.Mdm.Contracts.MdmExtensions.MdmId(EnergyTrading.Mdm.Contracts.EntityId)"/> to a string identifier.
            </summary>
            <param name="value">MdmId to use.</param>
            <returns>Null if the identifier is null, value.Identifier otherwise.</returns>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmExtensions.ToKey(EnergyTrading.Mdm.Contracts.MdmId,System.Int32)">
            <summary>
            Convert the identifier to a numeric key.
            </summary>
            <param name="identifier">Identifier to use.</param>
            <param name="defaultKey">Value if not found, defaults to zero</param>
            <returns>Numeric value of the identifier or the default if the identifier is null or does not convert.</returns>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmExtensions.ToMapping(EnergyTrading.Mdm.Contracts.EntityId)">
            <summary>
            Converts an <see cref="T:EnergyTrading.Mdm.Contracts.EntityId"/> into a <see cref="T:EnergyTrading.Mdm.Contracts.Mapping"/>
            </summary>
            <param name="value">EntityId to convert.</param>
            <returns>Converted mapping if not null, otherwise null</returns>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmExtensions.ToMapping(EnergyTrading.Mdm.Contracts.MdmId)">
            <summary>
            Converts an <see cref="M:EnergyTrading.Mdm.Contracts.MdmExtensions.MdmId(EnergyTrading.Mdm.Contracts.EntityId)"/> into a <see cref="T:EnergyTrading.Mdm.Contracts.Mapping"/>
            </summary>
            <param name="value">MdmId to convert.</param>
            <returns>Converted mapping if not null, otherwise null</returns>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmExtensions.ToMdmId(EnergyTrading.Mdm.Contracts.IMdmEntity)">
            <summary>
            Locate the Nexus MDM identifier for a MDM entity.
            </summary>
            <param name="entity">Entity to use</param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmExtensions.ToMdmKey(EnergyTrading.Mdm.Contracts.IMdmEntity,System.Int32)">
            <summary>
            Get the Nexus MDM key for a MDM entity
            </summary>
            <param name="entity">Entity to use</param>
            <param name="defaultValue"></param>
            <returns>Value of the entity's MDM Id if present, default value (0) otherwise.</returns>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmExtensions.ToMdmKey``1(``0,System.Func{``0,EnergyTrading.Mdm.Contracts.EntityId})">
            <summary>
            Get the Nexus MDM key for a property of a MDM entity.
            </summary>
            <typeparam name="T">Type of MDM entity</typeparam>
            <param name="entity">Entity to use</param>
            <param name="access">Function to acquire the property EntityId</param>
            <returns>Value of the property's entity if present/integer, 0 otherwise.</returns>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmExtensions.ToMdmKeyString(EnergyTrading.Mdm.Contracts.IMdmEntity)">
            <summary>
            Get the Nexus key for a MDM entity
            </summary>
            <param name="entity">Entity to use</param>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmExtensions.ToMdmKey(EnergyTrading.Mdm.Contracts.EntityId,System.Int32)">
            <summary>
            Get the entity identifier from an <see cref="T:EnergyTrading.Mdm.Contracts.EntityId"/>
            </summary>
            <param name="id">Identifier to use.</param>
            <param name="defaultValue">Value if not found, defaults to zero</param>        
            <returns></returns>      
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmExtensions.ToSystemId(EnergyTrading.Mdm.Contracts.IMdmEntity,System.String)">
            <summary>
            Location the system identifier for a MDM entity.
            </summary>
            <param name="entity">Entity to use</param>
            <param name="systemName">Name of system to locate</param>
            <returns></returns>
        </member>
        <member name="T:EnergyTrading.Mdm.Contracts.EntityId">
            <summary>
            A foreign key to a <see cref="T:EnergyTrading.Mdm.Contracts.IMdmEntity"/>.
            </summary>
            <remarks>
            Sufficient information so we can display a label and know how to retrieve the target.
            </remarks>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.EntityId.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.Mdm.Contracts.EntityId"/> class.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mdm.Contracts.EntityId.Identifier">
            <summary>
            Gets or sets the Identifier property.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mdm.Contracts.EntityId.Name">
            <summary>
            Gets or sets the name property.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mdm.Contracts.EntityId.Links">
            <summary>
            Gets or sets the Links collection.
            <para>
            This is the collection of atom links that may provide further information allowing
            for a level 3 REST API i.e. hypermedia commands embedded in the data.
            </para>
            </summary>
        </member>
        <member name="T:EnergyTrading.Mdm.Contracts.IMdmEntity">
            <summary>
            Interface supported by all MDM entities.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mdm.Contracts.IMdmEntity.Identifiers">
            <summary>
            Gets or sets the Identifiers property.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mdm.Contracts.IMdmEntity.Details">
            <summary>
            Gets or sets the details property.
            <para>
            The actual type will vary by MDM entity, this gives a polymorphic way of accessing the details.
            </para>
            </summary>
        </member>
        <member name="P:EnergyTrading.Mdm.Contracts.IMdmEntity.MdmSystemData">
            <summary>
            Gets or sets
            </summary>
        </member>
        <member name="P:EnergyTrading.Mdm.Contracts.IMdmEntity.Audit">
            <summary>
            Gets or sets the Audit property.
            </summary>
        </member>
        <member name="P:EnergyTrading.Mdm.Contracts.IMdmEntity.Links">
            <summary>
            Gets or sets the Links collection.
            <para>
            This is the collection of atom links that may provide further information allowing
            for a level 3 REST API i.e. hypermedia commands embedded in the data.
            </para>
            </summary>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmId.Equals(System.Object)">
            <copydocfrom cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmId.Equals(EnergyTrading.Mdm.Contracts.MdmId)">
            <copydocfrom cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmId.GetHashCode">
            <copydocfrom cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:EnergyTrading.Mdm.Contracts.MdmId.ToString">
            <copydocfrom cref="M:System.Object.ToString"/>
        </member>
        <member name="T:EnergyTrading.Mdm.Contracts.SourceSystemNames">
            <summary>
            Standardized system names
            </summary>
        </member>
    </members>
</doc>
