// This code was generated by a tool: ViewModelTemplates\EntitySelectorViewModelTemplate.tt

using Common.UI.ViewModels;

namespace Admin.PartyAccountabilityModule.ViewModels
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Linq;
    using System.Net;

    using Common;
    using Common.Events;
    using Common.Extensions;
    using Common.Services;

    using Microsoft.Practices.Prism.Events;
    using Microsoft.Practices.Prism.Regions;
    using Microsoft.Practices.Prism.ViewModel;

    using EnergyTrading;
    using EnergyTrading.Contracts.Search;
    using EnergyTrading.Mdm.Client.Services;
    using EnergyTrading.MDM.Contracts.Sample; using EnergyTrading.Mdm.Contracts;
    using EnergyTrading.Search;

    public class PartyAccountabilitySelectorViewModel : NotificationObject
    {
        private readonly IMdmService entityService;
        private readonly IEventAggregator eventAggregator;
        private readonly IRegionManager regionManager;

        private DateTime asOf;
        private string entitySearchText;

        private ObservableCollection<SelectorViewModel> partyaccountabilitys;
        private SelectorViewModel selectedPartyAccountability;

        public PartyAccountabilitySelectorViewModel(IEventAggregator eventAggregator, IMdmService entityService, IRegionManager regionManager)
        {
            this.eventAggregator = eventAggregator;
            this.entityService = entityService;
            this.regionManager = regionManager;
            this.AsOf = SystemTime.UtcNow().Date;
        }

        public void SelectPartyAccountability()
        {
            var entitySelectionViewContext = (EntitySelectionViewContext)this.regionManager.Regions[RegionNames.EntitySelectorRegion].Context;
            this.eventAggregator.Publish(new EntitySelectedEvent(entitySelectionViewContext.SelectedPropertyName, this.SelectedPartyAccountability.Id, this.SelectedPartyAccountability.Name)); 
        }

        public void CancelSelection()
        {
           this.eventAggregator.Publish(new EntitySelectedEvent(string.Empty, 0, string.Empty)); 
        }

        public string EntitySearchText
        {
            get
            {
                return this.entitySearchText;
            }

            set
            {
                this.entitySearchText = value;
                this.RaisePropertyChanged(() => this.EntitySearchText);
            }
        }

        public ObservableCollection<SelectorViewModel> PartyAccountabilitys
        {
            get
            {
                return this.partyaccountabilitys;
            }

            set
            {
                this.partyaccountabilitys = value;
                this.RaisePropertyChanged(() => this.PartyAccountabilitys);
            }
        }

        public SelectorViewModel SelectedPartyAccountability
        {
            get
            {
                return this.selectedPartyAccountability;
            }

            set
            {
                this.selectedPartyAccountability = value;
                this.RaisePropertyChanged(() => this.SelectedPartyAccountability);
            }
        }

        public DateTime AsOf
        {
            get
            {
                return this.asOf;
            }

            set
            {
                this.asOf = value;
                this.RaisePropertyChanged(() => this.AsOf);
            }
        }

        public void SearchForEntity()
        {
            Search search = SearchBuilder.CreateSearch();
            search.AsOf = this.AsOf;
            search.AddSearchCriteria(SearchCombinator.And).AddCriteria(
                    "Name", SearchCondition.Contains, this.EntitySearchText);

            search.SearchOptions.OrderBy = "Name";
            this.entityService.ExecuteAsyncSearch<PartyAccountability>(
                search, 
                (response) =>
                    {
                        IList<PartyAccountability> searchResults = response;
                        this.PartyAccountabilitys =
                            new ObservableCollection<SelectorViewModel>(
                                searchResults.Select(
                                    x =>
                                    new SelectorViewModel(x.MdmId().Value, x.Details.Name)).OrderBy(y => y.Name));
                    }, 
                this.eventAggregator);
        }
    }
}
