// This code was generated by a tool: InfrastructureTemplates\ModuleInitTemplate.tt
namespace Admin.BrokerModule
{
    using System;

    using Admin.BrokerModule.ViewModels;
    using Admin.BrokerModule.Views;

    using Common.Services;

    using EnergyTrading.Mdm.Client.Services;
    using EnergyTrading.Mdm.Client.WebClient;
    using EnergyTrading.Mdm.Contracts;
    using EnergyTrading.MDM.Contracts.Sample;

    using Microsoft.Practices.Prism.Events;
    using Microsoft.Practices.Prism.Modularity;
    using Microsoft.Practices.Unity;

    public class ModuleInit : IModule
    {
        private readonly IUnityContainer container;
        private readonly IApplicationMenuRegistry menuRegistry;

        public ModuleInit(IUnityContainer container, IApplicationMenuRegistry menuRegistry)
        {
            this.container = container;
            this.menuRegistry = menuRegistry;
        }

        public void Initialize()
        {
            this.Register();
            this.PopulateReferenceData();

            this.menuRegistry.RegisterMenuItem("Broker", string.Empty, typeof(BrokerSearchResultsView), new Uri(BrokerViewNames.BrokerAddView, UriKind.Relative), "Name", "_Name", "PartyRole");
            this.menuRegistry.RegisterEntitySelector("Broker", typeof(BrokerSelectorView));
        }

        private void Register()
        {
            this.container.RegisterType<IMdmEntityService<Broker>, MdmEntityService<Broker>>(
                new ContainerControlledLifetimeManager(),
                new InjectionConstructor(Server.Name + "broker", new ResolvedParameter<IMessageRequester>()));
            this.container.RegisterType<object, BrokerEditView>(BrokerViewNames.BrokerEditView);
            this.container.RegisterType<object, BrokerAddView>(BrokerViewNames.BrokerAddView);
            this.container.RegisterType<object, BrokerSearchResultsView>(BrokerViewNames.BrokerSearchResultsView);
            this.container.RegisterType<object, BrokerEmbeddedSearchResultsView>(BrokerViewNames.BrokerEmbeddedSearchResultsView, new ContainerControlledLifetimeManager());
                    
            this.container.RegisterType<BrokerAddViewModel>(
                new ContainerControlledLifetimeManager(),
                new InjectionConstructor(
                new ResolvedParameter<IEventAggregator>(),
                new ResolvedParameter<IMdmService>()));

            this.container.RegisterType<BrokerEditViewModel>(
                new ContainerControlledLifetimeManager(),
                new InjectionConstructor(
                new ResolvedParameter<IEventAggregator>(),
                new ResolvedParameter<IMdmService>(),
                new ResolvedParameter<INavigationService>(),
                new ResolvedParameter<IMappingService>(),
                new ResolvedParameter<IApplicationCommands>()));

                    
            this.container.RegisterType<BrokerSelectorView>();
            this.container.RegisterType<BrokerSelectorViewModel>();
			
            this.container.RegisterInstance<Func<int, IMdmEntity>>("Broker",
                (entityId) =>
                    {
                        var entityService = container.Resolve<IMdmEntityService<Broker>>();
                        var response = entityService.Get(entityId);
                        return response.Message;
                    });
        }

        private void PopulateReferenceData()
        {
                }
    }
}
