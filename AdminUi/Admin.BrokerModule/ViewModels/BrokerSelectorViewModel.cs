// This code was generated by a tool: ViewModelTemplates\EntitySelectorViewModelTemplate.tt
namespace Admin.BrokerModule.ViewModels
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;

    using Common;
    using Common.Events;
    using Common.Extensions;
    using Common.UI.ViewModels;

    using EnergyTrading;
    using EnergyTrading.Contracts.Search;
    using EnergyTrading.Mdm.Client.Services;
    using EnergyTrading.MDM.Contracts.Sample;
    using EnergyTrading.Search;

    using Microsoft.Practices.Prism.Events;
    using Microsoft.Practices.Prism.Regions;
    using Microsoft.Practices.Prism.ViewModel;

    public class BrokerSelectorViewModel : NotificationObject
    {
        private readonly IMdmService entityService;

        private readonly IEventAggregator eventAggregator;

        private readonly IRegionManager regionManager;

        private DateTime asOf;

        private ObservableCollection<SelectorViewModel> brokers;

        private string entitySearchText;

        private SelectorViewModel selectedBroker;

        public BrokerSelectorViewModel(
            IEventAggregator eventAggregator, 
            IMdmService entityService, 
            IRegionManager regionManager)
        {
            this.eventAggregator = eventAggregator;
            this.entityService = entityService;
            this.regionManager = regionManager;
            this.AsOf = SystemTime.UtcNow().Date;
        }

        public DateTime AsOf
        {
            get
            {
                return this.asOf;
            }

            set
            {
                this.asOf = value;
                this.RaisePropertyChanged(() => this.AsOf);
            }
        }

        public ObservableCollection<SelectorViewModel> Brokers
        {
            get
            {
                return this.brokers;
            }

            set
            {
                this.brokers = value;
                this.RaisePropertyChanged(() => this.Brokers);
            }
        }

        public string EntitySearchText
        {
            get
            {
                return this.entitySearchText;
            }

            set
            {
                this.entitySearchText = value;
                this.RaisePropertyChanged(() => this.EntitySearchText);
            }
        }

        public SelectorViewModel SelectedBroker
        {
            get
            {
                return this.selectedBroker;
            }

            set
            {
                this.selectedBroker = value;
                this.RaisePropertyChanged(() => this.SelectedBroker);
            }
        }

        public void CancelSelection()
        {
            this.eventAggregator.Publish(new EntitySelectedEvent(string.Empty, 0, string.Empty));
        }

        public void SearchForEntity()
        {
            Search search = SearchBuilder.CreateSearch();
            search.AsOf = this.AsOf;
            search.AddSearchCriteria(SearchCombinator.And)
                .AddCriteria("Name", SearchCondition.Contains, this.EntitySearchText);

            search.SearchOptions.OrderBy = "Name";
            this.entityService.ExecuteAsyncSearch<Broker>(
                search, 
                response =>
                    {
                        IList<Broker> searchResults = response;
                        this.Brokers =
                            new ObservableCollection<SelectorViewModel>(
                                searchResults.Select(x => new SelectorViewModel(x.MdmId().Value, x.Details.Name))
                                    .OrderBy(y => y.Name));
                    }, 
                this.eventAggregator);
        }

        public void SelectBroker()
        {
            var entitySelectionViewContext =
                (EntitySelectionViewContext)this.regionManager.Regions[RegionNames.EntitySelectorRegion].Context;
            this.eventAggregator.Publish(
                new EntitySelectedEvent(
                    entitySelectionViewContext.SelectedPropertyName, 
                    this.SelectedBroker.Id, 
                    this.SelectedBroker.Name));
        }
    }
}