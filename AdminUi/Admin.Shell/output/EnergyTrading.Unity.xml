<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EnergyTrading.Unity</name>
    </assembly>
    <members>
        <member name="T:EnergyTrading.Container.Unity.AutoRegistration.AutoRegistration">
            <summary>
            Auto Registration extends popular Unity IoC container 
            and provides nice fluent syntax to configure rules for automatic types registration
            </summary>
        </member>
        <member name="T:EnergyTrading.Container.Unity.AutoRegistration.IAutoRegistration">
            <summary>
            Auto Registration contract
            </summary>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IAutoRegistration.Include(System.Predicate{System.Type},System.Action{System.Type,Microsoft.Practices.Unity.IUnityContainer})">
            <summary>
            Adds rule to include certain types that satisfy specified type filter 
            and register them using specified registrator function
            </summary>
            <param name="typeFilter">Type filter.</param>
            <param name="registrator">Registrator function.</param>
            <returns>Auto registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IAutoRegistration.Include(System.Predicate{System.Type},EnergyTrading.Container.Unity.AutoRegistration.IRegistrationOptions)">
            <summary>
            Adds rule to include certain types that satisfy specified type filter 
            and register them using specified registration options
            </summary>
            <param name="typeFilter">Type filter.</param>
            <param name="registrationOptions">RegistrationOptions options.</param>
            <returns>Auto registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IAutoRegistration.Exclude(System.Predicate{System.Type})">
            <summary>
            Adds rule to exclude certain types that satisfy specified type filter and not register them
            </summary>
            <param name="filter">Type filter.</param>
            <returns>Auto registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IAutoRegistration.ExcludeAssemblies(System.Predicate{System.Reflection.Assembly})">
            <summary>
            Adds rule to exclude certain assemblies that satisfy specified assembly filter 
            and not consider their types
            </summary>
            <param name="filter">Type filter.</param>
            <returns>Auto registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IAutoRegistration.ApplyAutoRegistration">
            <summary>
            Applies auto registration - scans loaded assemblies, 
            check specified rules and register types that satisfy these rules
            </summary>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IAutoRegistration.ApplyAutoRegistration(System.Reflection.Assembly[])">
            <summary>
            Applies auto registration for the specified assembiles, 
            check specified rules and register types that satisfy these rules
            </summary>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.AutoRegistration.#ctor(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:EnergyTrading.Container.Unity.AutoRegistration.AutoRegistration"/> class.
            </summary>
            <param name="container">Unity container.</param>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.AutoRegistration.Include(System.Predicate{System.Type},System.Action{System.Type,Microsoft.Practices.Unity.IUnityContainer})">
            <summary>
            Adds rule to include certain types that satisfy specified type filter
            and register them using specified registrator function
            </summary>
            <param name="typeFilter">Type filter.</param>
            <param name="registrator">Registrator function.</param>
            <returns>Auto registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.AutoRegistration.Include(System.Predicate{System.Type},EnergyTrading.Container.Unity.AutoRegistration.IRegistrationOptions)">
            <summary>
            Adds rule to include certain types that satisfy specified type filter
            and register them using specified registration options
            </summary>
            <param name="typeFilter">Type filter.</param>
            <param name="registrationOptions">RegistrationOptions options.</param>
            <returns>Auto registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.AutoRegistration.ExcludeAssemblies(System.Predicate{System.Reflection.Assembly})">
            <summary>
            Adds rule to exclude certain assemblies that satisfy specified assembly filter
            and not consider their types
            </summary>
            <param name="filter">Type filter.</param>
            <returns>Auto registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.AutoRegistration.Exclude(System.Predicate{System.Type})">
            <summary>
            Adds rule to exclude certain types that satisfy specified type filter and not register them
            </summary>
            <param name="filter">Type filter.</param>
            <returns>Auto registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.AutoRegistration.ApplyAutoRegistration">
            <summary>
            Applies auto registration - scans loaded assemblies,
            check specified rules and register types that satisfy these rules
            </summary>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.AutoRegistration.ApplyAutoRegistration(System.Reflection.Assembly[])">
            <summary>
            Applies auto registration - scans supplied assemblies,
            check specified rules and register types that satisfy these rules
            </summary>
        </member>
        <member name="T:EnergyTrading.Container.Unity.AutoRegistration.AutoRegistrationExtensions">
            <summary>
            Extension methods to various types
            </summary>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.AutoRegistrationExtensions.GetAttribute``1(System.Type)">
            <summary>
            Gets type attribute.
            </summary>
            <typeparam name="TAttr">Type of the attribute.</typeparam>
            <param name="type">Target type.</param>
            <returns>Attribute value</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.AutoRegistrationExtensions.LoadAssemblyFrom(EnergyTrading.Container.Unity.AutoRegistration.IAutoRegistration,System.String)">
            <summary>
            Loads assembly from given assembly file name.
            </summary>
            <param name="autoRegistration">Auto registration.</param>
            <param name="assemblyPath">Assembly path.</param>
            <returns>Auto registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.AutoRegistrationExtensions.LoadAssembliesFrom(EnergyTrading.Container.Unity.AutoRegistration.IAutoRegistration,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads assemblies from given assembly file name.
            </summary>
            <param name="autoRegistration">Auto registration.</param>
            <param name="assemblyPaths">Assembly paths.</param>
            <returns>Auto registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.AutoRegistrationExtensions.ConfigureAutoRegistration(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Configures auto registration - starts chain of fluent configuration
            </summary>
            <param name="container">Unity container.</param>
            <returns>Auto registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.AutoRegistrationExtensions.ExcludeSystemAssemblies(EnergyTrading.Container.Unity.AutoRegistration.IAutoRegistration)">
            <summary>
            Adds rule to exclude certain assemblies (that name starts with System or mscorlib) 
            and not consider their types
            </summary>
            <returns>Auto registration</returns>
        </member>
        <member name="T:EnergyTrading.Container.Unity.AutoRegistration.If">
            <summary>
            Boolean extension methods
            </summary>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.If.DecoratedWith``1(System.Type)">
            <summary>
            Determines whether type is decorated with specified attribute
            </summary>
            <typeparam name="TAttr">Type of the attribute.</typeparam>
            <param name="type">Target type.</param>
            <returns>True if type is decorated with specified attribute, otherwise false</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.If.Implements``1(System.Type)">
            <summary>
            Determines whether type implements specified interface
            </summary>
            <typeparam name="TContract">Type of the interface.</typeparam>
            <param name="type">Target type.</param>
            <returns>True if type implements specified interface, otherwise false</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.If.ImplementsOpenGeneric(System.Type,System.Type)">
            <summary>
            Determines whether type implements interface that can be constructed from specified open-generic interface
            </summary>
            <param name="type">Target type.</param>
            <param name="contract">Type of the open-generic interface.</param>
            <returns>True if type implements interface that can be constructed from specified open-generic interface, otherwise false</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.If.ImplementsITypeName(System.Type)">
            <summary>
            Determines whether type implements interface that name looks like ITypeName 
            (first letter is I, the rest is implementing type name),
            for example this method returns true for type that looks like - class Logger : ILogger
            </summary>
            <param name="type">Target type.</param>
            <returns>True if type implements ITypeName interface, otherwise false</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.If.ImplementsSingleInterface(System.Type)">
            <summary>
            Determines whether type implements only one interface
            </summary>
            <param name="type">Target type.</param>
            <returns>True if type implements single interface, otherwise false</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.If.Any(System.Type)">
            <summary>
            Returns true for any type that is not null
            </summary>
            <param name="type">Target type.</param>
            <returns>Always returns true if type is not null</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.If.Is``1(System.Type)">
            <summary>
            Determines whether type passed as method argument is equal to type passed as generic method parameter.
            </summary>
            <typeparam name="T">Generic method parameter type</typeparam>
            <param name="type">Method argument type.</param>
            <returns>
            <c>true</c> if generic method parameter type is equal to method argument type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.If.IsAssignableFrom``1(System.Type)">
            <summary>
            Determines whether type is assignable from specified type.
            </summary>
            <typeparam name="T">Generic method parameter type</typeparam>
            <param name="type">Method argument type.</param>
            <returns>
            <c>true</c> if is assignable from the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.If.AnyAssembly(System.Reflection.Assembly)">
            <summary>
            Returns true for any assembly that is not null
            </summary>
            <param name="assembly">Target assembly.</param>
            <returns>Always returns true if assembly is not null</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.If.ContainsType``1(System.Reflection.Assembly)">
            <summary>
            Determines whether specified assembly contains specified type.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="assembly">Assembly.</param>
            <returns>
            <c>true</c> if the specified assembly contains type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:EnergyTrading.Container.Unity.AutoRegistration.IFluentRegistration">
            <summary>
            Fluent registration options contract describes number of operations 
            to fluently set registration option values
            </summary>
        </member>
        <member name="T:EnergyTrading.Container.Unity.AutoRegistration.IRegistrationOptions">
            <summary>
            Registration options contract describes parameters of type registration operation
            </summary>
        </member>
        <member name="P:EnergyTrading.Container.Unity.AutoRegistration.IRegistrationOptions.LifetimeManager">
            <summary>
            Gets or sets lifetime manager to use to register type(s).
            </summary>
            <value>Lifetime manager.</value>
        </member>
        <member name="P:EnergyTrading.Container.Unity.AutoRegistration.IRegistrationOptions.Name">
            <summary>
            Gets or sets name to register type(s) with.
            </summary>
            <value>Name.</value>
        </member>
        <member name="P:EnergyTrading.Container.Unity.AutoRegistration.IRegistrationOptions.Interfaces">
            <summary>
            Gets or sets interfaces to register type(s) as.
            </summary>
            <value>Interfaces.</value>
        </member>
        <member name="P:EnergyTrading.Container.Unity.AutoRegistration.IRegistrationOptions.Type">
            <summary>
            Sets type being registered.
            </summary>
            <value>Target type.</value>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IFluentRegistration.UsingLifetime``1">
            <summary>
            Specifies lifetime manager to use when registering type
            </summary>
            <typeparam name="TLifetimeManager">The type of the lifetime manager.</typeparam>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IFluentRegistration.UsingLifetime(System.Func{System.Type,Microsoft.Practices.Unity.LifetimeManager})">
            <summary>
            Specifies lifetime manager resolver function, that by given type return lifetime manager to use when registering type
            </summary>
            <param name="lifetimeResolver">Lifetime manager resolver.</param>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IFluentRegistration.UsingLifetime``1(``0)">
            <summary>
            Specifies lifetime manager to use when registering type
            </summary>
            <typeparam name="TLifetimeManager">The type of the lifetime manager.</typeparam>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IFluentRegistration.UsingSingletonMode">
            <summary>
            Specifies ContainerControlledLifetimeManager lifetime manager to use when registering type
            </summary>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IFluentRegistration.UsingPerCallMode">
            <summary>
            Specifies TransientLifetimeManager lifetime manager to use when registering type
            </summary>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IFluentRegistration.UsingPerThreadMode">
            <summary>
            Specifies PerThreadLifetimeManager lifetime manager to use when registering type
            </summary>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IFluentRegistration.WithName(System.String)">
            <summary>
            Specifies name to register type with
            </summary>
            <param name="name">Name.</param>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IFluentRegistration.WithName(System.Func{System.Type,System.String})">
            <summary>
            Specifies name resolver function that by given type returns name to register it with
            </summary>
            <param name="nameResolver">Name resolver.</param>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IFluentRegistration.WithTypeName">
            <summary>
            Specifies that type name should be used to register it with
            </summary>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IFluentRegistration.WithPartName(System.String)">
            <summary>
            Specifies that type should be registered with its name minus well-known application part name.
            For example: WithPartName("Controller") will register 'HomeController' type with name 'Home',
            or WithPartName(WellKnownAppParts.Repository) will register 'CustomerRepository' type with name 'Customer'
            </summary>
            <param name="name">Application part name.</param>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IFluentRegistration.As``1">
            <summary>
            Specifies interface to register type as
            </summary>
            <typeparam name="TContact">The type of the interface.</typeparam>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IFluentRegistration.As(System.Func{System.Type,System.Type})">
            <summary>
            Specifies interface or type resolver function that by given type returns type to register type as
            </summary>
            <param name="typeResolver">Interface resolver.</param>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IFluentRegistration.As(System.Func{System.Type,System.Type[]})">
            <summary>
            Specifies interface or type resolver function that by given type returns types to register type as
            </summary>
            <param name="typesResolver">Interface resolver.</param>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IFluentRegistration.AsFirstInterfaceOfType">
            <summary>
            Specifies that type should be registered as its first interface
            </summary>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IFluentRegistration.AsSingleInterfaceOfType">
            <summary>
            Specifies that type should be registered as its single interface
            </summary>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.IFluentRegistration.AsAllInterfacesOfType">
            <summary>
            Specifies that type should be registered as all its interfaces
            </summary>
            <returns>Fluent registration</returns>
        </member>
        <member name="T:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions">
            <summary>
            Type registration options
            </summary>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions.UsingLifetime``1">
            <summary>
            Specifies lifetime manager to use when registering type
            </summary>
            <typeparam name="TLifetimeManager">The type of the lifetime manager.</typeparam>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions.UsingLifetime(System.Func{System.Type,Microsoft.Practices.Unity.LifetimeManager})">
            <summary>
            Specifies lifetime manager resolver function, that by given type return lifetime manager to use when registering type
            </summary>
            <param name="lifetimeResolver">Lifetime manager resolver.</param>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions.UsingLifetime``1(``0)">
            <summary>
            Specifies lifetime manager to use when registering type
            </summary>
            <typeparam name="TLifetimeManager">The type of the lifetime manager.</typeparam>
            <param name="manager"></param>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions.UsingSingletonMode">
            <summary>
            Specifies ContainerControlledLifetimeManager lifetime manager to use when registering type
            </summary>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions.UsingPerCallMode">
            <summary>
            Specifies TransientLifetimeManager lifetime manager to use when registering type
            </summary>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions.UsingPerThreadMode">
            <summary>
            Specifies PerThreadLifetimeManager lifetime manager to use when registering type
            </summary>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions.WithName(System.String)">
            <summary>
            Specifies name to register type with
            </summary>
            <param name="name">Name.</param>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions.WithName(System.Func{System.Type,System.String})">
            <summary>
            Specifies name resolver function that by given type returns name to register it with
            </summary>
            <param name="nameResolver">Name resolver.</param>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions.WithTypeName">
            <summary>
            Specifies that type name should be used to register it with
            </summary>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions.WithPartName(System.String)">
            <summary>
            Specifies that type should be registered with its name minus well-known application part name.
            For example: WithPartName("Controller") will register 'HomeController' type with name 'Home',
            or WithPartName(WellKnownAppParts.Repository) will register 'CustomerRepository' type with name 'Customer'
            </summary>
            <param name="name">Application part name.</param>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions.As``1">
            <summary>
            Specifies interface to register type as
            </summary>
            <typeparam name="TContact">The type of the interface.</typeparam>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions.As(System.Func{System.Type,System.Type})">
            <summary>
            Specifies interface resolver function that by given type returns interface register type as
            </summary>
            <param name="typeResolver">Interface resolver.</param>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions.As(System.Func{System.Type,System.Type[]})">
            <summary>
            Specifies interface resolver function that by given type returns interfaces register type as
            </summary>
            <param name="typesResolver">Interface resolver.</param>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions.AsFirstInterfaceOfType">
            <summary>
            Specifies that type should be registered as its first interface
            </summary>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions.AsSingleInterfaceOfType">
            <summary>
            Specifies that type should be registered as its single interface
            </summary>
            <returns>Fluent registration</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions.AsAllInterfacesOfType">
            <summary>
            Specifies that type should be registered as all its interfaces
            </summary>
            <returns>Fluent registration</returns>
        </member>
        <member name="P:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions.LifetimeManager">
            <summary>
            Gets or sets lifetime manager to use to register type(s).
            </summary>
            <value>Lifetime manager.</value>
        </member>
        <member name="P:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions.Name">
            <summary>
            Gets or sets name to register type(s) with.
            </summary>
            <value>Name.</value>
        </member>
        <member name="P:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions.Interfaces">
            <summary>
            Gets or sets interfaces to register type(s) as.
            </summary>
            <value>Interfaces.</value>
        </member>
        <member name="P:EnergyTrading.Container.Unity.AutoRegistration.RegistrationOptions.Type">
            <summary>
            Sets type being registered.
            </summary>
            <value>Target type.</value>
        </member>
        <member name="T:EnergyTrading.Container.Unity.AutoRegistration.Then">
            <summary>
            Extension methods for fluent registration options
            </summary>
        </member>
        <member name="M:EnergyTrading.Container.Unity.AutoRegistration.Then.Register">
            <summary>
            Creates new registration options
            </summary>
            <returns>Fluent registration options</returns>
        </member>
        <member name="T:EnergyTrading.Container.Unity.AutoRegistration.WellKnownAppParts">
            <summary>
            Well known application part names: 
            UI composition parts, like Controller or View;
            design patterns, like Visitor or Proxy;
            general app parts, like Service or Validator
            </summary>
        </member>
        <member name="T:EnergyTrading.Container.Unity.BuildTracking">
            <summary>
            Allow us to create an entity in the context of the actual type being resolved.
            <para>
            Solution taken from http://unity.codeplex.com/discussions/203744
            </para>
            </summary>
        </member>
        <member name="T:EnergyTrading.Container.Unity.InitialisedExtension">
            <summary>
            Simple marker extension to know that we have initialized a container.
            </summary>
            <remarks>
            Needed so that we don't invoke <see cref="M:EnergyTrading.Container.Unity.UnityExtensions.InstallCoreExtensions(Microsoft.Practices.Unity.IUnityContainer)"/> more than once
            which causes issues with resolving IServiceLocator.
            </remarks>
        </member>
        <member name="T:EnergyTrading.Container.Unity.IContainerRegistrar">
            <summary>
            Registration interfaces and their associated implementations into a Unity container.
            </summary>
        </member>
        <member name="M:EnergyTrading.Container.Unity.IContainerRegistrar.Register(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Registers types/instances against a container 
            </summary>
            <param name="container">Container to use</param>
        </member>
        <member name="T:EnergyTrading.Container.Unity.EnergyTradingUnityServiceLocator">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> that wraps a Unity container.
            <remarks>
            Differs from the standard Microsoft implementation in that put ourselves into the container
            using <see cref="T:Microsoft.Practices.Unity.ContainerControlledLifetimeManager"/>, the original used a lifetime manager
            that held a weak reference which can lead to the ServiceLocator disappearing from the container!
            </remarks>
            </summary>
        </member>
        <member name="M:EnergyTrading.Container.Unity.EnergyTradingUnityServiceLocator.#ctor(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.UnityServiceLocator"/> class for a container.
            </summary>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to wrap with the <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>
            interface implementation.</param>
        </member>
        <member name="M:EnergyTrading.Container.Unity.EnergyTradingUnityServiceLocator.#ctor(Microsoft.Practices.Unity.IUnityContainer,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.UnityServiceLocator"/> class for a container.
            </summary>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to wrap with the <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>
            interface implementation.</param>
            <param name="useTryResolve">Whether to use TryResolve or Resolve directly</param>
        </member>
        <member name="M:EnergyTrading.Container.Unity.EnergyTradingUnityServiceLocator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:EnergyTrading.Container.Unity.EnergyTradingUnityServiceLocator.DoGetInstance(System.Type,System.String)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of resolving the requested service instance.
            </summary>
            <param name="serviceType">Type of instance requested.</param><param name="key">Name of registered service you want. May be null.</param>
            <returns>
            The requested service instance.
            </returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.EnergyTradingUnityServiceLocator.DoGetAllInstances(System.Type)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of service requested.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="T:EnergyTrading.Container.Unity.TypeTrackingExtension">
            <summary>
            Extension class for Unity that tracks types that are registered.
            </summary>
            <example>
            <code>
            var container = new UnityContainer();
            container.AddNewExtension&lt;TypeTrackingExtension&gt;();
            container.RegisterType&lt;ITest, TestClass&gt;();
            var obj = container.Configure&lt;TypeTrackingExtension&gt;().TryResolve&lt;Test&gt;();
            </code>
            </example>
        </member>
        <member name="M:EnergyTrading.Container.Unity.TypeTrackingExtension.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:EnergyTrading.Container.Unity.TypeTrackingExtension"/> class.
            </summary>
        </member>
        <member name="M:EnergyTrading.Container.Unity.TypeTrackingExtension.CanResolve``1(System.String)">
            <summary>
            Determines whether this type can be resolved with the specified name.
            </summary>
            <typeparam name="T">The type to test for resolution</typeparam>
            <param name="name">The name.</param>
            <returns>
                <c>true</c> if this instance can be resolved with the specified name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.TypeTrackingExtension.CanResolve(System.Type,System.String)">
            <summary>
            Determines whether this type can be resolved with the specified name.
            </summary>
            <param name="type">The type to test for resolution</param>
            <param name="name">The name.</param>
            <returns>
                <c>true</c> if this instance can be resolved with the specified name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.TypeTrackingExtension.CanResolveAny``1">
            <summary>
            Determines whether this instance can be resolved at all with or without a name.
            </summary>
            <typeparam name="T">The type to test for resolution</typeparam>
            <returns>
                <c>true</c> if this instance can be resolved at all; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.TypeTrackingExtension.CanResolveAny(System.Type)">
            <summary>
            Determines whether this instance can be resolved at all with or without a name.
            </summary>
            <param name="type">The type to test for resolution</param>
            <returns>
                <c>true</c> if this instance can be resolved at all; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.TypeTrackingExtension.TryResolve``1(System.String)">
            <summary>
            Tries to resolve the type with the specified of name, returning default value if not found.
            </summary>
            <typeparam name="T">The type to try and resolve.</typeparam>
            <param name="name">The name associated with the type.</param>
            <returns>An object of type <see typeparameref="T"/> if found, or default value if not.</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.TypeTrackingExtension.TryResolve``1(``0,System.String)">
            <summary>
            Tries to resolve the type with the specified of name, returning the passed in defaultValue if not found.
            </summary>
            <typeparam name="T">The type to try and resolve.</typeparam>
            <param name="name">The name associated with the type.</param>
            <param name="defaultValue">The default value to return if type not found.</param>
            <returns>An object of type <see typeparamref="T"/> if found, or the <see paramref="defaultValue"/> if not.</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.TypeTrackingExtension.TryResolve(System.Type,System.String)">
            <summary>
            Tries to resolve the type with the specified of name, returning default value if not found.
            </summary>
            <param name="type">The type to try and resolve.</param>
            <param name="name">The name associated with the type.</param>
            <returns>An object of the type if found, or default value if not.</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.TypeTrackingExtension.ResolveAll``1(System.Boolean)">
            <summary>
            Resolves all registered T in the container, conditionally including the default unnamed
            registered T. When includeDefault is false, this is the same as the normal Unity
            ResolveAll.
            </summary>
            <typeparam name="T">The type to resolve</typeparam>
            <param name="includeDefault">if set to <c>true</c> include default value, else do not include default.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.TypeTrackingExtension.ResolveAll(System.Type,System.Boolean)">
            <summary>
            Resolves all registered T in the container, conditionally including the default unnamed
            registered T. When includeDefault is false, this is the same as the normal Unity
            ResolveAll.
            </summary>
            <param name="type">The type to resolve</param>
            <param name="includeDefault">if set to <c>true</c> include default value, else do not include default.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.TypeTrackingExtension.ResolveAllToArray``1(System.Boolean)">
            <summary>
            Resolves all registered T in the container, conditionally including the default unnamed
            registered T. When includeDefault is false, this is the same as the normal Unity
            ResolveAll.
            </summary>
            <typeparam name="T">The type to resolve</typeparam>
            <param name="includeDefault">if set to <c>true</c> include default value, else do not include default.</param>
            <returns>Array of T</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.TypeTrackingExtension.Remove">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Container.Unity.TypeTrackingExtension.Initialize">
            <inheritdoc />
        </member>
        <member name="T:EnergyTrading.Container.Unity.UnityClearBuildPlanStrategies">
            <summary>
            Implements a <see cref="T:Microsoft.Practices.Unity.UnityContainerExtension"/> that clears the list of build plan stratgies
            held by the container.
            </summary>
        </member>
        <member name="T:EnergyTrading.Container.Unity.UnityExtensions">
            <summary>
            Helper methods for <see cref="T:Microsoft.Practices.Unity.UnityContainer"/>s to simplify configuration and registration.
            </summary>
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.CoreExtensions">
            <summary>
            Returns the configured core extensions.
            </summary>
            <returns>Enumeration of the core extensions.</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.ChildCoreExtensions">
            <summary>
            Returns the configured child core extensions.
            </summary>
            <returns>Enumeration of the core extensions.</returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.SetChildExtensions(System.Func{System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.UnityContainerExtension}})">
            <summary>
            Set the set of standard core extensions for use by <see cref="M:EnergyTrading.Container.Unity.UnityExtensions.InstallCoreExtensions(Microsoft.Practices.Unity.IUnityContainer)"/>.
            </summary>
            <param name="extensions"></param>
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.SetCoreExtensions(System.Func{System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.UnityContainerExtension}})">
            <summary>
            Set the set of standard core extensions for use by <see cref="M:EnergyTrading.Container.Unity.UnityExtensions.InstallCoreExtensions(Microsoft.Practices.Unity.IUnityContainer)"/>.
            </summary>
            <param name="extensions"></param>
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.CheckConfigure``1(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Checks whether an extension is configured before returning it.
            </summary>
            <typeparam name="TConfigurator">Unity extension to check</typeparam>
            <param name="container">Container to check in.</param>
            <returns>Unity extension if found.</returns>
            <exception cref="T:System.NotImplementedException">Raised if the extension is not installed in the container.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EnergyTrading.Container.Unity.UnityExtensions.StandardChildExtensions" -->
        <!-- Badly formed XML comment ignored for member "M:EnergyTrading.Container.Unity.UnityExtensions.StandardCoreExtensions" -->
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.CanResolve``1(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Determines whether this type can be resolved as the default.
            </summary>
            <typeparam name="T">The type to test for resolution</typeparam>
            <param name="container">The unity container.</param>
            <returns>
                <c>true</c> if this instance can resolve; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.CanResolve``1(Microsoft.Practices.Unity.IUnityContainer,System.String)">
            <summary>
            Determines whether this type can be resolved with the specified name.
            </summary>
            <typeparam name="T">The type to test for resolution</typeparam>
            <param name="container">The unity container.</param>
            <param name="name">The name associated with the type.</param>
            <returns>
                <c>true</c> if this instance can resolve; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.CanResolveAny``1(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Determines whether this instance can be resolved at all with or without a name.
            </summary>
            <typeparam name="T">The type to test for resolution</typeparam>
            <param name="container">The unity container.</param>
            <returns>
                <c>true</c> if this instance can resolve; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.TryResolve``1(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Tries to resolve the type, returning null if not found.
            </summary>
            <typeparam name="T">The type to try and resolve</typeparam>
            <param name="container">The unity container.</param>
            <returns>An object of type <see typeparamref="T"/> if found, or <c>null</c> if not.</returns>
            <remarks>Needs the <see cref="T:EnergyTrading.Container.Unity.TypeTrackingExtension"/> installed.</remarks>
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.TryResolve``1(Microsoft.Practices.Unity.IUnityContainer,System.String)">
            <summary>
            Tries to resolve the type with the specified of name, returning null if not found.
            </summary>
            <typeparam name="T">The type to try and resolve</typeparam>
            <param name="container">The unity container.</param>
            <param name="name">The name associated with the type.</param>
            <returns>An object of type <see typeparamref="T"/> if found, or <c>null</c> if not.</returns>
            <remarks>Needs the <see cref="T:EnergyTrading.Container.Unity.TypeTrackingExtension"/> installed.</remarks>        
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.TryResolve``1(Microsoft.Practices.Unity.IUnityContainer,``0,System.String)">
            <summary>
            Tries to resolve the type, returning the passed in defaultValue if not found.
            </summary>
            <typeparam name="T">The type to try and resolve</typeparam>
            <param name="container">The unity container.</param>
            <param name="name">The name associated with the type.</param>
            <param name="defaultValue">The default value.</param>
            <returns>An object of type <see typeparamref="T"/> if found, or the <see paramref="defaultValue"/> if not.</returns>
            <remarks>Needs the <see cref="T:EnergyTrading.Container.Unity.TypeTrackingExtension"/> installed.</remarks>          
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.TryResolve(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.String)">
            <summary>
            Tries to resolve the type, returning the passed in defaultValue if not found.
            </summary>
            <param name="type">The type to try and resolve</param>
            <param name="container">The unity container.</param>
            <param name="name">The name associated with the type.</param>
            <returns>An object of the type if found, or the <see paramref="defaultValue"/> if not.</returns>
            <remarks>Needs the <see cref="T:EnergyTrading.Container.Unity.TypeTrackingExtension"/> installed.</remarks>          
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.ResolveAllToEnumerable``1(Microsoft.Practices.Unity.IUnityContainer,System.Boolean)">
            <summary>
            Resolves all registered T in the container, conditionally including the default unnamed
            registered T. When includeDefault is false, this is the same as the normal Unity
            ResolveAll.
            </summary>
            <typeparam name="T">The type to resolve</typeparam>
            <param name="container">The unity container.</param>
            <param name="includeDefault">if set to <c>true</c> include default value, else do not include default.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>Needs the <see cref="T:EnergyTrading.Container.Unity.TypeTrackingExtension"/> installed.</remarks>          
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.ResolveAllToEnumerable(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Boolean)">
            <summary>
            Resolves all registered T in the container, conditionally including the default unnamed
            registered T. When includeDefault is false, this is the same as the normal Unity
            ResolveAll.
            </summary>
            <param name="container">The unity container.</param>
            <param name="type">The type to resolve</param>
            <param name="includeDefault">if set to <c>true</c> include default value, else do not include default.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>Needs the <see cref="T:EnergyTrading.Container.Unity.TypeTrackingExtension"/> installed.</remarks>          
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.ResolveAllToArray``1(Microsoft.Practices.Unity.IUnityContainer,System.Boolean)">
            <summary>
            Resolves all registered T in the container, conditionally including the default unnamed
            registered T. When includeDefault is false, this is the same as the normal Unity
            ResolveAll.
            </summary>
            <typeparam name="T">The type to resolve</typeparam>
            <param name="container">The unity container.</param>
            <param name="includeDefault">if set to <c>true</c> include default value, else do not include default.</param>
            <returns>Array of T</returns>
            <remarks>Needs the <see cref="T:EnergyTrading.Container.Unity.TypeTrackingExtension"/> installed.</remarks>          
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.Resolve``1(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Resolve the type from the container.
            </summary>
            <param name="container">Container to use.</param>
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.Resolve``1(Microsoft.Practices.Unity.IUnityContainer,System.String)">
            <summary>
            Resolve the named typed from the container.
            </summary>
            <param name="container">Container to use.</param>
            <param name="name">Name of the registration</param>
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.StandardConfiguration(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Installs the core extensions and self-registers the service locator.
            </summary>
            <param name="container">Container to use.</param>
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.StandardConfiguration(Microsoft.Practices.Unity.IUnityContainer,System.Boolean)">
            <summary>
            Installs the core extensions and self-registers the service locator.
            </summary>
            <param name="container">Container to use.</param>
            <param name="useTryResolve">Whether to use the type tracking extension or unity directly</param>
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.InstallCoreExtensions(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Installs a pre-configured standard set of core extensions to the container after clearing any existing extensions.
            </summary>
            <remarks>
            Will also install <see cref="T:EnergyTrading.Container.Unity.InitialisedExtension"/> so that we only run this once per container.
            </remarks>
            <param name="container">Container to use.</param>
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.InstallExtensions(Microsoft.Practices.Unity.IUnityContainer,System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.UnityContainerExtension})">
            <summary>
            Installs extensions to the container.
            </summary>
            <param name="container">Container to modify</param>
            <param name="extensions">Extensions to install</param>
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.ConfigureRegistrars(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Configure any container registrars in the container
            </summary>
            <param name="container">Container to use.</param>
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.ConfigureChildContainer(Microsoft.Practices.Unity.IUnityContainer,System.String)">
            <summary>
            Creates a child container
            Loads from the config file
            Installs the core extensions.
            Initializes any registrars
            Registers in the parent 
            </summary>
            <param name="container">Container to use.</param>
            <param name="name">Name of the child container in the parent.</param>
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.ReplaceBehaviorExtensionsWithSafeExtension(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Replaces the Unity resolve with a safe version - only needed for Unity 5.1.505.0 and below.
            </summary>
            <param name="container">Container to use.</param>
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityExtensions.VerifyContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Attempt to verify a container by iterating over all registrations and attempting to resolve them
            </summary>
            <param name="container">Container to use.</param>
        </member>
        <member name="T:EnergyTrading.Container.Unity.UnityInstanceProvider">
            <summary>
            Unity WCF service instance provider.
            </summary>
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnityInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
            <summary>
            Get Service instace via unity container 
            </summary>
            <param name="instanceContext"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:EnergyTrading.Container.Unity.UnitySafeBehaviorExtension">
            <summary> 
            Replaces <see cref="T:Microsoft.Practices.Unity.UnityDefaultBehaviorExtension"/> to eliminate  <see cref="T:System.Threading.SynchronizationLockException"/> 
            exceptions that would otherwise occur when using <c>RegisterInstance</c>.  
            </summary>
            <remarks>Not needed for 2.1.505.2 and above as bug has been fixed.</remarks>
        </member>
        <member name="M:EnergyTrading.Container.Unity.UnitySafeBehaviorExtension.PreRegisteringInstance(System.Object,Microsoft.Practices.Unity.RegisterInstanceEventArgs)">
            <summary>
            Handles the <see cref="E:Microsoft.Practices.Unity.ExtensionContext.RegisteringInstance"/> event by
            ensuring that, if the lifetime manager is a  <see cref="T:Microsoft.Practices.Unity.SynchronizedLifetimeManager"/> that its
            <see cref="M:Microsoft.Practices.Unity.SynchronizedLifetimeManager.GetValue"/> method has been called.
            </summary> 
            <param name="sender">The object responsible for raising the event.</param>
            <param name="e">A <see cref="T:Microsoft.Practices.Unity.RegisterInstanceEventArgs"/> containing the event's data.</param>     
        </member>
        <member name="T:EnergyTrading.Container.Unity.UnityServiceBehavior">
            <summary>
            
            </summary>
        </member>
        <member name="T:EnergyTrading.Container.Unity.UnityServiceHost">
            <summary>
            Unity WCF service host
            </summary>
        </member>
        <member name="T:EnergyTrading.Container.Unity.UnityServiceHostFactory">
            <summary>
            Constructs a service host using an existing Unity container
            </summary>
        </member>
        <member name="T:EnergyTrading.Container.Unity.WebCallContextLifetimeManager">
            <summary>
            Contextual lifetime manager for use by ASP.NET.
            <para>
            Differs from CallContextLifetimeManager as we use HttpContext.Current to hold object references.
            This is required as ASP.NET can use multiple threads for a single request under heavy load and
            so CallContext is not adequate.
            </para>
            </summary>
        </member>
        <member name="T:EnergyTrading.FileProcessing.Configuration.FileProcessorConfigurator">
            <summary>
            Configures the file processor host.
            </summary>
        </member>
        <member name="M:EnergyTrading.FileProcessing.Configuration.FileProcessorConfigurator.ConfigureContainer">
            <summary>
            Default configuration of the container, including registration of service locator
            and loading of the container from the configuration file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.FileProcessing.Configuration.FileProcessorConfigurator.ConfigureRegistrars">
            <summary>
            Invokes all registrars registered with the container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.FileProcessing.Configuration.FileProcessorConfigurator.StandardRegistrars">
            <summary>
            Register the standard registrations.
            </summary>
            <remarks>
            You must separately register a <see cref="T:EnergyTrading.Mapping.IXmlMappingEngine"/> to
            support the message and event header serialization.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.FileProcessing.Configuration.FileProcessorConfigurator.Configure``1">
            <summary>
            Creates and executes a container registrar.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.FileProcessing.Configuration.FileProcessorConfigurator.ToProcessorHost">
            <summary>
            Resolve the publisher host and start the publisher.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.FileProcessing.Configuration.FileProcessorConfigurator.Register``1">
            <summary>
            Registers a container registrar for later invocation.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EnergyTrading.FileProcessing.Configuration.FileProcessorConfigurator.RunConfigurationTasks">
            <summary>
            Set up to invoke the global configuration tasks.
            </summary>
        </member>
        <member name="M:EnergyTrading.FileProcessing.Configuration.FileProcessorConfigurator.Shutdown">
            <summary>
            Invoke the <see cref="T:EnergyTrading.Configuration.IShutdownTask"/>s that are registered with the container.
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.Configuration.FileProcessorConfigurator.Container">
            <summary>
            Gets the container used by the configurator.
            </summary>
        </member>
        <member name="P:EnergyTrading.FileProcessing.Configuration.FileProcessorConfigurator.ExecuteConfigTasks">
            <summary>
            Gets or sets whether we should execute the configuration tasks.
            </summary>
        </member>
        <member name="T:EnergyTrading.FileProcessing.Registrars.FileProcessorHostRegistrar">
            <summary>
            Registers the file processor host and associated file processors
            </summary>
        </member>
        <member name="T:EnergyTrading.Registrars.ConfigurationManagerRegistrar">
            <summary>
            Registers <see cref="T:EnergyTrading.Configuration.IConfigurationManager"/> to use <see cref="T:EnergyTrading.Configuration.AppConfigConfigurationManager"/>
            </summary>
        </member>
        <member name="M:EnergyTrading.Registrars.ConfigurationManagerRegistrar.Register(Microsoft.Practices.Unity.IUnityContainer)">
            <copydocfrom cref="M:EnergyTrading.Container.Unity.IContainerRegistrar.Register(Microsoft.Practices.Unity.IUnityContainer)"/>
        </member>
        <member name="T:EnergyTrading.Registrars.MappingEngineRegistrar`1">
            <summary>
            Base registrar for versioned mappings.
            </summary>
        </member>
        <member name="M:EnergyTrading.Registrars.MappingEngineRegistrar`1.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:EnergyTrading.Registrars.MappingEngineRegistrar`1"/> class.
            </summary>
        </member>
        <member name="M:EnergyTrading.Registrars.MappingEngineRegistrar`1.IsVersionedMapper(System.Type,System.String,System.Double)">
            <summary>
            Gets a function that determines whether a mapper is the specified version.
            <para>
            Typically this will verify that the type is in the appropriate namespace.
            </para>
            </summary>
            <param name="type">Type to check</param>
            <param name="area">Mapping area to check, typically a partial namespace.</param>
            <param name="version">Version of the mapper, can be 0 (unversioned) or a major/minor version e.g. 2.1</param>
        </member>
        <member name="M:EnergyTrading.Registrars.MappingEngineRegistrar`1.CreateEngine(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Create the mapping engine but don't register it anywhere.
            </summary>
            <param name="container">Container for any dependencies.</param>
            <returns>A new mapping engine</returns>
        </member>
        <member name="M:EnergyTrading.Registrars.MappingEngineRegistrar`1.RegisterVersionedEngine(Microsoft.Practices.Unity.IUnityContainer,System.Version,System.Collections.Generic.IEnumerable{EnergyTrading.Registrars.MapperArea})">
            <summary>
            Uses the areas to register mappers into a self-contained container and creating a new 
            instance of a mapping engine which is registered into the parent container.         
            </summary>
            <param name="container">Parent container to register engine into</param>
            <param name="version">Version name to register the mapping engine against</param>
            <param name="areas">Mapping areas to register.</param>
            <returns>Child container used to register each of the mappers</returns>
        </member>
        <member name="M:EnergyTrading.Registrars.MappingEngineRegistrar`1.RegisterMappers(System.Collections.Generic.IEnumerable{EnergyTrading.Registrars.MapperArea})">
            <summary>
            Uses the areas to register mappers into a self-contained container.         
            </summary>
            <param name="areas">Mapping areas to register.</param>
        </member>
        <member name="M:EnergyTrading.Registrars.MappingEngineRegistrar`1.ParentRegister(Microsoft.Practices.Unity.IUnityContainer,System.Version,`0)">
            <summary>
            Register the engine in a container under a version number.
            </summary>
            <param name="container">Container to register in.</param>
            <param name="version">Version to register under</param>
            <param name="engine">Engine to register</param>
        </member>
        <member name="M:EnergyTrading.Registrars.MappingEngineRegistrar`1.ToVersionString(System.String,System.Double)">
            <summary>
            Convert an area and version into a version string.
            </summary>
            <param name="area">Area to register against</param>
            <param name="version">Version number e.g. 2, 2.1</param>
            <returns>Empty string if the area is empty, a formatted version otherwise e.g. {Area}.V1</returns>
        </member>
        <member name="M:EnergyTrading.Registrars.MappingEngineRegistrar`1.ToVersionString(System.Version)">
            <summary>
            Converts a version into a version string.
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="P:EnergyTrading.Registrars.MappingEngineRegistrar`1.SchemaResourceAssembly">
            <summary>
            Gets the assembly to check for schema resources.
            </summary>
            <remarks>By default the assembly containing the registrar</remarks>
        </member>
        <member name="P:EnergyTrading.Registrars.MappingEngineRegistrar`1.MapperType">
            <summary>
            Gets the type of mapper we are registering, typically an open type.
            </summary>
        </member>
        <member name="P:EnergyTrading.Registrars.MappingEngineRegistrar`1.CacheMappers">
            <summary>
            Gets or sets whether the mapping engines cache mappers.
            </summary>
            <remarks>
            For bulk operations, e.g. serializing 1K trades, the cost of resolving the 
            mappers becomes appreciable so we provide this as a way of caching them in
            the mapping engine.
            </remarks>
        </member>
        <member name="T:EnergyTrading.Registrars.RegistrarExtensions">
            <summary>
            Helpers for container registration.
            </summary>
        </member>
        <member name="M:EnergyTrading.Registrars.RegistrarExtensions.RegisterXmlMapper``2(Microsoft.Practices.Unity.IUnityContainer,System.String)">
            <summary>
            Register a XML mapper both ways (to and from XML) against a container.
            </summary>
            <typeparam name="TEntity">Entity we are mapping</typeparam>
            <typeparam name="TMapper">The mapper.</typeparam>
            <param name="container">Unity container to register the mapper in.</param>
            <param name="name">Optional name to register the XML mapper against</param>
        </member>
        <member name="T:EnergyTrading.Registrars.VersionedMappingEngineRegistrar">
            <summary>
            Base implementation of a mapper registrar for creating versioned <see cref="T:EnergyTrading.Mapping.IMappingEngine"/>s.
            </summary>
        </member>
        <member name="M:EnergyTrading.Registrars.VersionedMappingEngineRegistrar.CreateEngine(Microsoft.Practices.Unity.IUnityContainer)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Registrars.VersionedMappingEngineRegistrar.ParentRegister(Microsoft.Practices.Unity.IUnityContainer,System.Version,EnergyTrading.Mapping.IMappingEngine)">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.Registrars.VersionedMappingEngineRegistrar.MapperType">
            <summary>
            Gets the base type of the mapper, <see cref="T:EnergyTrading.Mapping.IXmlMapper`2"/>
            </summary>
        </member>
        <member name="T:EnergyTrading.Registrars.VersionedXmlMappingEngineRegistrar">
            <summary>
            Base implementation of a mapper registrar for creating versioned <see cref="T:EnergyTrading.Mapping.IXmlMappingEngine"/>s.
            </summary>
        </member>
        <member name="M:EnergyTrading.Registrars.VersionedXmlMappingEngineRegistrar.CreateEngine(Microsoft.Practices.Unity.IUnityContainer)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Registrars.VersionedXmlMappingEngineRegistrar.GetSchemaNames(System.String)">
            <summary>
            Gets the names of the schemas that are in the schema version.
            </summary>
            <param name="schemaVersion">Schema version to use</param>
            <returns>Enumeration of resource names with the specified schema version</returns>
            <remarks>We added a trailing '.' to ensure an exact match otherwise {Schema}.V2 would match against {Schema}.V2_2 schemas</remarks>
        </member>
        <member name="M:EnergyTrading.Registrars.VersionedXmlMappingEngineRegistrar.RegisterVersionedEngine(Microsoft.Practices.Unity.IUnityContainer,System.Version,System.Collections.Generic.IEnumerable{EnergyTrading.Registrars.MapperArea})">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Registrars.VersionedXmlMappingEngineRegistrar.RegisterSchemaSetVersion(Microsoft.Practices.Unity.IUnityContainer,System.Version)">
            <summary>
            Register all the XML schemas associated with a version in a <see cref="T:System.Xml.Schema.XmlSchemaSet"/>.
            </summary>
            <param name="container">Container to use</param>
            <param name="version">Version to use</param>
        </member>
        <member name="M:EnergyTrading.Registrars.VersionedXmlMappingEngineRegistrar.ParentRegister(Microsoft.Practices.Unity.IUnityContainer,System.Version,EnergyTrading.Mapping.IXmlMappingEngine)">
            <inheritdoc />
        </member>
        <member name="M:EnergyTrading.Registrars.VersionedXmlMappingEngineRegistrar.ToVersionString(System.Version)">
            <inheritdoc />
        </member>
        <member name="P:EnergyTrading.Registrars.VersionedXmlMappingEngineRegistrar.SchemaName">
            <summary>
            Gets or set the schema name for the versions.
            </summary>
        </member>
        <member name="P:EnergyTrading.Registrars.VersionedXmlMappingEngineRegistrar.MapperType">
            <summary>
            Gets the base type of the mapper, <see cref="T:EnergyTrading.Mapping.IXmlMapper`2"/>
            </summary>
        </member>
        <member name="T:EnergyTrading.Registrars.WrappersRegistrar">
            <summary>
            Registers standard framework implementations for <see cref="N:EnergyTrading.Wrappers"/> which allow abstraction over standard .NET capabilities e.g. file system, DateTime.Now etc
            </summary>
        </member>
        <member name="M:EnergyTrading.Registrars.WrappersRegistrar.Register(Microsoft.Practices.Unity.IUnityContainer)">
            <copydocfrom cref="M:EnergyTrading.Container.Unity.IContainerRegistrar.Register(Microsoft.Practices.Unity.IUnityContainer)"/>
        </member>
        <member name="T:EnergyTrading.Registrars.XmlMappingEngineFactoryRegistrar">
            <summary>
            Register up a <see cref="T:EnergyTrading.Mapping.IXmlMappingEngineFactory"/>
            </summary>
        </member>
        <member name="M:EnergyTrading.Registrars.XmlMappingEngineFactoryRegistrar.Register(Microsoft.Practices.Unity.IUnityContainer)">
            <copydocfrom cref="M:EnergyTrading.Container.Unity.IContainerRegistrar.Register(Microsoft.Practices.Unity.IUnityContainer)"/>
        </member>
        <member name="T:EnergyTrading.Registrars.XmlMappingEngineRegistrar">
            <summary>
            Provides for default resolution behaviour for a <see cref="T:EnergyTrading.Mapping.IXmlMappingEngine"/>.
            <para>
            For cases where multiple/versioned <see cref="T:EnergyTrading.Mapping.IXmlMappingEngine"/>s are required,
            you should inherit <see cref="T:EnergyTrading.Registrars.VersionedXmlMappingEngineRegistrar"/>
            </para>
            </summary>
        </member>
        <member name="M:EnergyTrading.Registrars.XmlMappingEngineRegistrar.Register(Microsoft.Practices.Unity.IUnityContainer)">
            <copydocfrom cref="M:EnergyTrading.Container.Unity.IContainerRegistrar.Register(Microsoft.Practices.Unity.IUnityContainer)"/>
        </member>
        <member name="T:EnergyTrading.Registrars.XmlSchemaRegistryRegistrar">
            <summary>
            Register the implementation for <see cref="T:EnergyTrading.Mapping.IXmlSchemaRegistry"/>.
            </summary>
        </member>
        <member name="M:EnergyTrading.Registrars.XmlSchemaRegistryRegistrar.Register(Microsoft.Practices.Unity.IUnityContainer)">
            <copydocfrom cref="M:EnergyTrading.Container.Unity.IContainerRegistrar.Register(Microsoft.Practices.Unity.IUnityContainer)"/>
        </member>
        <member name="T:EnergyTrading.Registrars.XmlVersionDetectorRegistrar">
            <summary>
            Registers the implementation of <see cref="T:EnergyTrading.Mapping.IXmlVersionDetector"/>.
            <para>
            This acts as a factory over all the named implementations that are registered in the container.
            </para>
            </summary>
        </member>
        <member name="M:EnergyTrading.Registrars.XmlVersionDetectorRegistrar.Register(Microsoft.Practices.Unity.IUnityContainer)">
            <copydocfrom cref="M:EnergyTrading.Container.Unity.IContainerRegistrar.Register(Microsoft.Practices.Unity.IUnityContainer)"/>
        </member>
    </members>
</doc>
