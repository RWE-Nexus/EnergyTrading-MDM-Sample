<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nexus.Logging.Log4Net</name>
    </assembly>
    <members>
        <member name="T:RWEST.Nexus.Logging.Log4Net.AsynchronousAdoNetAppender">
            <summary>
            ADO appender that operates asynchronously.
            </summary>
            <remarks>Adapted from http://technico.qnownow.com/asynchronous-ado-net-appender-in-log4net-c/ </remarks>
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.AsynchronousAdoNetAppender.OnClose">
            <summary>
            OnClose method is called, when the shut down of the repository is invoked.
            </summary>
        </member>
        <member name="P:RWEST.Nexus.Logging.Log4Net.AsynchronousAdoNetAppender.ConnectionString">
            <summary>
            Decrypt password in the connection string
            </summary>
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetConfiguration.Configure">
            <summary>
            Configures log4net, either from a logger.config file or the app.config
            </summary>
        </member>
        <member name="T:RWEST.Nexus.Logging.Log4Net.Log4NetLogger">
            <summary>
            A log4net implementation of ILogger.
            </summary>
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.#ctor(log4net.ILog)">
            <summary>
            Constructor taking a log4net ILog instance to delegate log calls to.
            </summary>
            <param name="log">A log4net ILog instance.</param>
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.Debug(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.Debug(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.DebugFormat(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.Info(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.Info(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.InfoFormat(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.Warn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.Warn(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.WarnFormat(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.Error(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.Error(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.ErrorFormat(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.Fatal(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.Fatal(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.FatalFormat(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="P:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.IsDebugEnabled">
            <inheritdoc />
        </member>
        <member name="P:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.IsInfoEnabled">
            <inheritdoc />
        </member>
        <member name="P:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.IsWarnEnabled">
            <inheritdoc />
        </member>
        <member name="P:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.IsErrorEnabled">
            <inheritdoc />
        </member>
        <member name="P:RWEST.Nexus.Logging.Log4Net.Log4NetLogger.IsFatalEnabled">
            <inheritdoc />
        </member>
        <member name="T:RWEST.Nexus.Logging.Log4Net.Log4NetLoggerFactory">
            <summary>
            Logger factory for log4net.
            </summary>
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLoggerFactory.GetLogger(System.String)">
            <summary>
            Returns a logger for the specified category.
            </summary>
            <param name="category">The category the logger is for.</param>
            <returns>A log4net ILogger implementation.</returns>
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLoggerFactory.GetLogger``1">
            <summary>
            Returns a logger for the specified type.
            </summary>
            <typeparam name="T">The type the logger is for.</typeparam>
            <returns>A log4net ILogger implementation.</returns>
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLoggerFactory.GetLogger(System.Type)">
            <summary>
            Returns a logger for the specified type.
            </summary>
            <param name="type">The type the logger is for.</param>
            <returns>A log4net ILogger implementation.</returns>
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLoggerFactory.Initialize">
            <summary>
            Configures log4net, if a configurator was supplied.
            </summary>
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.Log4NetLoggerFactory.Shutdown">
            <summary>
            Shuts down log4net.
            </summary>
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.TimerFlushAppender.Append(log4net.Core.LoggingEvent[])">
            <summary>
            Forward the logging events to the attached appenders 
            </summary>
            <param name="loggingEvents">The array of events to log.</param>
            <remarks>
            <para>
            Delivers the logging events to all the attached appenders.
            </para>
            </remarks>
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.TimerFlushAppender.AddAppender(log4net.Appender.IAppender)">
            <summary>
            Adds an <see cref="T:log4net.Appender.IAppender"/> to the list of appenders of this
            instance.
            </summary>
            <param name="newAppender">The <see cref="T:log4net.Appender.IAppender"/> to add to this appender.</param>
            <remarks>
            <para>
            If the specified <see cref="T:log4net.Appender.IAppender"/> is already in the list of
            appenders, then it won't be added again.
            </para>
            </remarks>
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.TimerFlushAppender.GetAppender(System.String)">
            <summary>
            Looks for the appender with the specified name.
            </summary>
            <param name="name">The name of the appender to lookup.</param>
            <returns>
            The appender with the specified name, or <c>null</c>.
            </returns>
            <remarks>
            <para>
            Get the named appender attached to this appender.
            </para>
            </remarks>
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.TimerFlushAppender.RemoveAllAppenders">
            <summary>
            Removes all previously added appenders from this appender.
            </summary>
            <remarks>
            <para>
            This is useful when re-reading configuration information.
            </para>
            </remarks>
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.TimerFlushAppender.RemoveAppender(log4net.Appender.IAppender)">
            <summary>
            Removes the specified appender from the list of appenders.
            </summary>
            <param name="appender">The appender to remove.</param>
            <returns>The appender removed from the list</returns>
            <remarks>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close"/> on the appender removed.
            </remarks>
        </member>
        <member name="M:RWEST.Nexus.Logging.Log4Net.TimerFlushAppender.RemoveAppender(System.String)">
            <summary>
            Removes the appender with the specified name from the list of appenders.
            </summary>
            <param name="name">The name of the appender to remove.</param>
            <returns>The appender removed from the list</returns>
            <remarks>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close"/> on the appender removed.
            </remarks>
        </member>
        <member name="F:RWEST.Nexus.Logging.Log4Net.TimerFlushAppender.appenderAttachedImpl">
            <summary>
            Implementation of the <see cref="T:log4net.Core.IAppenderAttachable"/> interface
            </summary>
        </member>
        <member name="P:RWEST.Nexus.Logging.Log4Net.TimerFlushAppender.Appenders">
            <summary>
            Gets the appenders contained in this appender as an 
            <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <remarks>
            If no appenders can be found, then an <see cref="T:log4net.Util.EmptyCollection"/> 
            is returned.
            </remarks>
            <returns>
            A collection of the appenders in this appender.
            </returns>
        </member>
    </members>
</doc>
