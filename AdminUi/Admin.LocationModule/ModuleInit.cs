// This code was generated by a tool: InfrastructureTemplates\ModuleInitTemplate.tt
namespace Admin.LocationModule
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    using Admin.LocationModule.ViewModels;
    using Admin.LocationModule.Views;

    using Common.Services;

    using EnergyTrading.Mdm.Client.Services;
    using EnergyTrading.Mdm.Client.WebClient;
    using EnergyTrading.Mdm.Contracts;
    using EnergyTrading.MDM.Contracts.Sample;

    using Microsoft.Practices.Prism.Events;
    using Microsoft.Practices.Prism.Modularity;
    using Microsoft.Practices.Unity;

    public class ModuleInit : IModule
    {
        private readonly IUnityContainer container;

        private readonly IApplicationMenuRegistry menuRegistry;

        public ModuleInit(IUnityContainer container, IApplicationMenuRegistry menuRegistry)
        {
            this.container = container;
            this.menuRegistry = menuRegistry;
        }

        public void Initialize()
        {
            this.Register();
            this.PopulateReferenceData();

            this.menuRegistry.RegisterMenuItem(
                "Location", 
                string.Empty, 
                typeof(LocationSearchResultsView), 
                new Uri(LocationViewNames.LocationAddView, UriKind.Relative), 
                "Name", 
                "_Name");
            this.menuRegistry.RegisterEntitySelector("Location", typeof(LocationSelectorView));
        }

        private void PopulateReferenceData()
        {
            ReferenceDataList message = null;
            message =
                this.container.Resolve<IMessageRequester>()
                    .Request<ReferenceDataList>(Server.Name + "ReferenceData/list/LocationType")
                    .Message;
            IList<string> type = message != null
                                     ? message.Select(data => data.Value).OrderBy(s => s).ToList()
                                     : new List<string>();

            this.container.RegisterInstance("types", type, new ContainerControlledLifetimeManager());
        }

        private void Register()
        {
            this.container.RegisterType<IMdmEntityService<Location>, MdmEntityService<Location>>(
                new ContainerControlledLifetimeManager(), 
                new InjectionConstructor(Server.Name + "location", new ResolvedParameter<IMessageRequester>()));
            this.container.RegisterType<object, LocationEditView>(LocationViewNames.LocationEditView);
            this.container.RegisterType<object, LocationAddView>(LocationViewNames.LocationAddView);
            this.container.RegisterType<object, LocationSearchResultsView>(LocationViewNames.LocationSearchResultsView);
            this.container.RegisterType<object, LocationEmbeddedSearchResultsView>(
                LocationViewNames.LocationEmbeddedSearchResultsView, 
                new ContainerControlledLifetimeManager());
            this.container.RegisterType<object, LocationEditCloneView>(LocationViewNames.LocationEditCloneView);
            this.container.RegisterType<object, LocationAddCloneView>(LocationViewNames.LocationAddCloneView);

            this.container.RegisterType<LocationAddViewModel>(
                new ContainerControlledLifetimeManager(), 
                new InjectionConstructor(
                    new ResolvedParameter<IEventAggregator>(), 
                    new ResolvedParameter<IMdmService>(), 
                    new ResolvedParameter<IList<string>>("types")));

            this.container.RegisterType<LocationEditViewModel>(
                new ContainerControlledLifetimeManager(), 
                new InjectionConstructor(
                    new ResolvedParameter<IEventAggregator>(), 
                    new ResolvedParameter<IMdmService>(), 
                    new ResolvedParameter<INavigationService>(), 
                    new ResolvedParameter<IMappingService>(), 
                    new ResolvedParameter<IApplicationCommands>(), 
                    new ResolvedParameter<IList<string>>("types")));

            this.container.RegisterType<LocationAddCloneViewModel>(
                new ContainerControlledLifetimeManager(), 
                new InjectionConstructor(
                    new ResolvedParameter<IEventAggregator>(), 
                    new ResolvedParameter<IMdmService>(), 
                    new ResolvedParameter<INavigationService>(), 
                    new ResolvedParameter<IList<string>>("types")));

            this.container.RegisterType<LocationEditCloneViewModel>(
                new ContainerControlledLifetimeManager(), 
                new InjectionConstructor(
                    new ResolvedParameter<IEventAggregator>(), 
                    new ResolvedParameter<IMdmService>(), 
                    new ResolvedParameter<INavigationService>(), 
                    new ResolvedParameter<IMappingService>(), 
                    new ResolvedParameter<IApplicationCommands>(), 
                    new ResolvedParameter<IList<string>>("types")));

            this.container.RegisterType<LocationSelectorView>();
            this.container.RegisterType<LocationSelectorViewModel>();

            this.container.RegisterInstance<Func<int, IMdmEntity>>(
                "Location", 
                entityId =>
                    {
                        var entityService = container.Resolve<IMdmEntityService<Location>>();
                        var response = entityService.Get(entityId);
                        return response.Message;
                    });
        }
    }
}