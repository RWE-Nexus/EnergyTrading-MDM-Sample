// This code was generated by a tool: ViewModelTemplates\EntityEmbeddedSearchResultsViewModelTemplate.tt
namespace Admin.LegalEntityModule.ViewModels
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Windows.Input;

    using Admin.LegalEntityModule.Uris;

    using Common.Extensions;
    using Common.Services;

    using EnergyTrading.Contracts.Search;
    using EnergyTrading.Mdm.Client.Services;
    using EnergyTrading.MDM.Contracts.Sample;
    using EnergyTrading.Search;

    using Microsoft.Practices.Prism;
    using Microsoft.Practices.Prism.Events;
    using Microsoft.Practices.Prism.Regions;
    using Microsoft.Practices.Prism.ViewModel;

    public class LegalEntityEmbeddedSearchResultsViewModel : NotificationObject, IActiveAware
    {
        private readonly IMdmService entityService;

        private readonly IEventAggregator eventAggregator;

        private readonly INavigationService navigationService;

        private readonly IRegionManager regionManager;

        private bool isActive;

        private ObservableCollection<LegalEntityViewModel> legalentitys;

        private Search search;

        private LegalEntityViewModel selectedLegalEntity;

        public LegalEntityEmbeddedSearchResultsViewModel(
            INavigationService navigationService, 
            IEventAggregator eventAggregator, 
            IMdmService entityService, 
            IRegionManager regionManager)
        {
            this.navigationService = navigationService;
            this.eventAggregator = eventAggregator;
            this.entityService = entityService;
            this.regionManager = regionManager;
            this.IsActiveChanged += this.OnIsActiveChanged;
        }

        public event EventHandler IsActiveChanged;

        public bool IsActive
        {
            get
            {
                return this.isActive;
            }

            set
            {
                if (this.isActive != value)
                {
                    this.isActive = value;
                }

                this.IsActiveChanged(this, EventArgs.Empty);
            }
        }

        public ObservableCollection<LegalEntityViewModel> LegalEntitys
        {
            get
            {
                return this.legalentitys;
            }

            set
            {
                this.legalentitys = value;
                this.RaisePropertyChanged(() => this.LegalEntitys);
                if (LegalEntitys != null && LegalEntitys.Count > 0 && SelectedLegalEntity == null)
                {
                    SelectedLegalEntity = LegalEntitys[0];
                }
            }
        }

        public LegalEntityViewModel SelectedLegalEntity
        {
            get
            {
                return this.selectedLegalEntity;
            }

            set
            {
                this.selectedLegalEntity = value;
                this.RaisePropertyChanged(() => this.SelectedLegalEntity);
            }
        }

        public void NavigateToDetail(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter && this.SelectedLegalEntity != null)
            {
                this.navigationService.NavigateMain(
                    new LegalEntityEditUri(this.SelectedLegalEntity.Id.Value, this.search.AsOf.Value));
            }
        }

        public void NavigateToDetailDoubleClick()
        {
            if (this.SelectedLegalEntity != null)
            {
                this.navigationService.NavigateMain(
                    new LegalEntityEditUri(this.SelectedLegalEntity.Id.Value, this.search.AsOf.Value));
            }
        }

        public void Sorting()
        {
            this.SelectedLegalEntity = null;
        }

        private IRegion MyRegion(IRegionCollection regions)
        {
            for (int i = regions.Count() - 1; i >= 0; i--)
            {
                if (regions.ElementAt(i).Name.EndsWith("-LegalEntitySearchResultsRegion")
                    && regions.ElementAt(i).Context != null)
                {
                    return regions.ElementAt(i);
                }
            }

            return null;
        }

        private void OnIsActiveChanged(object sender, EventArgs eventArgs)
        {
            if (this.isActive)
            {
                Search search = SearchBuilder.CreateSearch();

                var context = MyRegion(this.regionManager.Regions).Context as Tuple<int, DateTime?, string>;
                search.AsOf = context.Item2;

                string field;
                switch (context.Item3)
                {
                    case "LegalEntity":
                        field = "Parent.Id";
                        break;
                    case "Party":
                        field = "PartyRole.Party.Id";
                        break;
                    default:
                        field = context.Item3 + ".Id";
                        break;
                }

                if (field.Contains("|"))
                {
                    search.SearchFields.Combinator = SearchCombinator.Or;
                    var fields = field.Split(new[] { '|' });

                    foreach (string f in fields)
                    {
                        search.AddSearchCriteria(SearchCombinator.And)
                            .AddCriteria(f, SearchCondition.NumericEquals, context.Item1.ToString());
                    }
                }
                else
                {
                    search.AddSearchCriteria(SearchCombinator.And)
                        .AddCriteria(field, SearchCondition.NumericEquals, context.Item1.ToString());
                }

                this.entityService.ExecuteAsyncSearch<LegalEntity>(
                    this.search = search, 
                    response =>
                        {
                            IList<LegalEntity> searchResults = response;
                            this.LegalEntitys =
                                new ObservableCollection<LegalEntityViewModel>(
                                    searchResults.Select(
                                        x =>
                                        new LegalEntityViewModel(
                                            new EntityWithETag<LegalEntity>(x, null), 
                                            this.eventAggregator)).OrderBy(y => y.Name));
                        }, 
                    this.eventAggregator, 
                    false);
                return;
            }

            this.LegalEntitys = new ObservableCollection<LegalEntityViewModel>();
        }
    }
}