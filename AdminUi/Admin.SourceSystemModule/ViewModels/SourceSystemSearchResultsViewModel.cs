// This code was generated by a tool: ViewModelTemplates\EntitySearchResultsViewModelTemplate.tt
namespace Admin.SourceSystemModule.ViewModels
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Windows;
    using System.Windows.Input;
    using System.Windows.Media;

    using Admin.SourceSystemModule.Uris;

    using Common.Events;
    using Common.Extensions;
    using Common.Services;

    using EnergyTrading.Contracts.Search;
    using EnergyTrading.Mdm.Client.Services;
    using EnergyTrading.Mdm.Contracts;

    using Microsoft.Practices.Prism;
    using Microsoft.Practices.Prism.Events;
    using Microsoft.Practices.Prism.ViewModel;

    public class SourceSystemSearchResultsViewModel : NotificationObject, IActiveAware
    {
        private readonly IMdmService entityService;

        private readonly IEventAggregator eventAggregator;

        private readonly INavigationService navigationService;

        private bool isActive;

        private Search search;

        private SourceSystemViewModel selectedSourceSystem;

        private ObservableCollection<SourceSystemViewModel> sourcesystems;

        public SourceSystemSearchResultsViewModel(
            INavigationService navigationService, 
            IEventAggregator eventAggregator, 
            IMdmService entityService)
        {
            this.navigationService = navigationService;
            this.eventAggregator = eventAggregator;
            this.entityService = entityService;
            this.IsActiveChanged += this.OnIsActiveChanged;
        }

        public event EventHandler IsActiveChanged;

        public bool IsActive
        {
            get
            {
                return this.isActive;
            }

            set
            {
                if (this.isActive != value)
                {
                    this.isActive = value;
                }

                this.IsActiveChanged(this, EventArgs.Empty);
            }
        }

        public SourceSystemViewModel SelectedSourceSystem
        {
            get
            {
                return this.selectedSourceSystem;
            }

            set
            {
                this.selectedSourceSystem = value;
                this.RaisePropertyChanged(() => this.SelectedSourceSystem);
            }
        }

        public ObservableCollection<SourceSystemViewModel> SourceSystems
        {
            get
            {
                return this.sourcesystems;
            }

            set
            {
                this.sourcesystems = value;
                this.RaisePropertyChanged(() => this.SourceSystems);
                if (SourceSystems != null && SourceSystems.Count > 0 && SelectedSourceSystem == null)
                {
                    SelectedSourceSystem = SourceSystems[0];
                }
            }
        }

        public void NavigateToDetail(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter && this.SelectedSourceSystem != null)
            {
                this.navigationService.NavigateMain(
                    new SourceSystemEditUri(this.SelectedSourceSystem.Id.Value, this.search.AsOf.Value));
            }
        }

        public void NavigateToDetailDoubleClick(object sender, MouseButtonEventArgs e)
        {
            DependencyObject src = VisualTreeHelper.GetParent((DependencyObject)e.OriginalSource);

            if (src.GetType() == typeof(System.Windows.Controls.ContentPresenter))
            {
                if (this.SelectedSourceSystem != null)
                {
                    this.navigationService.NavigateMain(
                        new SourceSystemEditUri(this.SelectedSourceSystem.Id.Value, this.search.AsOf.Value));
                }
            }
        }

        public void Sorting()
        {
            this.SelectedSourceSystem = null;
        }

        private void OnIsActiveChanged(object sender, EventArgs eventArgs)
        {
            if (this.isActive)
            {
                this.eventAggregator.Subscribe<SearchRequestEvent>(this.SearchRequest);
                return;
            }

            this.eventAggregator.Unsubscribe<SearchRequestEvent>(this.SearchRequest);
        }

        private void SearchRequest(SearchRequestEvent searchRequestEvent)
        {
            searchRequestEvent.Search.SearchOptions.OrderBy = "Name";

            this.entityService.ExecuteAsyncSearch<SourceSystem>(
                this.search = searchRequestEvent.Search, 
                response =>
                    {
                        IList<SourceSystem> searchResults = response;
                        this.SourceSystems =
                            new ObservableCollection<SourceSystemViewModel>(
                                searchResults.Select(
                                    x =>
                                    new SourceSystemViewModel(
                                        new EntityWithETag<SourceSystem>(x, null), 
                                        this.eventAggregator)).OrderBy(y => y.Name));
                    }, 
                this.eventAggregator);
        }
    }
}