// This code was generated by a tool: ViewModelTemplates\EntityAddCloneViewModelTemplate.tt
namespace Admin.SourceSystemModule.ViewModels
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    using Uris;

    using Common;
    using Common.Events;
    using Common.Extensions;
    using Common.Services;
    using Common.UI;

    using Microsoft.Practices.Prism.Events;
    using Microsoft.Practices.Prism.Interactivity.InteractionRequest;
    using Microsoft.Practices.Prism.Regions;
    using Microsoft.Practices.Prism.ViewModel;

    using EnergyTrading.Mdm.Client.Services;
    using EnergyTrading;
    using EnergyTrading.MDM.Contracts.Sample; using EnergyTrading.Mdm.Contracts;

    public class SourceSystemAddCloneViewModel : NotificationObject, INavigationAware, IConfirmNavigationRequest
    {
        private readonly InteractionRequest<Confirmation> confirmationFromViewModelInteractionRequest;
        private readonly IMdmService entityService;
        private readonly INavigationService navigationService;
        private readonly IEventAggregator eventAggregator;

        private SourceSystemViewModel sourcesystem;

        public SourceSystemAddCloneViewModel(IEventAggregator eventAggregator, IMdmService entityService, INavigationService navigationService )
        {
            this.eventAggregator = eventAggregator;
            this.confirmationFromViewModelInteractionRequest = new InteractionRequest<Confirmation>();
            this.entityService = entityService;
            this.navigationService = navigationService;
            this.SourceSystem = new SourceSystemViewModel(this.eventAggregator);            
                    }

        /// <summary>
        /// Gets the notification from view model interaction request. View binds to this property
        /// </summary>
        public IInteractionRequest ConfirmationFromViewModelInteractionRequest
        {
            get
            {
                return this.confirmationFromViewModelInteractionRequest;
            }
        }

        public SourceSystemViewModel SourceSystem
        {
            get
            {
                return this.sourcesystem;
            }

            set
            {
                this.sourcesystem = value;
                this.RaisePropertyChanged(() => this.SourceSystem);
            }
        }
        
        
        public void SelectParent()
        {
            this.eventAggregator.Publish(new EntitySelectEvent("SourceSystem","Parent"));
        }
        
        public void DeleteParent()
        {
            this.SourceSystem.ParentId = null;
            this.SourceSystem.ParentName = string.Empty;
        }
        
        
        public void ConfirmNavigationRequest(NavigationContext navigationContext, Action<bool> continuationCallback)
        {
            if (this.SourceSystem.CanSave)
            {
                this.eventAggregator.Publish(new DialogOpenEvent(true));
                this.confirmationFromViewModelInteractionRequest.Raise(
                    new Confirmation { Content = Message.UnsavedChanges, Title = Message.UnsavedChangeTitle },
                    confirmation =>
                        {
                            continuationCallback(confirmation.Confirmed);
                            this.eventAggregator.Publish(new DialogOpenEvent(false));
                        });
            }
            else
            {
                continuationCallback(true);
            }
        }

        public bool IsNavigationTarget(NavigationContext navigationContext)
        {
            return true;
        }

        public void OnNavigatedFrom(NavigationContext navigationContext)
        {
            this.eventAggregator.Unsubscribe<SaveEvent>(this.Save);
            this.eventAggregator.Unsubscribe<EntitySelectedEvent>(this.EntitySelected);
        }

        public void OnNavigatedTo(NavigationContext navigationContext)
        {
            this.eventAggregator.Subscribe<SaveEvent>(this.Save);
            this.eventAggregator.Subscribe<EntitySelectedEvent>(this.EntitySelected);

            int idParam = int.Parse(navigationContext.Parameters[NavigationParameters.EntityId]);

            var validAtString = DateTime.Parse(navigationContext.Parameters[NavigationParameters.ValidAtDate]);
            this.LoadSourceSystemFromService(idParam, validAtString);
        }

        private void LoadSourceSystemFromService(int entityId, DateTime validAt)
        {
            this.entityService.ExecuteAsync(
                () => this.entityService.Get<SourceSystem>(entityId, validAt),
                (response) =>
                {
                    this.SourceSystem =
                        new SourceSystemViewModel(
                            new EntityWithETag<SourceSystem>(response.Message, response.Tag),
                            this.eventAggregator);

                    this.RaisePropertyChanged(string.Empty);
                },
                this.eventAggregator);
        }

        private void EntitySelected(EntitySelectedEvent obj)
        {
            switch (obj.EntityKey)
            {
                case "Parent":
                    this.SourceSystem.ParentId = obj.Id;
                    this.SourceSystem.ParentName = obj.EntityValue;
                    break;
          }
                        }

        private void Save(SaveEvent saveEvent)
        {
            this.entityService.ExecuteAsync(
                            () => this.entityService.Create(this.SourceSystem.Model()),
                            response =>
                                {
                                    // clear down view model - this allows us to navigate away
                                    var originalId = this.SourceSystem.Id.Value;
                                    var originalStartDate = this.SourceSystem.Start;
                                    this.SourceSystem = new SourceSystemViewModel(this.eventAggregator);

                                    this.navigationService.NavigateMain(new SourceSystemEditCloneUri(
                                        response.Message.MdmId().Value, 
                                        response.Message.MdmSystemData.StartDate.Value,
                                        originalId, 
                                        originalStartDate));
                                },
                            this.eventAggregator);
        }

        public void StartToday()
        {
            this.SourceSystem.Start = SystemTime.UtcNow().Date;
        }

        public void StartMinimum()
        {
            this.SourceSystem.Start = DateUtility.MinDate;
        }
    }
}
    