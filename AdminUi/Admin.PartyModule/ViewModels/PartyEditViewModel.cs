// This code was generated by a tool: ViewModelTemplates\EntityEditViewModelTemplate.tt
namespace Admin.PartyModule.ViewModels
{
    using System;
    using System.Collections.ObjectModel;
    using System.Collections.Generic;
    using System.Linq;
    using System.Windows.Input;

    using Common;
    
    using Common.Authorisation;
    using Common.Commands;
    using Common.Events;
    using Common.Extensions;
    using Common.Services;
    using Common.UI;
    using Common.UI.Uris;
    using Common.UI.ViewModels;

    using EnergyTrading.Mdm.Contracts;

    using Microsoft.Practices.Prism.Events;
    using Microsoft.Practices.Prism.Interactivity.InteractionRequest;
    using Microsoft.Practices.Prism.Regions;
    using Microsoft.Practices.Prism.ViewModel;

    using EnergyTrading;
    using EnergyTrading.Mdm.Client.WebClient;
    using EnergyTrading.MDM.Contracts.Sample;
    using EnergyTrading.Mdm.Client.Services;

    using Uris;

    public class PartyEditViewModel : NotificationObject, IConfirmNavigationRequest
    {
        private readonly InteractionRequest<Confirmation> confirmationFromViewModelInteractionRequest;
        private readonly IMdmService entityService;
        private readonly IEventAggregator eventAggregator;
        private readonly INavigationService navigationService;
        private readonly IMappingService mappingService;
        private ObservableCollection<MappingViewModel> mappings;
        private PartyViewModel party;
        private MappingViewModel selectedMapping;
        private ICommand deleteMappingCommand;
        private ICommand updateMappingCommand;
        private DateTime validAtString;
        private readonly IApplicationCommands applicationCommands;
        
        private bool showBrokers;
        private bool showBusinessUnits;
        private bool showExchanges;
        private bool showPartyAccountabilitys;
        private bool showPartyOverrides;
        private bool showPartyRoles;
        private bool showShipperCodes;

        public PartyEditViewModel(
            IEventAggregator eventAggregator,
            IMdmService entityService,
            INavigationService navigationService,
            IMappingService mappingService,
            IApplicationCommands applicationCommands)
        {
            this.navigationService = navigationService;
            this.mappingService = mappingService;
            this.applicationCommands = applicationCommands;
            
            this.eventAggregator = eventAggregator;
            this.entityService = entityService;
            this.confirmationFromViewModelInteractionRequest = new InteractionRequest<Confirmation>();
            this.CanEdit = AuthorisationHelpers.HasEntityRights("Party");

        }

        public bool CanEdit { get; private set; }


        public ICommand DeleteMappingCommand
        {
            get
            {
                if (this.deleteMappingCommand == null)
                {
                    this.deleteMappingCommand = new RelayCommand(param => this.DeleteMapping(param), param => CanEditOrDeleteMapping(param));
                }

                return this.deleteMappingCommand;
            }
        }

        public ICommand UpdateMappingCommand
        {
            get
            {
                if (this.updateMappingCommand == null)
                {
                    this.updateMappingCommand = new RelayCommand(param => this.UpdateMapping(param), param => CanEditOrDeleteMapping(param));
                }

                return this.updateMappingCommand;
            }
        }

        private bool CanEditOrDeleteMapping(object mapping)
        {
            var mappingViewModel = mapping as MappingViewModel;
            if (mappingViewModel == null)
            {
                return false;
            }

            if (mappingViewModel.MappingId == null)
            {
                return false;
            }

            return CanEditOrDeleteMapping(mappingViewModel.MappingId.Value);
        }

        private bool CanEditOrDeleteMapping(int mappingId)
        {
            var system = Mappings.Where(x => x.MappingId == mappingId).Select(x => x.SystemName).FirstOrDefault();
            return AuthorisationHelpers.HasMappingRights("Party", system);
        }

        private void DeleteMapping(object mapping)
        {
            var mappingViewModel = mapping as MappingViewModel;
            if (mappingViewModel == null)
            {
                return;
            }

            if (mappingViewModel.MappingId == null)
            {
                return;
            }

            this.eventAggregator.Publish(new ConfirmMappingDeleteEvent(mappingViewModel.MappingId.Value,
                mappingViewModel.MappingString, mappingViewModel.SystemName));
        }

        private void UpdateMapping(object mapping)
        {
            var mappingViewModel = mapping as MappingViewModel;
            if (mappingViewModel == null)
            {
                return;
            }

            if (mappingViewModel.MappingId == null)
            {
                return;
            }

            if (mappingViewModel != null)
            {
                this.eventAggregator.Publish(new MappingUpdateEvent(this.Party.Id.Value, mappingViewModel.MappingId.Value, mappingViewModel.MappingString, "Party"));
            }
        }

        private bool CanAddMappings()
        {
            foreach (var system in mappingService.GetSourceSystemNames())
            {
                if (AuthorisationHelpers.HasMappingRights("Party", system))
                {
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Gets the notification from view model interaction request. View binds to this property
        /// </summary>
        public IInteractionRequest ConfirmationFromViewModelInteractionRequest
        {
            get
            {
                return this.confirmationFromViewModelInteractionRequest;
            }
        }

        public ObservableCollection<MappingViewModel> Mappings
        {
            get
            {
                return this.mappings;
            }

            set
            {
                this.mappings = value;
                this.RaisePropertyChanged(() => this.Mappings);
            }
        }

        public PartyViewModel Party
        {
            get
            {
                return this.party;
            }

            set
            {
                this.party = value;
                this.RaisePropertyChanged(() => this.Party);
            }
        }

        public MappingViewModel SelectedMapping
        {
            get
            {
                return this.selectedMapping;
            }

            set
            {
                this.selectedMapping = value;
                this.RaisePropertyChanged(() => this.SelectedMapping);
            }
        }

        public void NavigateToDetail(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                this.NavigateToDetailScreen();
            }
        }

        public void NavigateToDetailDoubleClick()
        {
            this.NavigateToDetailScreen();
        }

        private void NavigateToDetailScreen()
        {
            if (this.SelectedMapping != null && CanEditOrDeleteMapping(this.SelectedMapping))
            {
                if (!this.SelectedMapping.IsMdmId)
                {
                    this.navigationService.NavigateMain(
                        new MappingEditUri(
                            this.Party.Id.Value, "Party", Convert.ToInt32(this.SelectedMapping.MappingId), this.Party.Name));
                    return;
                }

                this.eventAggregator.Publish(new StatusEvent("MdmSystemData ID cannot be edited"));
            }
        }

        public void Sorting()
        {
            this.SelectedMapping = null;
        }

        public void ConfirmNavigationRequest(NavigationContext navigationContext, Action<bool> continuationCallback)
        {
            if (this.Party.CanSave)
            {
                this.eventAggregator.Publish(new DialogOpenEvent(true));
                this.confirmationFromViewModelInteractionRequest.Raise(
                    new Confirmation { Content = Message.UnsavedChanges, Title = Message.UnsavedChangeTitle },
                    confirmation =>
                    {
                        continuationCallback(confirmation.Confirmed);
                        this.eventAggregator.Publish(new DialogOpenEvent(false));
                    });
            }
            else
            {
                continuationCallback(true);
            }
        }

        public bool IsNavigationTarget(NavigationContext navigationContext)
        {
            return true;
        }

        public void OnNavigatedFrom(NavigationContext navigationContext)
        {
            this.eventAggregator.Unsubscribe<SaveEvent>(this.Save);
            this.eventAggregator.Unsubscribe<CreateEvent>(this.CreateMapping);
            this.eventAggregator.Unsubscribe<EntitySelectedEvent>(this.EntitySelected);
            this.eventAggregator.Unsubscribe<MappingUpdatedEvent>(this.MappingUpdated);
            this.eventAggregator.Unsubscribe<MappingDeleteConfirmedEvent>(this.MappingDeleteConfirmed);

            this.ShowBrokers = false;
            this.applicationCommands.CloseView("BrokerEmbeddedSearchResultsView", "Party-BrokerSearchResultsRegion");

            this.ShowBusinessUnits = false;
            this.applicationCommands.CloseView("BusinessUnitEmbeddedSearchResultsView", "Party-BusinessUnitSearchResultsRegion");

            this.ShowExchanges = false;
            this.applicationCommands.CloseView("ExchangeEmbeddedSearchResultsView", "Party-ExchangeSearchResultsRegion");

            this.ShowPartyAccountabilitys = false;
            this.applicationCommands.CloseView("PartyAccountabilityEmbeddedSearchResultsView", "Party-PartyAccountabilitySearchResultsRegion");

            this.ShowPartyOverrides = false;
            this.applicationCommands.CloseView("PartyOverrideEmbeddedSearchResultsView", "Party-PartyOverrideSearchResultsRegion");

            this.ShowPartyRoles = false;
            this.applicationCommands.CloseView("PartyRoleEmbeddedSearchResultsView", "Party-PartyRoleSearchResultsRegion");

            this.ShowShipperCodes = false;
            this.applicationCommands.CloseView("ShipperCodeEmbeddedSearchResultsView", "Party-ShipperCodeSearchResultsRegion");

        }

        public void OnNavigatedTo(NavigationContext navigationContext)
        {
            this.eventAggregator.Subscribe<SaveEvent>(this.Save);
            this.eventAggregator.Subscribe<CreateEvent>(this.CreateMapping);
            this.eventAggregator.Subscribe<MappingUpdatedEvent>(this.MappingUpdated);
            this.eventAggregator.Subscribe<MappingDeleteConfirmedEvent>(this.MappingDeleteConfirmed);
            this.eventAggregator.Subscribe<EntitySelectedEvent>(this.EntitySelected);
            int idParam = int.Parse(navigationContext.Parameters[NavigationParameters.EntityId]);
            DateTime validAtStringParam = DateTime.Parse(navigationContext.Parameters[NavigationParameters.ValidAtDate]);

            if (this.Party == null || this.validAtString != validAtStringParam ||
                this.Party.Id != idParam)
            {
                this.ShowBrokers = false;
                this.applicationCommands.CloseView("BrokerEmbeddedSearchResultsView", "Party-BrokerSearchResultsRegion");

                this.ShowBusinessUnits = false;
                this.applicationCommands.CloseView("BusinessUnitEmbeddedSearchResultsView", "Party-BusinessUnitSearchResultsRegion");

                this.ShowExchanges = false;
                this.applicationCommands.CloseView("ExchangeEmbeddedSearchResultsView", "Party-ExchangeSearchResultsRegion");

                this.ShowPartyAccountabilitys = false;
                this.applicationCommands.CloseView("PartyAccountabilityEmbeddedSearchResultsView", "Party-PartyAccountabilitySearchResultsRegion");

                this.ShowPartyOverrides = false;
                this.applicationCommands.CloseView("PartyOverrideEmbeddedSearchResultsView", "Party-PartyOverrideSearchResultsRegion");

                this.ShowPartyRoles = false;
                this.applicationCommands.CloseView("PartyRoleEmbeddedSearchResultsView", "Party-PartyRoleSearchResultsRegion");

                this.ShowShipperCodes = false;
                this.applicationCommands.CloseView("ShipperCodeEmbeddedSearchResultsView", "Party-ShipperCodeSearchResultsRegion");

            }

            this.validAtString = validAtStringParam;
            this.LoadPartyFromService(idParam, validAtString);

            this.applicationCommands.OpenView("BrokerEmbeddedSearchResultsView", "Party-BrokerSearchResultsRegion", idParam, validAtStringParam, "Party");

            this.applicationCommands.OpenView("BusinessUnitEmbeddedSearchResultsView", "Party-BusinessUnitSearchResultsRegion", idParam, validAtStringParam, "Party");

            this.applicationCommands.OpenView("ExchangeEmbeddedSearchResultsView", "Party-ExchangeSearchResultsRegion", idParam, validAtStringParam, "Party");

            this.applicationCommands.OpenView("PartyAccountabilityEmbeddedSearchResultsView", "Party-PartyAccountabilitySearchResultsRegion", idParam, validAtStringParam, "Party");

            this.applicationCommands.OpenView("PartyOverrideEmbeddedSearchResultsView", "Party-PartyOverrideSearchResultsRegion", idParam, validAtStringParam, "Party");

            this.applicationCommands.OpenView("PartyRoleEmbeddedSearchResultsView", "Party-PartyRoleSearchResultsRegion", idParam, validAtStringParam, "Party");

            this.applicationCommands.OpenView("ShipperCodeEmbeddedSearchResultsView", "Party-ShipperCodeSearchResultsRegion", idParam, validAtStringParam, "Party");

            this.eventAggregator.Publish(new CanCreateNewChangeEvent(CanAddMappings()));
        }

        public bool ShowBrokers
        {
            get
            {
                return this.showBrokers;
            }

            set
            {
                this.showBrokers = value;
                this.RaisePropertyChanged(() => this.ShowBrokers);
            }
        }
        public bool ShowBusinessUnits
        {
            get
            {
                return this.showBusinessUnits;
            }

            set
            {
                this.showBusinessUnits = value;
                this.RaisePropertyChanged(() => this.ShowBusinessUnits);
            }
        }
        public bool ShowExchanges
        {
            get
            {
                return this.showExchanges;
            }

            set
            {
                this.showExchanges = value;
                this.RaisePropertyChanged(() => this.ShowExchanges);
            }
        }
        public bool ShowPartyAccountabilitys
        {
            get
            {
                return this.showPartyAccountabilitys;
            }

            set
            {
                this.showPartyAccountabilitys = value;
                this.RaisePropertyChanged(() => this.ShowPartyAccountabilitys);
            }
        }
        public bool ShowPartyOverrides
        {
            get
            {
                return this.showPartyOverrides;
            }

            set
            {
                this.showPartyOverrides = value;
                this.RaisePropertyChanged(() => this.ShowPartyOverrides);
            }
        }
        public bool ShowPartyRoles
        {
            get
            {
                return this.showPartyRoles;
            }

            set
            {
                this.showPartyRoles = value;
                this.RaisePropertyChanged(() => this.ShowPartyRoles);
            }
        }
        public bool ShowShipperCodes
        {
            get
            {
                return this.showShipperCodes;
            }

            set
            {
                this.showShipperCodes = value;
                this.RaisePropertyChanged(() => this.ShowShipperCodes);
            }
        }



        private void EntitySelected(EntitySelectedEvent obj)
        {
        }


        private void MappingUpdated(MappingUpdatedEvent updatedEvent)
        {
            if (updatedEvent.Cancelled)
                return;

            EntityWithETag<MdmId> entityWithETag;
            if (!TryGetMapping("Party", updatedEvent, out entityWithETag))
                return;

            if (entityWithETag.Object.EndDate <= updatedEvent.StartDate)
            {
                var message = string.Format("The start date of the new mapping must be before {0}", entityWithETag.Object.EndDate);
                this.eventAggregator.Publish(new ErrorEvent(message));
                return;
            }

            var newMapping = NewMapping(entityWithETag, updatedEvent);

            if (!TryCreateMapping("Party", newMapping, updatedEvent))
                return;

            if (!TryGetMapping("Party", updatedEvent, out entityWithETag))
                return;

            entityWithETag.Object.EndDate = updatedEvent.StartDate.AddSeconds(-1);

            if (!TryUpdateMapping("Party", entityWithETag, updatedEvent))
                return;

            this.LoadPartyFromService(updatedEvent.EntityId, updatedEvent.StartDate, true);
            this.eventAggregator.Publish(new StatusEvent(Message.MappingUpdated));
        }

        private void MappingDeleteConfirmed(MappingDeleteConfirmedEvent obj)
        {
            if (obj.Cancelled)
                return;

            var response = this.mappingService.DeleteMapping(
                "Party",
                obj.MappingId,
                this.Party.Id.Value);

            if (response.IsValid)
            {
                this.LoadPartyFromService(this.party.Id.Value, validAtString, true);
                this.eventAggregator.Publish(new StatusEvent(Message.MappingDeleted));
                return;
            }

            this.eventAggregator.Publish(
                new ErrorEvent(response.Fault != null ? response.Fault.Message : "Unknown Error"));
        }

        private bool TryGetMapping(string entityName, MappingUpdatedEvent updatedEvent, out EntityWithETag<MdmId> mapping)
        {
            mapping = mappingService.GetMapping(entityName, updatedEvent.EntityId, updatedEvent.MappingId);
            if (mapping.Object == null)
            {
                this.eventAggregator.Publish(
                    new ErrorEvent("Unable to retrieve original mapping"));
                return false;
            }
            return true;
        }

        private static MdmId NewMapping(EntityWithETag<MdmId> entityWithETag, MappingUpdatedEvent updatedEvent)
        {
            return new MdmId
                {
                    DefaultReverseInd = false,
                    IsMdmId = false,
                    SourceSystemOriginated = false,
                    StartDate = updatedEvent.StartDate,
                    Identifier = updatedEvent.NewValue,
                    EndDate = entityWithETag.Object.EndDate,
                    SystemName = entityWithETag.Object.SystemName,
                };
        }

        private bool TryUpdateMapping(string entityName, EntityWithETag<MdmId> entityWithETag, MappingUpdatedEvent updatedEvent)
        {
            var response = mappingService.UpdateMapping(entityName, updatedEvent.MappingId, updatedEvent.EntityId, entityWithETag);
            if (!response.IsValid)
            {
                this.eventAggregator.Publish(
                    new ErrorEvent(response.Fault != null ? response.Fault.Message : "Unknown Error"));
                return false;
            }
            return true;
        }

        private bool TryCreateMapping(string entityName, MdmId newMapping, MappingUpdatedEvent updatedEvent)
        {
            var response = mappingService.CreateMapping(entityName, updatedEvent.EntityId, newMapping);
            if (!response.IsValid)
            {
                this.eventAggregator.Publish(
                    new ErrorEvent(response.Fault != null ? response.Fault.Message : "Unknown Error"));
                return false;
            }
            return true;
        }

        private void CreateMapping(CreateEvent obj)
        {
            this.navigationService.NavigateMain(new MappingAddUri(this.Party.Id.Value, "Party", this.Party.Name));
        }

        private void LoadPartyFromService(int partyId, DateTime validAt, bool publishChangeNotification = false)
        {
            this.entityService.ExecuteAsync(
                () => this.entityService.Get<Party>(partyId, validAt),
                (response) =>
                {
                    this.Party = new PartyViewModel(new EntityWithETag<Party>(response.Message, response.Tag), this.eventAggregator);

                    this.Mappings =
                        new ObservableCollection<MappingViewModel>(
                            response.Message.Identifiers.Select(
                                nexusId =>
                                new MappingViewModel(
                                    new EntityWithETag<MdmId>(nexusId, null), this.eventAggregator)));

                    this.RaisePropertyChanged(string.Empty);
                },
                this.eventAggregator);
        }

        private void Save(SaveEvent saveEvent)
        {
            this.entityService.ExecuteAsync(
                         () => this.entityService.Update(this.Party.Id.Value, this.Party.Model(), this.Party.ETag),
                         () => this.LoadPartyFromService(this.Party.Id.Value, this.Party.Start, true),
                         string.Format(Message.EntityUpdatedFormatString, "Party"),
                         this.eventAggregator);
        }

        public void StartToday()
        {
            this.Party.Start = SystemTime.UtcNow().Date;
        }

        public void StartMinimum()
        {
            this.Party.Start = DateUtility.MinDate;
        }
    }
}
