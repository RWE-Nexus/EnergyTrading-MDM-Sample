// This code was generated by a tool: ViewModelTemplates\EntityEmbeddedSearchResultsViewModelTemplate.tt

using Common;
using Microsoft.Practices.Prism.Regions;

namespace Admin.PartyModule.ViewModels
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Windows.Input;
    using Admin.PartyModule.Uris;
    using Admin.PartyModule.Views;
    using Common.Events;
    using Common.Extensions;
    using Common.Services;
    using Microsoft.Practices.Prism;
    using Microsoft.Practices.Prism.Events;
    using Microsoft.Practices.Prism.ViewModel;
    using EnergyTrading.Contracts.Search;
    using EnergyTrading.Mdm.Client.Services;
    using EnergyTrading.MDM.Contracts.Sample;
    using EnergyTrading.Search;

    public class PartyEmbeddedSearchResultsViewModel : NotificationObject, IActiveAware
    {
        private readonly IMdmService entityService;
        private readonly IRegionManager regionManager;
        private readonly IEventAggregator eventAggregator;
        private readonly INavigationService navigationService;
        private bool isActive;

        private ObservableCollection<PartyViewModel> partys;

        private Search search;
        private PartyViewModel selectedParty;

        public PartyEmbeddedSearchResultsViewModel(
            INavigationService navigationService, 
            IEventAggregator eventAggregator, 
            IMdmService entityService, 
            IRegionManager regionManager)
        {
            this.navigationService = navigationService;
            this.eventAggregator = eventAggregator;
            this.entityService = entityService;
            this.regionManager = regionManager;
            this.IsActiveChanged += this.OnIsActiveChanged;
        }

        public event EventHandler IsActiveChanged;

        public bool IsActive
        {
            get
            {
                return this.isActive;
            }

            set
            {
                if (this.isActive != value)
                {
                    this.isActive = value;
                }

                this.IsActiveChanged(this, EventArgs.Empty);
            }
        }

        public ObservableCollection<PartyViewModel> Partys
        {
            get
            {
                return this.partys;
            }

            set
            {
                this.partys = value;
                this.RaisePropertyChanged(() => this.Partys);
                if (Partys != null && Partys.Count > 0 && SelectedParty == null) 
                    SelectedParty = Partys[0];
            }
        }

        public PartyViewModel SelectedParty
        {
            get
            {
                return this.selectedParty;
            }

            set
            {
                this.selectedParty = value;
                this.RaisePropertyChanged(() => this.SelectedParty);
            }
        }
        
        public void NavigateToDetail(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter && this.SelectedParty != null)
            {
                this.navigationService.NavigateMain(new PartyEditUri(this.SelectedParty.Id.Value, this.search.AsOf.Value));
            }
        }

        public void NavigateToDetailDoubleClick()
        {
            if (this.SelectedParty != null)
            {
                this.navigationService.NavigateMain(new PartyEditUri(this.SelectedParty.Id.Value, this.search.AsOf.Value));
            }
        }

        public void Sorting()
        {
            this.SelectedParty = null;
        }

        private void OnIsActiveChanged(object sender, EventArgs eventArgs)
        {
            if (this.isActive)
            {
                Search search = SearchBuilder.CreateSearch();

                var context =
                    MyRegion(this.regionManager.Regions).Context as
                    Tuple<int, DateTime?, string>;
                search.AsOf = context.Item2;

                string field;
                switch (context.Item3)
                {
                    case "Party":
                        field = "Parent.Id";
                        break;
                                    default:
                        field = context.Item3 + ".Id";
                        break;
                }
                
                if (field.Contains("|"))
                {
                    search.SearchFields.Combinator = SearchCombinator.Or;
                    var fields = field.Split(new Char[]{'|'});
                    
                    foreach (string f in fields)
                    {
                        search.AddSearchCriteria(SearchCombinator.And).AddCriteria(
                            f, SearchCondition.NumericEquals, context.Item1.ToString());
                    }
                }
                else
                {
                    search.AddSearchCriteria(SearchCombinator.And).AddCriteria(
                        field, SearchCondition.NumericEquals, context.Item1.ToString());
                }

                this.entityService.ExecuteAsyncSearch<Party>(
                    this.search = search,
                    (response) =>
                        {
                            IList<Party> searchResults = response;
                            this.Partys =
                                new ObservableCollection<PartyViewModel>(
                                    searchResults.Select(
                                        x =>
                                        new PartyViewModel(
                                            new EntityWithETag<Party>(x, null), this.eventAggregator)).
                                        OrderBy(y => y.Name));
                        },
                    this.eventAggregator, false);
                return;
            }

            this.Partys = new ObservableCollection<PartyViewModel>();
        }

        IRegion MyRegion(IRegionCollection regions)
        {
            for (int i = regions.Count() - 1; i >= 0; i--)
            {
                if (regions.ElementAt(i).Name.EndsWith("-PartySearchResultsRegion") && regions.ElementAt(i).Context != null)
                {
                    return regions.ElementAt(i);
                }
            }

            return null;
        }
    }
}
